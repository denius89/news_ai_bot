import logging
import os
from flask import Flask, send_from_directory, redirect, session, request, g
from flask_cors import CORS
from datetime import timedelta

import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.core.settings import VERSION, DEBUG, WEBAPP_PORT, WEBAPP_HOST, REACTOR_ENABLED
from utils.auth.telegram_auth import verify_telegram_auth
from routes.news_routes import news_bp
from routes.events_routes import register_events_routes

# webapp_bp —É–¥–∞–ª–µ–Ω - –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å serve_react()
from routes.api_routes import api_bp
from routes.dashboard_api import dashboard_api

# WebSocket routes removed - using FastAPI now
# from routes.ws_routes import ws_bp, init_socketio
from routes.metrics_routes import metrics_bp
from utils.logging.logging_setup import setup_logging

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
setup_logging()
logger = logging.getLogger("news_ai_bot")

app = Flask(__name__, static_folder="dist")
app.config["VERSION"] = VERSION

# Flask session configuration –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.config.update(
    SECRET_KEY=os.getenv("FLASK_SECRET_KEY", "dev-secret-key-change-in-production"),
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SECURE=not DEBUG,  # –¢–æ–ª—å–∫–æ –¥–ª—è HTTPS –≤ production
    SESSION_COOKIE_SAMESITE="Lax",
    PERMANENT_SESSION_LIFETIME=timedelta(hours=24),
)


# Middleware –¥–ª—è –µ–¥–∏–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
@app.before_request  # noqa: E302  # noqa: E302
def authenticate_request():
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints."""
    if request.path.startswith("/api/"):
        # –ü—É–±–ª–∏—á–Ω—ã–µ API endpoints, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        public_paths = [
            "/api/health",
            "/api/users/by-telegram-id",  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            "/api/categories",
            "/api/digests/categories",
            "/api/digests/styles",
            "/api/latest",
            "/api/dashboard/stats",
            "/api/dashboard/latest_news",
            "/api/dashboard/news_trend",
            "/api/events",  # Events API - –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ endpoint –ø—É–±–ª–∏—á–Ω—ã–º
        is_public = any(request.path.startswith(path) for path in public_paths)

        if not is_public:
            # –î–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
            auth_result = verify_telegram_auth(
                request_headers=dict(request.headers), session_data=session, bot_token=bot_token
            )

            if not auth_result["success"]:
                from flask import jsonify

                logger.warning(f"Authentication failed for {request.path}: {auth_result['message']}")
                return jsonify({"error": auth_result["message"]}), 401

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ g –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ endpoints
            g.current_user = auth_result

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º session –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if auth_result["method"] != "session":
                session["user_id"] = auth_result["user_id"]
                session["telegram_id"] = auth_result["telegram_id"]
                session.permanent = True


# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram WebApp –∑–∞–ø—Ä–æ—Å–æ–≤
@app.before_request  # noqa: E302  # noqa: E302
def process_telegram_request():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Telegram WebApp –∑–∞–ø—Ä–æ—Å—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏."""
    from utils.auth.telegram_auth import is_telegram_webapp_request

    g.is_telegram_webapp = is_telegram_webapp_request(dict(request.headers))

    if g.is_telegram_webapp:
        logger.debug(f"Telegram WebApp request detected: {request.path}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Telegram WebApp
CORS(
    app,
    origins=[  # noqa: E305
        "https://design-treasures-titten-formation.trycloudflare.com",
        "https://*.trycloudflare.com",
        "https://telegram.org",
        "https://web.telegram.org",
    ],
)


# Middleware –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ iframe (Telegram WebApp)
@app.after_request  # noqa: E302  # noqa: E302
def set_frame_options(response):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ iframe"""
    response.headers["X-Frame-Options"] = "ALLOWALL"
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è CSP –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è Telegram WebApp
    csp_policy = (
        "frame-ancestors *; "
        "connect-src 'self' https://*.trycloudflare.com https://telegram.org https://web.telegram.org wss://*.telegram.org wss://*.web.telegram.org data:; "
        "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https://telegram.org; "
        "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://telegram.org; "
        "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; "
        "font-src 'self' data: https://fonts.gstatic.com; "
        "img-src 'self' data: blob: https:; "
        "object-src 'none'; "
        "base-uri 'self'"
    )
    response.headers["Content-Security-Policy"] = csp_policy
    return response


# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram WebApp –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
@app.before_request  # noqa: E302
def handle_telegram_headers():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Telegram WebApp"""
    from flask import request, g

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token"):
        logger.info("üîç Telegram WebApp request detected")
        logger.info(f"Headers: {dict(request.headers)}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è Telegram WebApp
    g.is_telegram_webapp = bool(request.headers.get("X-Telegram-Bot-Api-Secret-Token"))


# Middleware –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
@app.after_request  # noqa: E302
def disable_api_caching(response):
    """–û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    from flask import request

    if request.path.startswith("/api/"):
        response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
        response.headers["Pragma"] = "no-cache"
        response.headers["Expires"] = "0"
    return response


# –î–æ–±–∞–≤–ª—è–µ–º REACTOR_ENABLED –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤
@app.context_processor
def inject_config():
    return {"config": {"REACTOR_ENABLED": REACTOR_ENABLED}}


# üî• –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏
def importance_icon(value: float) -> str:
    if value is None:
        return "‚ùî"
    if value >= 0.8:
        return "üî•"
    elif value >= 0.5:
        return "‚ö°"
    return "üí§"


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ Jinja
app.jinja_env.filters["importance_icon"] = importance_icon


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—É—Ç–µ–π
from config.paths import get_path, setup_pythonpath

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PYTHONPATH
setup_pythonpath()

# –ü—É—Ç—å –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É React
REACT_DIST_PATH = get_path("webapp_dist")


# React —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route("/webapp")
@app.route("/webapp/")
@app.route("/webapp/<path:path>")
def serve_react(path=""):
    """–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç–∞—Ç–∏–∫—É"""
    logger.info(f"üéØ serve_react() –≤—ã–∑–≤–∞–Ω–∞ —Å path='{path}'")
    try:
        if path == "" or path == "/":
            logger.info("üìÑ –û—Ç–¥–∞–µ–º index.html")
            response = send_from_directory(REACT_DIST_PATH, "index.html")
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram WebApp
            response.headers["Cross-Origin-Embedder-Policy"] = "unsafe-none"
            response.headers["Cross-Origin-Opener-Policy"] = "unsafe-none"
            response.headers["Cross-Origin-Resource-Policy"] = "cross-origin"
            return response

        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
        try:
            response = send_from_directory(REACT_DIST_PATH, path)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram WebApp
            response.headers["Cross-Origin-Embedder-Policy"] = "unsafe-none"
            response.headers["Cross-Origin-Opener-Policy"] = "unsafe-none"
            response.headers["Cross-Origin-Resource-Policy"] = "cross-origin"
            return response
        except BaseException:
            # React Router fallback - –≤—Å–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ –≤–µ–¥—É—Ç –Ω–∞ index.html
            response = send_from_directory(REACT_DIST_PATH, "index.html")
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram WebApp
            response.headers["Cross-Origin-Embedder-Policy"] = "unsafe-none"
            response.headers["Cross-Origin-Opener-Policy"] = "unsafe-none"
            response.headers["Cross-Origin-Resource-Policy"] = "cross-origin"
            return response
    except FileNotFoundError:
        # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ dist –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        return (
            f"""
        <h1>React –Ω–µ —Å–æ–±—Ä–∞–Ω</h1>
        <p>–ó–∞–ø—É—Å—Ç–∏—Ç–µ: <code>cd webapp && npm run build</code></p>
        <p>–ü–∞–ø–∫–∞ {REACT_DIST_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</p>
        """,
            404,
        )


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ React
@app.route("/")
def index():
    return redirect("/webapp")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.register_blueprint(news_bp)
register_events_routes(app)  # Register events routes
# webapp_bp —É–¥–∞–ª–µ–Ω - –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å serve_react()
app.register_blueprint(api_bp)
app.register_blueprint(dashboard_api)
# WebSocket blueprint removed - using FastAPI now
# app.register_blueprint(ws_bp)
app.register_blueprint(metrics_bp)

# WebSocket initialization removed - using FastAPI now
# if REACTOR_ENABLED:
#     try:
#         init_socketio(app)
#         logger.info("‚úÖ WebSocket Hub –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: {e}")
# else:
#     logger.info("‚ö†Ô∏è Reactor –æ—Ç–∫–ª—é—á–µ–Ω, WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    from database.db_models import get_latest_news

    logger.info(f"üöÄ Webapp –∑–∞–ø—É—â–µ–Ω (—Ö–æ—Å—Ç {WEBAPP_HOST}, –ø–æ—Ä—Ç {WEBAPP_PORT}, debug={DEBUG})")

    try:
        latest = get_latest_news(limit=5)
        logger.debug("üîé –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î:")
        for n in latest:
            logger.debug(
                "- %s... (credibility=%s, importance=%s)",
                n["title"][:50],
                n.get("credibility"),
                n.get("importance"),
            )
    except Exception:
        logger.exception("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ debug-–∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

    # WebSocket support removed - using FastAPI now
    # if REACTOR_ENABLED:
    #     # –ò—Å–ø–æ–ª—å–∑—É–µ–º SocketIO –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    #     from routes.ws_routes import socketio
    #     if socketio:
    #         socketio.run(app, host=WEBAPP_HOST, port=WEBAPP_PORT, debug=DEBUG, allow_unsafe_werkzeug=True)
    #     else:
    #         logger.error("‚ùå SocketIO –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π Flask")
    #         app.run(host=WEBAPP_HOST, port=WEBAPP_PORT, debug=DEBUG)
    # else:
    #     # –û–±—ã—á–Ω—ã–π Flask –∑–∞–ø—É—Å–∫
    #     app.run(host=WEBAPP_HOST, port=WEBAPP_PORT, debug=DEBUG)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π Flask –±–µ–∑ WebSocket
    logger.info("‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π Flask")
    app.run(host=WEBAPP_HOST, port=WEBAPP_PORT, debug=DEBUG)
