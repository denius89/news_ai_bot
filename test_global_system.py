#!/usr/bin/env python3
"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã PulseAI.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —ç—Ç–∞–ø–æ–≤ 1-3.
"""

import asyncio
import logging
import sys
import time
from pathlib import Path

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from database.service import get_sync_service, get_async_service
from services.unified_digest_service import get_sync_digest_service, get_async_digest_service
from services.subscription_service import get_async_subscription_service
from services.notification_service import get_async_notification_service
from parsers.unified_parser import get_sync_parser, get_async_parser
from utils.cache import get_cache_manager, get_news_cache
from utils.http_client import get_http_client
from utils.standard_logging import PerformanceTimer, get_structured_logger
from config.settings import WEBAPP_URL, SUPABASE_URL

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("global_test")


async def test_database_layer():
    """–¢–µ—Å—Ç —Å–ª–æ—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é —Å–ª–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        sync_db = get_sync_service()
        news = sync_db.get_latest_news(limit=5)
        logger.info(f"‚úÖ Sync DB: –ø–æ–ª—É—á–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        async_db = get_async_service()
        async_news = await async_db.async_get_latest_news(limit=5)
        logger.info(f"‚úÖ Async DB: –ø–æ–ª—É—á–µ–Ω–æ {len(async_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª–æ–µ –ë–î: {e}")
        return False


async def test_services_layer():
    """–¢–µ—Å—Ç —Å–ª–æ—è —Å–µ—Ä–≤–∏—Å–æ–≤."""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é —Å–ª–æ–π —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        sync_digest = get_sync_digest_service()
        digest_text = sync_digest.build_daily_digest(limit=3)
        logger.info(f"‚úÖ Digest Service: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∞–π–¥–∂–µ—Å—Ç ({len(digest_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        async_digest = get_async_digest_service()
        async_digest_text = await async_digest.async_build_daily_digest(limit=3)
        logger.info(f"‚úÖ Async Digest Service: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∞–π–¥–∂–µ—Å—Ç ({len(async_digest_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç AI –¥–∞–π–¥–∂–µ—Å—Ç–∞
        ai_digest = sync_digest.build_ai_digest(category="crypto", style="analytical", limit=3)
        logger.info(f"‚úÖ AI Digest: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI –¥–∞–π–¥–∂–µ—Å—Ç ({len(ai_digest)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        subscription_service = get_async_subscription_service()
        subscriptions = await subscription_service.get_user_subscriptions(1)
        logger.info(f"‚úÖ Subscription Service: –ø–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ {subscriptions}")
        
        # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_service = get_async_notification_service()
        notifications = await notification_service.get_user_notifications(1, limit=5)
        logger.info(f"‚úÖ Notification Service: –ø–æ–ª—É—á–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª–æ–µ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False


async def test_parsers_layer():
    """–¢–µ—Å—Ç —Å–ª–æ—è –ø–∞—Ä—Å–µ—Ä–æ–≤."""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é —Å–ª–æ–π –ø–∞—Ä—Å–µ—Ä–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        sync_parser = get_sync_parser()
        events = sync_parser.parse_events(days_ahead=1)
        logger.info(f"‚úÖ Sync Parser: —Å–ø–∞—Ä—Å–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        async_parser = get_async_parser()
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        news_items = await async_parser.parse_source_async(
            "https://feeds.feedburner.com/oreilly/radar",
            "tech", "ai", "O'Reilly Radar"
        )
        logger.info(f"‚úÖ Async Parser: —Å–ø–∞—Ä—Å–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª–æ–µ –ø–∞—Ä—Å–µ—Ä–æ–≤: {e}")
        return False


async def test_performance_optimizations():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        cache_manager = get_cache_manager()
        news_cache = get_news_cache()
        
        # –¢–µ—Å—Ç –∫—ç—à–∞
        await news_cache.set("test_key", "test_value", ttl=60)
        cached_value = await news_cache.get("test_key")
        assert cached_value == "test_value"
        logger.info("‚úÖ Cache: –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç HTTP –∫–ª–∏–µ–Ω—Ç–∞
        http_client = get_http_client()
        logger.info("‚úÖ HTTP Client: –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç PerformanceTimer
        with PerformanceTimer("Test operation"):
            await asyncio.sleep(0.1)
        logger.info("‚úÖ Performance Timer: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        structured_logger = get_structured_logger("test")
        structured_logger.info("Test message", test_param="value")
        logger.info("‚úÖ Structured Logger: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è—Ö: {e}")
        return False


async def test_telegram_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram."""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ handlers
        from telegram_bot.handlers import routers
        logger.info(f"‚úÖ Telegram Handlers: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ keyboards
        from telegram_bot.keyboards import back_inline_keyboard
        logger.info("‚úÖ Telegram Keyboards: –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ bot
        from telegram_bot.bot import main
        logger.info("‚úÖ Telegram Bot: –±–æ—Ç –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


async def test_webapp_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebApp."""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å WebApp...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ routes
        from routes import webapp_routes, api_routes, news_routes
        logger.info("‚úÖ WebApp Routes: –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ templates
        from pathlib import Path
        templates_dir = Path("templates")
        template_files = list(templates_dir.glob("*.html"))
        logger.info(f"‚úÖ WebApp Templates: –Ω–∞–π–¥–µ–Ω–æ {len(template_files)} —à–∞–±–ª–æ–Ω–æ–≤")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ static files
        static_dir = Path("static")
        css_files = list(static_dir.glob("*.css"))
        js_files = list(static_dir.glob("js/*.js"))
        logger.info(f"‚úÖ WebApp Static: {len(css_files)} CSS, {len(js_files)} JS —Ñ–∞–π–ª–æ–≤")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


async def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    try:
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if SUPABASE_URL:
            logger.info("‚úÖ Supabase URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Supabase URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        if WEBAPP_URL:
            logger.info(f"‚úÖ WebApp URL: {WEBAPP_URL}")
        else:
            logger.warning("‚ö†Ô∏è WebApp URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ sources
        from services.categories import get_categories
        categories = get_categories()
        logger.info(f"‚úÖ Categories: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    try:
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        sync_db = get_sync_service()
        empty_news = sync_db.get_latest_news(categories=["nonexistent"], limit=1)
        logger.info(f"‚úÖ Error Handling: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø—É—Å—Ç–∞—è –≤—ã–±–æ—Ä–∫–∞ ({len(empty_news)} –Ω–æ–≤–æ—Å—Ç–µ–π)")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        subscription_service = get_async_subscription_service()
        empty_subscriptions = await subscription_service.get_user_subscriptions(999999)
        logger.info(f"‚úÖ Error Handling: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—É—Å—Ç—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ ({empty_subscriptions})")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ PULSEAI")
    logger.info("=" * 70)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –°–ª–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("\nüìã –¢–ï–°–¢ 1: –°–ª–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    db_ok = await test_database_layer()
    results.append(("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", db_ok))
    
    # –¢–µ—Å—Ç 2: –°–ª–æ–π —Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info("\nüìã –¢–ï–°–¢ 2: –°–ª–æ–π —Å–µ—Ä–≤–∏—Å–æ–≤")
    services_ok = await test_services_layer()
    results.append(("–°–µ—Ä–≤–∏—Å—ã", services_ok))
    
    # –¢–µ—Å—Ç 3: –°–ª–æ–π –ø–∞—Ä—Å–µ—Ä–æ–≤
    logger.info("\nüìã –¢–ï–°–¢ 3: –°–ª–æ–π –ø–∞—Ä—Å–µ—Ä–æ–≤")
    parsers_ok = await test_parsers_layer()
    results.append(("–ü–∞—Ä—Å–µ—Ä—ã", parsers_ok))
    
    # –¢–µ—Å—Ç 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    logger.info("\nüìã –¢–ï–°–¢ 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    perf_ok = await test_performance_optimizations()
    results.append(("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", perf_ok))
    
    # –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram
    logger.info("\nüìã –¢–ï–°–¢ 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram")
    telegram_ok = await test_telegram_integration()
    results.append(("Telegram", telegram_ok))
    
    # –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WebApp
    logger.info("\nüìã –¢–ï–°–¢ 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WebApp")
    webapp_ok = await test_webapp_integration()
    results.append(("WebApp", webapp_ok))
    
    # –¢–µ—Å—Ç 7: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    logger.info("\nüìã –¢–ï–°–¢ 7: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    config_ok = await test_configuration()
    results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", config_ok))
    
    # –¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    logger.info("\nüìã –¢–ï–°–¢ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    error_ok = await test_error_handling()
    results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", error_ok))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 70)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("üöÄ –°–ò–°–¢–ï–ú–ê PULSEAI –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        return True
    else:
        logger.error(f"‚ö†Ô∏è –ü–†–û–í–ê–õ–ï–ù–û {total - passed} –¢–ï–°–¢–û–í")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
