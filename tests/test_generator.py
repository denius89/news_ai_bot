# tests/test_generator.py
import pytest
import digests.generator as generator


@pytest.mark.unit
def test_generate_digest_no_ai(monkeypatch):
    """–û–±—ã—á–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –±–µ–∑ AI"""
    monkeypatch.setattr(
        generator,
        "fetch_recent_news",
        lambda limit=10, category=None: [
            {
                "title": "–ù–æ–≤–æ—Å—Ç—å 1",
                "published_at_fmt": "01 Jan 2024, 10:00",
                "link": "http://test1",
            },
            {"title": "–ù–æ–≤–æ—Å—Ç—å 2", "published_at_fmt": "02 Jan 2024, 12:00", "link": None},
        ],
    )

    text = generator.generate_digest(limit=2, ai=False)
    assert text.startswith("üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:")
    assert "–ù–æ–≤–æ—Å—Ç—å 1" in text
    assert '<a href="http://test1">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>' in text
    assert "–ù–æ–≤–æ—Å—Ç—å 2" in text
    assert "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" not in text.split("–ù–æ–≤–æ—Å—Ç—å 2")[1]  # –≤—Ç–æ—Ä–∞—è –Ω–æ–≤–æ—Å—Ç—å –±–µ–∑ —Å—Å—ã–ª–∫–∏


@pytest.mark.unit
def test_generate_digest_ai(monkeypatch):
    """AI-–¥–∞–π–¥–∂–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å generate_batch_summary"""
    called = {}

    def fake_fetch_recent_news(limit=10, category=None):
        called["limit"] = limit
        return [{"title": "AI news", "content": "AI content"}]

    monkeypatch.setattr(generator, "fetch_recent_news", fake_fetch_recent_news)
    monkeypatch.setattr(generator, "generate_batch_summary", lambda items, **kwargs: "AI –î–∞–π–¥–∂–µ—Å—Ç")

    text = generator.generate_digest(limit=1, ai=True, style="analytical")
    assert text == "AI –î–∞–π–¥–∂–µ—Å—Ç"
    assert called["limit"] >= 15  # –¥–æ–ª–∂–Ω–æ —Ñ–æ—Ä—Å–∏—Ç—å—Å—è –º–∏–Ω–∏–º—É–º 15


@pytest.mark.unit
def test_generate_digest_empty(monkeypatch):
    """–ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π ‚Üí '–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.'"""
    monkeypatch.setattr(generator, "fetch_recent_news", lambda *a, **kw: [])

    text = generator.generate_digest(limit=5, ai=False)
    assert text == "–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."


# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è fetch_recent_news ---
def test_fetch_recent_news_formats_dates(monkeypatch):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ published_at –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""

    class FakeResponse:
        data = [
            {"id": 1, "title": "Test", "published_at": "2024-01-01T10:00:00Z"},
            {"id": 2, "title": "Bad date", "published_at": "not-a-date"},
        ]

    class FakeQuery:
        def select(self, *_):
            return self

        def order(self, *_, **__):
            return self

        def limit(self, *_):
            return self

        def eq(self, *_):
            return self

        def execute(self):
            return FakeResponse()

    monkeypatch.setattr(
        generator, "supabase", type("Supa", (), {"table": lambda *_: FakeQuery()})()
    )

    result = generator.fetch_recent_news(limit=2, category="test")
    assert isinstance(result, list)
    assert "published_at_fmt" in result[0]
    assert result[0]["published_at_fmt"].startswith("01 Jan")
    assert result[1]["published_at_fmt"] == "‚Äî"  # fallback –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–µ


def test_fetch_recent_news_sorts_by_importance_and_date(monkeypatch):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ importance –∏ published_at"""

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ (importance: 1 –≤—ã—à–µ —á–µ–º 0, published_at: –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–µ ‚Äî –≤—ã—à–µ)
    class FakeResponse:
        data = [
            {"id": 1, "title": "Old low", "importance": 0, "published_at": "2024-01-01T10:00:00Z"},
            {"id": 2, "title": "New low", "importance": 0, "published_at": "2024-01-02T10:00:00Z"},
            {"id": 3, "title": "High imp", "importance": 1, "published_at": "2024-01-01T09:00:00Z"},
        ]

    class FakeQuery:
        def select(self, *_):
            return self

        def order(self, *_, **__):
            return self

        def limit(self, *_):
            return self

        def eq(self, *_):
            return self

        def execute(self):
            return FakeResponse()

    monkeypatch.setattr(
        generator, "supabase", type("Supa", (), {"table": lambda *_: FakeQuery()})()
    )

    result = generator.fetch_recent_news(limit=3)

    titles = [row["title"] for row in result]

    # –î–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ —Å–Ω–∞—á–∞–ª–∞ High imp, –ø–æ—Ç–æ–º New low, –ø–æ—Ç–æ–º Old low
    assert titles == ["High imp", "New low", "Old low"]
