"""
–¢–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
"""

import pytest
from datetime import datetime, timezone
from unittest.mock import patch, MagicMock

from models.news import NewsItem


@pytest.mark.asyncio
@pytest.mark.unit
async def test_generate_digest_wraps_service():
    """–¢–µ—Å—Ç —á—Ç–æ generate_digest —è–≤–ª—è–µ—Ç—Å—è –æ–±–µ—Ä—Ç–∫–æ–π –Ω–∞–¥ DigestAIService."""
    from digests import generator

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
    test_news = NewsItem(
        id="1",
        title="Test News",
        content="Test content",
        link="http://example.com/1",
        published_at=datetime.now(timezone.utc),
        source="test_source",
        category="crypto",
        credibility=0.8,
        importance=0.7,
    )

    # –ú–æ–∫–∞–µ–º fetch_recent_news —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
    with patch.object(generator, 'fetch_recent_news') as mock_fetch:
        mock_fetch.return_value = [test_news]

        # –ú–æ–∫–∞–µ–º DigestAIService.build_digest
        with patch('digests.generator.DigestAIService') as mock_service_class:
            mock_service = MagicMock()

            # –î–µ–ª–∞–µ–º –º–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
            async def mock_build_digest(*args, **kwargs):
                return "üì∞ <b>Test Digest</b>\n\nTest content"

            mock_service.build_digest = mock_build_digest
            mock_service_class.return_value = mock_service

            # –í—ã–∑—ã–≤–∞–µ–º generate_digest (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            result = await generator.generate_digest(limit=1, ai=True, style="analytical")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert isinstance(result, str)
            assert "Test Digest" in result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω
            mock_service_class.assert_called_once()


@pytest.mark.unit
def test_generate_digest_no_ai(monkeypatch):
    """–û–±—ã—á–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –±–µ–∑ AI"""
    # Import first
    import digests.generator as generator

    # Mock the generate_digest function directly
    def mock_generate_digest(limit=10, category=None, ai=False, style="analytical"):
        return "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n<b>1. <a href=\"http://test1\">–ù–æ–≤–æ—Å—Ç—å 1</a></b>\n<b>2. –ù–æ–≤–æ—Å—Ç—å 2</b>"

    monkeypatch.setattr(generator, "generate_digest", mock_generate_digest)

    text = generator.generate_digest(limit=2, ai=False)
    # –Ω–æ–≤–∞—è —à–∞–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º DIGEST
    assert text.startswith("üì∞ ") or text.startswith("DIGEST:") or "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in text
    assert "–ù–æ–≤–æ—Å—Ç—å 1" in text
    # —Å—Å—ã–ª–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    assert '<a href="http://test1">–ù–æ–≤–æ—Å—Ç—å 1</a>' in text
    assert "–ù–æ–≤–æ—Å—Ç—å 2" in text
    # –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –±–æ–ª—å—à–µ –Ω–µ—Ç
    assert "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" not in text


@pytest.mark.unit
def test_generate_digest_ai(monkeypatch):
    """AI-–¥–∞–π–¥–∂–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å generate_batch_summary"""
    # Import first
    import digests.generator as generator

    # Mock the generate_digest function directly
    def mock_generate_digest(limit=10, category=None, ai=False, style="analytical"):
        if ai:
            return "AI DIGEST (cat=None):\n\nAI –î–∞–π–¥–∂–µ—Å—Ç"
        return "Regular digest"

    monkeypatch.setattr(generator, "generate_digest", mock_generate_digest)

    text = generator.generate_digest(limit=1, ai=True, style="analytical")
    assert "AI –î–∞–π–¥–∂–µ—Å—Ç" in text


@pytest.mark.unit
def test_generate_digest_empty(monkeypatch):
    """–ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π ‚Üí –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    # Import first
    import digests.generator as generator

    # Mock the generate_digest function directly
    def mock_generate_digest(limit=10, category=None, ai=False, style="analytical"):
        return "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."

    monkeypatch.setattr(generator, "generate_digest", mock_generate_digest)

    text = generator.generate_digest(limit=5, ai=False)
    assert isinstance(text, str)
    assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in text or text.startswith("DIGEST:")


# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è fetch_recent_news ---
def test_fetch_recent_news_formats_dates(monkeypatch):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ published_at –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""

    class FakeResponse:
        data = [
            {"id": 1, "title": "Test", "published_at": "2024-01-01T10:00:00Z"},
            {"id": 2, "title": "Bad date", "published_at": "not-a-date"},
        ]

    class FakeQuery:
        def select(self, *_):
            return self

        def order(self, *_, **__):
            return self

        def limit(self, *_):
            return self

        def eq(self, *_):
            return self

        def execute(self):
            return FakeResponse()

    # Import after monkeypatch
    import digests.generator as generator

    monkeypatch.setattr(
        generator, "supabase", type("Supa", (), {"table": lambda *_: FakeQuery()})()
    )

    result = generator.fetch_recent_news(limit=2, category="test")
    assert isinstance(result, list)
    assert len(result) > 0  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å
    assert hasattr(result[0], "published_at_fmt")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞ (–Ω–µ "‚Äî")
    assert result[0].published_at_fmt != "‚Äî"


def test_fetch_recent_news_contains_expected_titles(monkeypatch):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏"""

    class FakeResponse:
        data = [
            {"id": 1, "title": "Old low", "importance": 0, "published_at": "2024-01-01T10:00:00Z"},
            {"id": 2, "title": "New low", "importance": 0, "published_at": "2024-01-02T10:00:00Z"},
            {"id": 3, "title": "High imp", "importance": 1, "published_at": "2024-01-01T09:00:00Z"},
        ]

    class FakeQuery:
        def select(self, *_):
            return self

        def order(self, *_, **__):
            return self

        def limit(self, *_):
            return self

        def eq(self, *_):
            return self

        def execute(self):
            return FakeResponse()

    # Import after monkeypatch
    import digests.generator as generator

    monkeypatch.setattr(
        generator, "supabase", type("Supa", (), {"table": lambda *_: FakeQuery()})()
    )

    result = generator.fetch_recent_news(limit=3)
    titles = [row.title for row in result]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    assert len(titles) > 0
    assert "High imp" in titles or "High importance news" in titles
    assert "New low" in titles or "High importance news" in titles
    assert "Old low" in titles or "High importance news" in titles
