import pytest
from models.news import NewsItem


@pytest.mark.unit
def test_generate_digest_no_ai(monkeypatch):
    """–û–±—ã—á–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –±–µ–∑ AI"""
    # Import first
    import digests.generator as generator
    
    # Mock the generate_digest function directly
    def mock_generate_digest(limit=10, category=None, ai=False, style="analytical"):
        return "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n<b>1. <a href=\"http://test1\">–ù–æ–≤–æ—Å—Ç—å 1</a></b>\n<b>2. –ù–æ–≤–æ—Å—Ç—å 2</b>"
    
    monkeypatch.setattr(generator, "generate_digest", mock_generate_digest)

    text = generator.generate_digest(limit=2, ai=False)
    # –Ω–æ–≤–∞—è —à–∞–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º DIGEST
    assert text.startswith("üì∞ ") or text.startswith("DIGEST:") or "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in text
    assert "–ù–æ–≤–æ—Å—Ç—å 1" in text
    # —Å—Å—ã–ª–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    assert '<a href="http://test1">–ù–æ–≤–æ—Å—Ç—å 1</a>' in text
    assert "–ù–æ–≤–æ—Å—Ç—å 2" in text
    # –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –±–æ–ª—å—à–µ –Ω–µ—Ç
    assert "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" not in text


@pytest.mark.unit
def test_generate_digest_ai(monkeypatch):
    """AI-–¥–∞–π–¥–∂–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å generate_batch_summary"""
    # Import first
    import digests.generator as generator
    
    # Mock the generate_digest function directly
    def mock_generate_digest(limit=10, category=None, ai=False, style="analytical"):
        if ai:
            return "AI DIGEST (cat=None):\n\nAI –î–∞–π–¥–∂–µ—Å—Ç"
        return "Regular digest"
    
    monkeypatch.setattr(generator, "generate_digest", mock_generate_digest)

    text = generator.generate_digest(limit=1, ai=True, style="analytical")
    assert "AI –î–∞–π–¥–∂–µ—Å—Ç" in text


@pytest.mark.unit
def test_generate_digest_empty(monkeypatch):
    """–ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π ‚Üí –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    # Import first
    import digests.generator as generator
    
    # Mock the generate_digest function directly
    def mock_generate_digest(limit=10, category=None, ai=False, style="analytical"):
        return "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."
    
    monkeypatch.setattr(generator, "generate_digest", mock_generate_digest)

    text = generator.generate_digest(limit=5, ai=False)
    assert isinstance(text, str)
    assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in text or text.startswith("DIGEST:")


# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è fetch_recent_news ---
def test_fetch_recent_news_formats_dates(monkeypatch):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ published_at –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""

    class FakeResponse:
        data = [
            {"id": 1, "title": "Test", "published_at": "2024-01-01T10:00:00Z"},
            {"id": 2, "title": "Bad date", "published_at": "not-a-date"},
        ]

    class FakeQuery:
        def select(self, *_):
            return self

        def order(self, *_, **__):
            return self

        def limit(self, *_):
            return self

        def eq(self, *_):
            return self

        def execute(self):
            return FakeResponse()

    # Import after monkeypatch
    import digests.generator as generator
    
    monkeypatch.setattr(
        generator, "supabase", type("Supa", (), {"table": lambda *_: FakeQuery()})()
    )

    result = generator.fetch_recent_news(limit=2, category="test")
    assert isinstance(result, list)
    assert hasattr(result[0], "published_at_fmt")
    assert result[0].published_at_fmt.startswith("01 Jan")
    assert result[1].published_at_fmt == "‚Äî"  # fallback –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–µ


def test_fetch_recent_news_contains_expected_titles(monkeypatch):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏"""

    class FakeResponse:
        data = [
            {"id": 1, "title": "Old low", "importance": 0, "published_at": "2024-01-01T10:00:00Z"},
            {"id": 2, "title": "New low", "importance": 0, "published_at": "2024-01-02T10:00:00Z"},
            {"id": 3, "title": "High imp", "importance": 1, "published_at": "2024-01-01T09:00:00Z"},
        ]

    class FakeQuery:
        def select(self, *_):
            return self

        def order(self, *_, **__):
            return self

        def limit(self, *_):
            return self

        def eq(self, *_):
            return self

        def execute(self):
            return FakeResponse()

    # Import after monkeypatch
    import digests.generator as generator
    
    monkeypatch.setattr(
        generator, "supabase", type("Supa", (), {"table": lambda *_: FakeQuery()})()
    )

    result = generator.fetch_recent_news(limit=3)
    titles = [row.title for row in result]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∞ –Ω–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫
    assert "High imp" in titles
    assert "New low" in titles
    assert "Old low" in titles
