"""
Test Telegram keyboards functionality.

This test checks that all keyboard functions work correctly
without actually running the bot.
"""

import sys
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def test_keyboard_imports():
    """Test that all keyboard functions can be imported."""
    try:
        from telegram_bot.keyboards import (
            start_inline_keyboard,
            main_inline_keyboard,
            back_inline_keyboard,
            subscriptions_inline_keyboard,
            notifications_inline_keyboard,
            categories_inline_keyboard,
        )
        
        # Check that all functions exist
        functions = [
            start_inline_keyboard,
            main_inline_keyboard,
            back_inline_keyboard,
            subscriptions_inline_keyboard,
            notifications_inline_keyboard,
            categories_inline_keyboard,
        ]
        
        for func in functions:
            assert callable(func), f"Function {func.__name__} is not callable"
        
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_keyboard_structure():
    """Test that keyboards have correct structure."""
    try:
        from telegram_bot.keyboards import (
            main_inline_keyboard,
            subscriptions_inline_keyboard,
            notifications_inline_keyboard,
            categories_inline_keyboard,
        )
        
        # Test main keyboard
        main_kb = main_inline_keyboard()
        assert hasattr(main_kb, 'inline_keyboard')
        assert len(main_kb.inline_keyboard) >= 5  # Should have at least 5 buttons now
        
        # Check for new buttons
        all_buttons = []
        for row in main_kb.inline_keyboard:
            for button in row:
                all_buttons.append(button.text)
        
        assert "üìã –ü–æ–¥–ø–∏—Å–∫–∏" in all_buttons, "Subscriptions button not found in main keyboard"
        assert "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" in all_buttons, "Notifications button not found in main keyboard"
        
        # Test subscriptions keyboard
        subs_kb = subscriptions_inline_keyboard()
        assert hasattr(subs_kb, 'inline_keyboard')
        assert len(subs_kb.inline_keyboard) == 4  # 3 action buttons + back
        
        # Test notifications keyboard
        notif_kb = notifications_inline_keyboard()
        assert hasattr(notif_kb, 'inline_keyboard')
        assert len(notif_kb.inline_keyboard) == 4  # 3 action buttons + back
        
        # Test categories keyboard
        cat_kb = categories_inline_keyboard("subscribe")
        assert hasattr(cat_kb, 'inline_keyboard')
        assert len(cat_kb.inline_keyboard) > 1  # Categories + back button
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False


def test_callback_data():
    """Test that callback data is properly formatted."""
    try:
        from telegram_bot.keyboards import (
            main_inline_keyboard,
            subscriptions_inline_keyboard,
            notifications_inline_keyboard,
            categories_inline_keyboard,
        )
        
        # Test main keyboard callback data
        main_kb = main_inline_keyboard()
        callback_data_list = []
        for row in main_kb.inline_keyboard:
            for button in row:
                callback_data_list.append(button.callback_data)
        
        assert "subscriptions" in callback_data_list
        assert "notifications" in callback_data_list
        
        # Test subscriptions keyboard callback data
        subs_kb = subscriptions_inline_keyboard()
        subs_callbacks = []
        for row in subs_kb.inline_keyboard:
            for button in row:
                subs_callbacks.append(button.callback_data)
        
        expected_subs_callbacks = ["my_subs", "subscribe_menu", "unsubscribe_menu", "back"]
        for expected in expected_subs_callbacks:
            assert expected in subs_callbacks, f"Missing callback: {expected}"
        
        # Test notifications keyboard callback data
        notif_kb = notifications_inline_keyboard()
        notif_callbacks = []
        for row in notif_kb.inline_keyboard:
            for button in row:
                notif_callbacks.append(button.callback_data)
        
        expected_notif_callbacks = ["my_notifications", "notify_on_digest", "notify_off_digest", "back"]
        for expected in expected_notif_callbacks:
            assert expected in notif_callbacks, f"Missing callback: {expected}"
        
        print("‚úÖ Callback data –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ callback data: {e}")
        return False


def main():
    """Run all keyboard tests."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("=" * 50)
    
    tests = [
        test_keyboard_imports,
        test_keyboard_structure,
        test_callback_data,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} —É–ø–∞–ª: {e}")
            print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("‚úÖ –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
        print("   üìã –ü–æ–¥–ø–∏—Å–∫–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("   üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
        print("   ‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
        print("   ‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏")
        print("   üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        print("   ‚úÖ/‚ùå –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
