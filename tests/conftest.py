# tests/conftest.py
import pytest
import sys
import os
from pathlib import Path
from dotenv import load_dotenv
from tools.port_manager import PortManager

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


@pytest.fixture(scope="session", autouse=True)
def load_env():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
    –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    load_dotenv()


@pytest.fixture(scope="session", autouse=True)
def prepare_test_environment():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤:
    - –û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    - –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤
    """
    print("\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")

    manager = PortManager()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    result = manager.prepare_environment(force=False)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ—Ä—Ç–µ 5000 (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å ControlCenter)
    critical_warnings = [w for w in result["warnings"] if "–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç" in w and "5000" not in w]

    if critical_warnings:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for warning in critical_warnings:
            print(f"   - {warning}")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   make free-ports")
        print("   python tools/port_manager.py --cleanup")
        pytest.exit("–û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤", returncode=1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
    os.environ["TEST_WEBAPP_PORT"] = str(result["free_ports"].get("webapp", 8001))
    os.environ["TEST_API_PORT"] = str(result["free_ports"].get("api", 5000))

    print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤")
    print(f"   WebApp –ø–æ—Ä—Ç: {os.environ['TEST_WEBAPP_PORT']}")
    print(f"   API –ø–æ—Ä—Ç: {os.environ['TEST_API_PORT']}")

    yield result

    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤...")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤


@pytest.fixture
def test_ports():
    """
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö.
    """
    return {
        "webapp": int(os.environ.get("TEST_WEBAPP_PORT", 8001)),
        "api": int(os.environ.get("TEST_API_PORT", 5000)),
        "test": 8080,
    }


@pytest.fixture
def port_manager():
    """
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä PortManager –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö.
    """
    return PortManager()
