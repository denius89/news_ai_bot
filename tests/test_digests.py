"""
–¢–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
"""

import pytest


@pytest.mark.unit
def test_generate_digest_no_news(monkeypatch):
    """–ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç ‚Üí –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞ —Å —à–∞–ø–∫–æ–π DIGEST"""
    from digests import generator

    monkeypatch.setattr(generator, "fetch_recent_news", lambda *a, **k: [])
    result = generator.generate_digest(limit=5, ai=False)

    assert isinstance(result, str)
    assert result.startswith("üì∞ ") or result.startswith("DIGEST:") or "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result


@pytest.mark.unit
def test_generate_digest_with_news(monkeypatch):
    """–ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ ‚Üí –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî <a href>"""
    # Import first
    from digests import generator

    # Mock the generate_digest function directly
    def mock_generate_digest(limit=10, category=None, ai=False, style="analytical"):
        if ai:
            return "AI DIGEST: Test AI content"
        return "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n<b>1. <a href=\"http://example.com/1\">News 1</a></b>\n<b>2. News 2</b>"

    monkeypatch.setattr(generator, "generate_digest", mock_generate_digest)

    result = generator.generate_digest(limit=2, ai=False)

    assert isinstance(result, str)
    assert "News 1" in result
    assert "News 2" in result
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ —Å—Å—ã–ª–∫–∞
    assert '<a href="http://example.com/1">News 1</a>' in result
    # –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
    assert "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" not in result
