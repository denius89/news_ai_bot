"""
–¢–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
"""

import pytest
from datetime import datetime, timezone
from unittest.mock import patch

from models.news import NewsItem
from digests.ai_service import DigestAIService, DigestConfig


@pytest.mark.asyncio
@pytest.mark.unit
async def test_build_digest_happy_path():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏."""
    # –°–æ–∑–¥–∞–µ–º 2 NewsItem —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    news_items = [
        NewsItem(
            id="1",
            title="Test News 1",
            content="Test content 1",
            link="http://example.com/1",
            published_at=datetime.now(timezone.utc),
            source="test_source",
            category="crypto",
            credibility=0.8,
            importance=0.7,
        ),
        NewsItem(
            id="2",
            title="Test News 2",
            content="Test content 2",
            link="http://example.com/2",
            published_at=datetime.now(timezone.utc),
            source="test_source",
            category="economy",
            credibility=0.9,
            importance=0.8,
        ),
    ]

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –≤—ã–∑—ã–≤–∞–µ–º build_digest
    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)

    # –ú–æ–∫–∞–µ–º AI –≤—ã–∑–æ–≤, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with patch.object(service, '_llm_summarize') as mock_llm:
        mock_llm.return_value = (
            "üì∞ <b>–°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç...\n\n"
            "<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:</b>\n1. –í–ª–∏—è–µ—Ç –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n2. –í–∞–∂–Ω–æ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"
        )

        result = await service.build_digest(news_items, "analytical")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert isinstance(result, str)
        assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result or "–°–≤–æ–¥–∫–∞" in result
        assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in result
        assert len(result) > 50  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç


@pytest.mark.asyncio
@pytest.mark.unit
async def test_build_digest_empty_category():
    """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π."""
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    news_items = []

    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)

    result = await service.build_digest(news_items, "analytical")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback
    assert isinstance(result, str)
    assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result or "–°–≤–æ–¥–∫–∞" in result
    assert len(result) > 0


@pytest.mark.asyncio
@pytest.mark.unit
async def test_build_digest_many_news():
    """–¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π - –¥–æ–ª–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è 8."""
    # –°–æ–∑–¥–∞–µ–º 30 –Ω–æ–≤–æ—Å—Ç–µ–π
    news_items = []
    for i in range(30):
        news_items.append(
            NewsItem(
                id=str(i),
                title=f"Test News {i}",
                content=f"Test content {i}",
                link=f"http://example.com/{i}",
                published_at=datetime.now(timezone.utc),
                source="test_source",
                category="crypto",
                credibility=0.5 + (i % 5) * 0.1,
                importance=0.5 + (i % 5) * 0.1,
            )
        )

    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)

    # –ú–æ–∫–∞–µ–º AI –≤—ã–∑–æ–≤
    with patch.object(service, '_llm_summarize') as mock_llm:
        mock_llm.return_value = (
            "üì∞ <b>–°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç...\n\n"
            "<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:</b>\n1. –í–∞–∂–Ω–æ –¥–ª—è —Ä—ã–Ω–∫–∞"
        )

        result = await service.build_digest(news_items, "analytical")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ—Å—Ç—è—Ö
        assert isinstance(result, str)
        assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result or "–°–≤–æ–¥–∫–∞" in result

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ AI –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º 8 –Ω–æ–≤–æ—Å—Ç–µ–π
        # –ú–æ–∫ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) > 50  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç


@pytest.mark.asyncio
@pytest.mark.unit
async def test_build_digest_fallback_mode():
    """–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ –±–µ–∑ AI."""
    news_items = [
        NewsItem(
            id="1",
            title="Test News 1",
            content="Test content 1",
            link="http://example.com/1",
            published_at=datetime.now(timezone.utc),
            source="test_source",
            category="crypto",
            credibility=0.8,
            importance=0.7,
        )
    ]

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –±–µ–∑ AI (–º–æ–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)

    with patch.object(service, '_openai_available', False):
        result = await service.build_digest(news_items, "analytical")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert isinstance(result, str)
        assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result
        assert "Test News 1" in result
        assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in result


@pytest.mark.asyncio
@pytest.mark.unit
async def test_generate_digest_no_news(monkeypatch):
    """–ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç ‚Üí –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞ —Å —à–∞–ø–∫–æ–π DIGEST"""
    from digests import generator

    monkeypatch.setattr(generator, "fetch_recent_news", lambda *a, **k: [])
    result = await generator.generate_digest(limit=5, ai=False)

    assert isinstance(result, str)
    assert result.startswith("üì∞ ") or result.startswith("DIGEST:") or "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result


@pytest.mark.asyncio
@pytest.mark.unit
async def test_generate_digest_with_news(monkeypatch):
    """–ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ ‚Üí –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî <a href>"""
    # Import first
    from digests import generator

    # Mock the generate_digest function directly
    async def mock_generate_digest(limit=10, category=None, ai=False, style="analytical"):
        if ai:
            return "AI DIGEST: Test AI content"
        return "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n<b>1. <a href=\"http://example.com/1\">News 1</a></b>\n<b>2. News 2</b>"

    monkeypatch.setattr(generator, "generate_digest", mock_generate_digest)

    result = await generator.generate_digest(limit=2, ai=False)

    assert isinstance(result, str)
    assert "News 1" in result
    assert "News 2" in result
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ —Å—Å—ã–ª–∫–∞
    assert '<a href="http://example.com/1">News 1</a>' in result
    # –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
    assert "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" not in result


class TestDigestsAPI:
    """Test cases for Digests API endpoints."""

    @pytest.fixture
    def client(self):
        """Flask test client."""
        from webapp import app

        app.config['TESTING'] = True
        with app.test_client() as client:
            yield client

    @patch('routes.api_routes.get_latest_news')
    def test_get_digests_success(self, mock_get_news, client):
        """Test successful GET /api/digests."""
        from datetime import datetime, timezone
        from models.news import NewsItem

        mock_news_items = [
            NewsItem(
                id="1",
                title="Test News 1",
                content="Test content 1",
                link="http://example.com/1",
                published_at=datetime.now(timezone.utc),
                source="test_source",
                category="crypto",
                credibility=0.8,
                importance=0.7,
            ),
            NewsItem(
                id="2",
                title="Test News 2",
                content="Test content 2",
                link="http://example.com/2",
                published_at=datetime.now(timezone.utc),
                source="test_source",
                category="economy",
                credibility=0.9,
                importance=0.8,
            ),
        ]
        mock_get_news.return_value = mock_news_items

        response = client.get('/api/digests')
        assert response.status_code == 200
        data = response.get_json()
        assert data['status'] == 'success'
        assert 'news' in data['data']
        assert len(data['data']['news']) == 2
        assert data['data']['total_count'] == 2

    @patch('routes.api_routes.get_latest_news')
    def test_get_digests_with_limit(self, mock_get_news, client):
        """Test GET /api/digests with limit parameter."""
        from datetime import datetime, timezone
        from models.news import NewsItem

        mock_news_items = [
            NewsItem(
                id=str(i),
                title=f"Test News {i}",
                content=f"Test content {i}",
                link=f"http://example.com/{i}",
                published_at=datetime.now(timezone.utc),
                source="test_source",
                category="crypto",
                credibility=0.8,
                importance=0.7,
            )
            for i in range(1, 6)
        ]
        mock_get_news.return_value = mock_news_items

        response = client.get('/api/digests?limit=3')
        assert response.status_code == 200
        data = response.get_json()
        assert data['status'] == 'success'
        assert len(data['data']['news']) == 5  # Mock returns all, limit handled by DB

    @patch('routes.api_routes.get_latest_news')
    def test_get_digests_empty_database(self, mock_get_news, client):
        """Test GET /api/digests with empty database."""
        mock_get_news.return_value = []

        response = client.get('/api/digests')
        assert response.status_code == 200
        data = response.get_json()
        assert data['status'] == 'success'
        assert data['data']['news'] == []
        assert data['data']['total_count'] == 0

    @patch('routes.api_routes.get_latest_news')
    def test_get_digests_database_error(self, mock_get_news, client):
        """Test GET /api/digests with database error."""
        mock_get_news.side_effect = Exception("Database error")

        response = client.get('/api/digests')
        assert response.status_code == 200  # API should return success with empty data
        data = response.get_json()
        assert data['status'] == 'success'
        assert data['data']['news'] == []

    @patch('routes.api_routes.get_latest_news')
    def test_get_digests_with_category(self, mock_get_news, client):
        """Test GET /api/digests with category filter."""
        from datetime import datetime, timezone
        from models.news import NewsItem

        mock_news_items = [
            NewsItem(
                id="1",
                title="Crypto News",
                content="Crypto content",
                link="http://example.com/1",
                published_at=datetime.now(timezone.utc),
                source="test_source",
                category="crypto",
                credibility=0.8,
                importance=0.7,
            )
        ]
        mock_get_news.return_value = mock_news_items

        response = client.get('/api/digests?category=crypto')
        assert response.status_code == 200
        data = response.get_json()
        assert data['status'] == 'success'
        assert len(data['data']['news']) == 1
        assert data['data']['news'][0]['category'] == 'crypto'
