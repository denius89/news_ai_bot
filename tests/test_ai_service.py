"""
–¢–µ—Å—Ç—ã –¥–ª—è DigestAIService.
"""

import pytest
from datetime import datetime, timezone
from unittest.mock import patch, MagicMock

from models.news import NewsItem
from digests.ai_service import DigestAIService, DigestConfig


@pytest.mark.asyncio
@pytest.mark.unit
async def test_llm_not_configured_fallback():
    """–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ –∫–æ–≥–¥–∞ OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    news_items = [
        NewsItem(
            id="1",
            title="Test News 1",
            content="Test content 1",
            link="http://example.com/1",
            published_at=datetime.now(timezone.utc),
            source="test_source",
            category="crypto",
            credibility=0.8,
            importance=0.7
        ),
        NewsItem(
            id="2",
            title="Test News 2", 
            content="Test content 2",
            link="http://example.com/2",
            published_at=datetime.now(timezone.utc),
            source="test_source",
            category="economy",
            credibility=0.9,
            importance=0.8
        )
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –º–æ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ OpenAI
    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)
    
    # –ú–æ–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI
    with patch.object(service, '_openai_available', False):
        result = await service.build_digest(news_items, "analytical")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert isinstance(result, str)
        assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result
        assert "Test News 1" in result
        assert "Test News 2" in result
        assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in result


@pytest.mark.asyncio
@pytest.mark.unit
async def test_handles_bad_dates():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –±–µ–∑ –¥–∞—Ç –∏–ª–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏."""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –¥–∞—Ç –∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    news_items = [
        NewsItem(
            id="1",
            title="News without date",
            content="Test content 1",
            link="http://example.com/1",
            published_at=None,  # –ù–µ—Ç –¥–∞—Ç—ã
            source="test_source",
            category="crypto",
            credibility=0.8,
            importance=0.7
        ),
        NewsItem(
            id="2",
            title="News with bad date",
            content="Test content 2", 
            link="http://example.com/2",
            published_at=datetime.now(timezone.utc),  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            source="test_source",
            category="economy",
            credibility=0.9,
            importance=0.8
        )
    ]
    
    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)
    
    # –ú–æ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ OpenAI –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
    with patch.object(service, '_openai_available', False):
        result = await service.build_digest(news_items, "analytical")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ digest —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞—Ç
        assert isinstance(result, str)
        assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result
        assert "News without date" in result
        assert "News with bad date" in result
        assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in result


@pytest.mark.asyncio
@pytest.mark.unit
async def test_ai_summarization_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π AI —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."""
    news_items = [
        NewsItem(
            id="1",
            title="Bitcoin Price Surge",
            content="Bitcoin reached new all-time high",
            link="http://example.com/1",
            published_at=datetime.now(timezone.utc),
            source="coindesk",
            category="crypto",
            credibility=0.9,
            importance=0.8
        )
    ]
    
    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)
    
    # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π AI –≤—ã–∑–æ–≤
    with patch.object(service, '_openai_available', True):
        with patch.object(service, '_llm_summarize') as mock_llm:
            mock_llm.return_value = "üì∞ <b>–°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\nBitcoin –ø–æ–∫–∞–∑–∞–ª —Ä–æ—Å—Ç...\n\n<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:</b>\n1. –í–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫"
            
            result = await service.build_digest(news_items, "analytical")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert isinstance(result, str)
            assert "–°–≤–æ–¥–∫–∞" in result
            assert "Bitcoin" in result
            assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI –±—ã–ª –≤—ã–∑–≤–∞–Ω
            mock_llm.assert_called_once()


@pytest.mark.asyncio
@pytest.mark.unit
async def test_ai_summarization_failure_fallback():
    """–¢–µ—Å—Ç fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ AI —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."""
    news_items = [
        NewsItem(
            id="1",
            title="Test News",
            content="Test content",
            link="http://example.com/1",
            published_at=datetime.now(timezone.utc),
            source="test_source",
            category="crypto",
            credibility=0.8,
            importance=0.7
        )
    ]
    
    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)
    
    # –ú–æ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI, –Ω–æ –æ—à–∏–±–∫—É –≤ AI –≤—ã–∑–æ–≤–µ
    with patch.object(service, '_openai_available', True):
        with patch.object(service, '_llm_summarize') as mock_llm:
            mock_llm.side_effect = Exception("AI API Error")
            
            result = await service.build_digest(news_items, "analytical")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert isinstance(result, str)
            assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result
            assert "Test News" in result
            assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in result


@pytest.mark.asyncio
@pytest.mark.unit
async def test_empty_news_list():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    news_items = []
    
    config = DigestConfig(max_items=8, include_fallback=True)
    service = DigestAIService(config)
    
    result = await service.build_digest(news_items, "analytical")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    assert isinstance(result, str)
    assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result
    assert "–Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç" in result


@pytest.mark.asyncio
@pytest.mark.unit
async def test_max_items_limit():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    # –°–æ–∑–¥–∞–µ–º 15 –Ω–æ–≤–æ—Å—Ç–µ–π
    news_items = []
    for i in range(15):
        news_items.append(
            NewsItem(
                id=str(i),
                title=f"News {i}",
                content=f"Content {i}",
                link=f"http://example.com/{i}",
                published_at=datetime.now(timezone.utc),
                source="test_source",
                category="crypto",
                credibility=0.5,
                importance=0.5
            )
        )
    
    config = DigestConfig(max_items=5, include_fallback=True)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5
    service = DigestAIService(config)
    
    # –ú–æ–∫–∞–µ–º AI –≤—ã–∑–æ–≤
    with patch.object(service, '_openai_available', True):
        with patch.object(service, '_llm_summarize') as mock_llm:
            mock_llm.return_value = "üì∞ <b>–°–≤–æ–¥–∫–∞</b>\n\nTest content"
            
            result = await service.build_digest(news_items, "analytical")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ AI –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
            mock_llm.assert_called_once()
            call_args = mock_llm.call_args[0]
            passed_news = call_args[0]
            assert len(passed_news) == 5  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 5 –Ω–æ–≤–æ—Å—Ç—è–º–∏


@pytest.mark.unit
def test_digest_config_defaults():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    config = DigestConfig()
    
    assert config.max_items == 8
    assert config.include_fallback is True
    assert config.style == "analytical"


@pytest.mark.unit
def test_digest_config_custom():
    """–¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    config = DigestConfig(max_items=10, include_fallback=False, style="business")
    
    assert config.max_items == 10
    assert config.include_fallback is False
    assert config.style == "business"
