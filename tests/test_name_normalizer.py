"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram.

–ü–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ edge cases: emoji-only –∏–º–µ–Ω–∞, RTL —Ç–µ–∫—Å—Ç, –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã,
–¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞, –∫–∏—Ç–∞–π—Å–∫–∏–µ/—è–ø–æ–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ Unicode.
"""

import pytest
from utils.text.name_normalizer import (
    normalize_user_name,
    is_safe_name,
    get_name_display_variant,
    _fix_corrupted_encoding,
    _remove_invisible_chars,
    _convert_styled_unicode,
    _is_emoji_only,
    _truncate_preserving_words,
)


class TestNameNormalizer:
    """–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º—ë–Ω."""

    def test_normalize_basic_name(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏."""
        result = normalize_user_name("John Doe", "johndoe", 12345)
        assert result == "John Doe"

    def test_normalize_empty_name(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏."""
        result = normalize_user_name("", "johndoe", 12345)
        assert result == "@johndoe"

        result = normalize_user_name(None, "johndoe", 12345)
        assert result == "@johndoe"

    def test_normalize_no_username(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ username."""
        result = normalize_user_name("", None, 12345)
        assert result == "User #12345"

    def test_normalize_emoji_only(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ emoji-only –∏–º—ë–Ω."""
        result = normalize_user_name("üî•üî•üî•", "fireuser", 12345)
        assert result == "@fireuser"

        result = normalize_user_name("üî•üî•üî•", None, 12345)
        assert result == "User #12345"

        result = normalize_user_name("üòÄüòÅüòÇ", None, 12345)
        assert result == "User #12345"

    def test_normalize_invisible_chars(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        result = normalize_user_name("John\u200bDoe", "johndoe", 12345)
        assert result == "JohnDoe"

        result = normalize_user_name("John\u202aDoe\u202c", "johndoe", 12345)
        assert result == "JohnDoe"

    def test_normalize_styled_unicode(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤."""
        result = normalize_user_name("ùïÄùïßùïíùïü", "ivan", 12345)
        assert result == "Ivan"

        result = normalize_user_name("ùî∏ùïùùïñùï©", "alex", 12345)
        assert result == "Alex"

    def test_normalize_corrupted_encoding(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ—Ä—á–µ–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏."""
        result = normalize_user_name("√ê√ê¬∞√ê¬Ω", "ivan", 12345)
        assert result == "–ò–≤–∞–Ω"

        result = normalize_user_name("√ê√ê¬∞√ë√ê¬∞", "masha", 12345)
        assert result == "–ú–∞—à–∞"

    def test_normalize_long_name(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª–∏–Ω–Ω—ã—Ö –∏–º—ë–Ω."""
        long_name = "A" * 100
        result = normalize_user_name(long_name, "longuser", 12345)
        assert len(result) <= 64
        assert result.endswith("A")  # –î–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–ª–æ–≤

    def test_normalize_rtl_text(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ RTL —Ç–µ–∫—Å—Ç–∞."""
        result = normalize_user_name("ŸÖÿ±ÿ≠ÿ®ÿß", "arabic", 12345)
        assert result == "ŸÖÿ±ÿ≠ÿ®ÿß"  # RTL —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è

    def test_normalize_chinese_japanese(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        result = normalize_user_name("Âº†‰∏â", "chinese", 12345)
        assert result == "Âº†‰∏â"

        result = normalize_user_name("Áî∞‰∏≠", "japanese", 12345)
        assert result == "Áî∞‰∏≠"

    def test_normalize_mixed_content(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        result = normalize_user_name("Johnüî•Doe", "johndoe", 12345)
        assert result == "Johnüî•Doe"  # –≠–º–æ–¥–∑–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è

    def test_normalize_whitespace(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–±–µ–ª–æ–≤."""
        result = normalize_user_name("  John   Doe  ", "johndoe", 12345)
        assert result == "John Doe"  # –õ–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã


class TestHelperFunctions:
    """–¢–µ—Å—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    def test_fix_corrupted_encoding(self):
        """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ—Ä—á–µ–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏."""
        assert _fix_corrupted_encoding("√ê√ê¬∞√ê¬Ω") == "–ò–≤–∞–Ω"
        assert _fix_corrupted_encoding("√ê√ê¬∞√ë√ê¬∞") == "–ú–∞—à–∞"
        assert _fix_corrupted_encoding("Normal") == "Normal"

    def test_remove_invisible_chars(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        assert _remove_invisible_chars("John\u200bDoe") == "JohnDoe"
        assert _remove_invisible_chars("John\u202aDoe\u202c") == "JohnDoe"
        assert _remove_invisible_chars("Normal") == "Normal"

    def test_convert_styled_unicode(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö Unicode."""
        assert _convert_styled_unicode("ùïÄùïßùïíùïü") == "Ivan"
        assert _convert_styled_unicode("ùî∏ùïùùïñùï©") == "Alex"
        assert _convert_styled_unicode("Normal") == "Normal"

    def test_is_emoji_only(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ emoji-only –∏–º—ë–Ω."""
        assert _is_emoji_only("üî•üî•üî•") == True
        assert _is_emoji_only("üòÄüòÅüòÇ") == True
        assert _is_emoji_only("John") == False
        assert _is_emoji_only("Johnüî•") == False
        assert _is_emoji_only("") == True
        assert _is_emoji_only("   ") == True

    def test_truncate_preserving_words(self):
        """–¢–µ—Å—Ç –æ–±—Ä–µ–∑–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–ª–æ–≤."""
        text = "This is a very long text that should be truncated"
        result = _truncate_preserving_words(text, 20)
        assert len(result) <= 20
        assert not result.endswith(" ")  # –ù–µ –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª–æ–º

        # –¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        short_text = "Short"
        result = _truncate_preserving_words(short_text, 20)
        assert result == short_text


class TestUtilityFunctions:
    """–¢–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    def test_is_safe_name(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏."""
        assert is_safe_name("John Doe") == True
        assert is_safe_name("üî•üî•üî•") == False
        assert is_safe_name("") == False
        assert is_safe_name("ùïÄùïßùïíùïü") == True  # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è

    def test_get_name_display_variant(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏."""
        assert get_name_display_variant("John Doe") == "John Doe"
        assert get_name_display_variant("üî•üî•üî•") == "User #0"
        assert get_name_display_variant("", "johndoe", 12345) == "@johndoe"


class TestEdgeCases:
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""

    def test_unicode_normalization(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Unicode."""
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ Unicode
        result = normalize_user_name("caf√©", "cafe", 12345)
        assert result == "caf√©"  # –î–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ü–µ–Ω—Ç—ã

        result = normalize_user_name("na√Øve", "naive", 12345)
        assert result == "na√Øve"  # –î–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–º–ª—è—É—Ç—ã

    def test_control_characters(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        result = normalize_user_name("John\x00Doe", "johndoe", 12345)
        assert "\x00" not in result  # Null —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã

    def test_very_long_emoji(self):
        """–¢–µ—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö emoji-only –∏–º—ë–Ω."""
        long_emoji = "üî•" * 100
        result = normalize_user_name(long_emoji, None, 12345)
        assert result == "User #12345"

    def test_mixed_scripts(self):
        """–¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤."""
        result = normalize_user_name("JohnÁî∞‰∏≠", "mixed", 12345)
        assert result == "JohnÁî∞‰∏≠"  # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è

    def test_special_characters(self):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        result = normalize_user_name("John-Doe", "johndoe", 12345)
        assert result == "John-Doe"  # –î–µ—Ñ–∏—Å—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è

        result = normalize_user_name("John_Doe", "johndoe", 12345)
        assert result == "John_Doe"  # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è


class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    def test_large_input_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –±–æ–ª—å—à–∏–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        large_name = "A" * 10000
        result = normalize_user_name(large_name, "largeuser", 12345)
        assert len(result) <= 64
        assert result != "User #12345"  # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback

    def test_many_unicode_chars(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º Unicode —Å–∏–º–≤–æ–ª–æ–≤."""
        unicode_name = "ùïÄùïßùïíùïü" * 1000
        result = normalize_user_name(unicode_name, "unicodeuser", 12345)
        assert len(result) <= 64
        assert "Ivan" in result  # –î–æ–ª–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
