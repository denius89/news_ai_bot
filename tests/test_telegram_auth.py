"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram WebApp.

–ü–æ–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫, –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
–∏ –≤—Å–µ edge cases –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""

import hashlib
import hmac
import json
import pytest
import time
from unittest.mock import patch
from utils.auth.telegram_auth import (
    verify_telegram_webapp_data,
    extract_user_from_verified_data,
    is_telegram_webapp_request,
    validate_telegram_auth_headers,
    get_telegram_user_id_from_headers,
    create_fallback_user_data,
    log_auth_attempt,
)


class TestTelegramAuthVerification:
    """–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""

    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        self.bot_token = "123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        self.user_data = {
            "id": 12345,
            "first_name": "John",
            "last_name": "Doe",
            "username": "johndoe",
            "language_code": "en",
            "is_premium": False,
        }

    def _create_valid_init_data(self, **kwargs) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ initData –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = {"user": json.dumps(self.user_data), "auth_date": str(int(time.time())), "query_id": "test_query_id"}

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        data.update(kwargs)

        # –°–æ–∑–¥–∞–µ–º data_check_string
        data_check_arr = [f"{k}={v}" for k, v in sorted(data.items())]
        data_check_string = "\n".join(data_check_arr)

        # –í—ã—á–∏—Å–ª—è–µ–º hash
        secret_key = hashlib.sha256(self.bot_token.encode()).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

        # –î–æ–±–∞–≤–ª—è–µ–º hash –∫ –¥–∞–Ω–Ω—ã–º
        data["hash"] = calculated_hash

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ query string
        return "&".join([f"{k}={v}" for k, v in data.items()])

    def test_valid_signature(self):
        """–¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é."""
        init_data = self._create_valid_init_data()
        result = verify_telegram_webapp_data(init_data, self.bot_token)

        assert result is not None
        assert result["user"]["id"] == 12345
        assert result["user"]["first_name"] == "John"

    def test_invalid_signature(self):
        """–¢–µ—Å—Ç —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º hash."""
        init_data = self._create_valid_init_data()
        # –ó–∞–º–µ–Ω—è–µ–º hash –Ω–∞ –ø–æ–¥–¥–µ–ª—å–Ω—ã–π
        init_data = init_data.replace("hash=", "hash=fake_hash")

        result = verify_telegram_webapp_data(init_data, self.bot_token)
        assert result is None

    def test_expired_auth_date(self):
        """–¢–µ—Å—Ç —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º auth_date."""
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å auth_date 25 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        expired_time = int(time.time()) - 25 * 3600
        init_data = self._create_valid_init_data(auth_date=str(expired_time))

        result = verify_telegram_webapp_data(init_data, self.bot_token)
        assert result is None

    def test_missing_hash(self):
        """–¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º hash."""
        init_data = self._create_valid_init_data()
        # –£–¥–∞–ª—è–µ–º hash
        init_data = init_data.replace("&hash=", "")

        result = verify_telegram_webapp_data(init_data, self.bot_token)
        assert result is None

    def test_missing_user_data(self):
        """–¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        init_data = self._create_valid_init_data()
        # –£–¥–∞–ª—è–µ–º user –¥–∞–Ω–Ω—ã–µ
        init_data = init_data.replace("user=", "")

        result = verify_telegram_webapp_data(init_data, self.bot_token)
        assert result is None

    def test_invalid_user_json(self):
        """–¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON –≤ user –¥–∞–Ω–Ω—ã—Ö."""
        init_data = self._create_valid_init_data()
        # –ó–∞–º–µ–Ω—è–µ–º user –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
        init_data = init_data.replace("user=", "user=invalid_json")

        result = verify_telegram_webapp_data(init_data, self.bot_token)
        assert result is None

    def test_missing_user_id(self):
        """–¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_data = self.user_data.copy()
        del user_data["id"]

        init_data = self._create_valid_init_data(user=json.dumps(user_data))
        result = verify_telegram_webapp_data(init_data, self.bot_token)
        assert result is None

    def test_empty_init_data(self):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        result = verify_telegram_webapp_data("", self.bot_token)
        assert result is None

        result = verify_telegram_webapp_data(None, self.bot_token)
        assert result is None

    def test_empty_bot_token(self):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞."""
        init_data = self._create_valid_init_data()
        result = verify_telegram_webapp_data(init_data, "")
        assert result is None

        result = verify_telegram_webapp_data(init_data, None)
        assert result is None

    def test_emoji_name_in_auth(self):
        """–¢–µ—Å—Ç —Å emoji –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_data = self.user_data.copy()
        user_data["first_name"] = "üî•Johnüî•"

        init_data = self._create_valid_init_data(user=json.dumps(user_data))
        result = verify_telegram_webapp_data(init_data, self.bot_token)

        assert result is not None
        assert result["user"]["first_name"] == "üî•Johnüî•"

    def test_unicode_name_in_auth(self):
        """–¢–µ—Å—Ç —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –∏–º–µ–Ω–∏."""
        user_data = self.user_data.copy()
        user_data["first_name"] = "–ò–≤–∞–Ω"

        init_data = self._create_valid_init_data(user=json.dumps(user_data))
        result = verify_telegram_webapp_data(init_data, self.bot_token)

        assert result is not None
        assert result["user"]["first_name"] == "–ò–≤–∞–Ω"

    def test_premium_user(self):
        """–¢–µ—Å—Ç —Å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        user_data = self.user_data.copy()
        user_data["is_premium"] = True

        init_data = self._create_valid_init_data(user=json.dumps(user_data))
        result = verify_telegram_webapp_data(init_data, self.bot_token)

        assert result is not None
        assert result["user"]["is_premium"] == True


class TestHelperFunctions:
    """–¢–µ—Å—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    def test_extract_user_from_verified_data(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        verified_data = {
            "user": {
                "id": 12345,
                "first_name": "John",
                "last_name": "Doe",
                "username": "johndoe",
                "language_code": "en",
                "is_premium": True,
                "photo_url": "https://example.com/photo.jpg",
                "allows_write_to_pm": True,
            },
            "auth_date": "1234567890",
            "query_id": "test_query",
        }

        user_data = extract_user_from_verified_data(verified_data)

        assert user_data is not None
        assert user_data["id"] == 12345
        assert user_data["first_name"] == "John"
        assert user_data["last_name"] == "Doe"
        assert user_data["username"] == "johndoe"
        assert user_data["language_code"] == "en"
        assert user_data["is_premium"] == True
        assert user_data["photo_url"] == "https://example.com/photo.jpg"
        assert user_data["allows_write_to_pm"] == True

    def test_extract_user_from_empty_data(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        assert extract_user_from_verified_data(None) is None
        assert extract_user_from_verified_data({}) is None
        assert extract_user_from_verified_data({"other": "data"}) is None

    def test_is_telegram_webapp_request(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Telegram WebApp –∑–∞–ø—Ä–æ—Å–∞."""
        # –¢–µ—Å—Ç —Å initData
        headers = {"X-Telegram-Init-Data": "test_data"}
        assert is_telegram_webapp_request(headers) == True

        # –¢–µ—Å—Ç —Å User-Agent
        headers = {"User-Agent": "TelegramBot/1.0"}
        assert is_telegram_webapp_request(headers) == True

        # –¢–µ—Å—Ç —Å Referer
        headers = {"Referer": "https://web.telegram.org/"}
        assert is_telegram_webapp_request(headers) == True

        # –¢–µ—Å—Ç –±–µ–∑ Telegram –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = {"User-Agent": "Mozilla/5.0"}
        assert is_telegram_webapp_request(headers) == False

    def test_validate_telegram_auth_headers(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        # –í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å initData
        headers = {"X-Telegram-Init-Data": "user=%7B%22id%22%3A12345%7D&hash=test_hash"}
        assert validate_telegram_auth_headers(headers) == True

        # –í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å user data
        headers = {"X-Telegram-User-Data": '{"id": 12345, "first_name": "John"}'}
        assert validate_telegram_auth_headers(headers) == True

        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {}
        assert validate_telegram_auth_headers(headers) == False

        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π initData
        headers = {"X-Telegram-Init-Data": "invalid_data"}
        assert validate_telegram_auth_headers(headers) == False

        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π user data
        headers = {"X-Telegram-User-Data": "invalid_json"}
        assert validate_telegram_auth_headers(headers) == False

    def test_get_telegram_user_id_from_headers(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user ID –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤."""
        # –¢–µ—Å—Ç —Å initData
        headers = {"X-Telegram-Init-Data": "user=%7B%22id%22%3A12345%7D&hash=test_hash"}
        user_id = get_telegram_user_id_from_headers(headers)
        assert user_id == 12345

        # –¢–µ—Å—Ç —Å user data
        headers = {"X-Telegram-User-Data": '{"id": 67890, "first_name": "Jane"}'}
        user_id = get_telegram_user_id_from_headers(headers)
        assert user_id == 67890

        # –¢–µ—Å—Ç –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        headers = {}
        user_id = get_telegram_user_id_from_headers(headers)
        assert user_id is None

    def test_create_fallback_user_data(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è fallback –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_data = create_fallback_user_data(12345)

        assert user_data["id"] == 12345
        assert user_data["first_name"] is None
        assert user_data["last_name"] is None
        assert user_data["username"] is None
        assert user_data["language_code"] == "ru"
        assert user_data["is_premium"] == False
        assert user_data["photo_url"] is None
        assert user_data["allows_write_to_pm"] == False


class TestEdgeCases:
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""

    def test_malformed_query_string(self):
        """–¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º query string."""
        init_data = "invalid_query_string"
        result = verify_telegram_webapp_data(init_data, "bot_token")
        assert result is None

    def test_very_long_init_data(self):
        """–¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
        long_name = "A" * 10000
        user_data = {"id": 12345, "first_name": long_name}

        init_data = f"user={json.dumps(user_data)}&auth_date={int(time.time())}&hash=test_hash"
        result = verify_telegram_webapp_data(init_data, "bot_token")
        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫, –Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ hash
        assert result is None

    def test_special_characters_in_data(self):
        """–¢–µ—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö."""
        user_data = {"id": 12345, "first_name": "John & Jane", "username": "user@domain.com"}

        init_data = f"user={json.dumps(user_data)}&auth_date={int(time.time())}&hash=test_hash"
        result = verify_telegram_webapp_data(init_data, "bot_token")
        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫, –Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ hash
        assert result is None

    def test_numeric_user_id(self):
        """–¢–µ—Å—Ç —Å —á–∏—Å–ª–æ–≤—ã–º user ID."""
        user_data = {"id": "12345", "first_name": "John"}  # ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞

        init_data = f"user={json.dumps(user_data)}&auth_date={int(time.time())}&hash=test_hash"
        result = verify_telegram_webapp_data(init_data, "bot_token")
        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫, –Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ hash
        assert result is None


class TestSecurity:
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""

    def test_timing_attack_resistance(self):
        """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ timing –∞—Ç–∞–∫–∞–º."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º hmac.compare_digest –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        init_data = "user=%7B%22id%22%3A12345%7D&hash=wrong_hash"

        start_time = time.time()
        result = verify_telegram_webapp_data(init_data, "bot_token")
        end_time = time.time()

        assert result is None
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö hash
        assert end_time - start_time < 1.0  # –ù–µ –±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã

    def test_hash_collision_resistance(self):
        """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –∫–æ–ª–ª–∏–∑–∏—è–º hash."""
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º hash
        data1 = "user=%7B%22id%22%3A12345%7D&auth_date=1234567890"
        data2 = "user=%7B%22id%22%3A67890%7D&auth_date=1234567890"

        # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ HMAC
        result1 = verify_telegram_webapp_data(data1 + "&hash=fake_hash", "bot_token")
        result2 = verify_telegram_webapp_data(data2 + "&hash=fake_hash", "bot_token")

        assert result1 is None
        assert result2 is None


class TestLogging:
    """–¢–µ—Å—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

    @patch("utils.auth.telegram_auth.logger")
    def test_log_auth_attempt_success(self, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        log_auth_attempt(12345, True, "initData")

        mock_logger.info.assert_called_once()
        call_args = mock_logger.info.call_args[0][0]
        assert "success" in call_args
        assert "12345" in call_args
        assert "initData" in call_args

    @patch("utils.auth.telegram_auth.logger")
    def test_log_auth_attempt_failure(self, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        log_auth_attempt(12345, False, "initData", "Invalid hash")

        mock_logger.warning.assert_called_once()
        call_args = mock_logger.warning.call_args[0][0]
        assert "failed" in call_args
        assert "12345" in call_args
        assert "initData" in call_args
        assert "Invalid hash" in call_args


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
