import os
import pytest

from digests.ai_summary import (
    generate_summary_why_important_json,
    generate_summary_why_important,
    generate_batch_summary,
)

# ‚úÖ –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
pytestmark = pytest.mark.integration


def test_generate_summary_why_important_json_smoke():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: JSON-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""

    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        pytest.skip("‚ùå –ù–µ—Ç OPENAI_API_KEY –≤ .env")

    item = {
        "title": "–§–†–° —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Å—Ç–∞–≤–∫—É",
        "content": (
            "–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –°–®–ê —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, "
            "–Ω–æ –Ω–∞–º–µ–∫–Ω—É–ª–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ."
        ),
        "source": "economy",
    }

    result = generate_summary_why_important_json(item, max_tokens=120)

    assert isinstance(result, dict)
    assert "summary" in result
    assert "why_important" in result
    assert isinstance(result["why_important"], list)

    print("‚úÖ JSON-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:", result)


def test_generate_summary_why_important_smoke():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è Telegram"""

    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        pytest.skip("‚ùå –ù–µ—Ç OPENAI_API_KEY –≤ .env")

    item = {
        "title": "–ë–∏—Ç–∫–æ–∏–Ω —Ä–∞—Å—Ç–µ—Ç",
        "content": "–¶–µ–Ω–∞ BTC –¥–æ—Å—Ç–∏–≥–ª–∞ 70,000$",
        "source": "crypto",
    }

    text = generate_summary_why_important(item, max_tokens=120)

    assert isinstance(text, str)
    assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in text

    print("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ '–ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:", text[:120], "...")


def test_generate_batch_summary_smoke():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""

    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        pytest.skip("‚ùå –ù–µ—Ç OPENAI_API_KEY –≤ .env")

    data = [
        {
            "title": "–ë–∏—Ç–∫–æ–∏–Ω —Ä–∞—Å—Ç–µ—Ç",
            "content": "–¶–µ–Ω–∞ BTC –¥–æ—Å—Ç–∏–≥–ª–∞ 70,000$",
            "source": "crypto",
        },
        {
            "title": "–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –°–®–ê —Å–Ω–∏–∂–∞–µ—Ç—Å—è",
            "content": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞–ª–∏ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏",
            "source": "economy",
        },
    ]

    summary = generate_batch_summary(data, max_tokens=300, style="analytical")

    assert isinstance(summary, str)
    assert len(summary) > 20
    assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in summary

    print("‚úÖ Batch-–¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:", summary[:120], "...")


def test_generate_summary_why_important_json_structure():
    """Unit test: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON –æ—Ç–≤–µ—Ç–∞"""
    item = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å",
        "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
        "source": "test",
    }

    # –ú–æ–∫–∞–µ–º –≤—ã–∑–æ–≤ OpenAI, —á—Ç–æ–±—ã —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ API –∫–ª—é—á–∞
    with pytest.Mock() as mock_openai:
        mock_openai.return_value = {
            "choices": [
                {
                    "message": {
                        "content": '{"title": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å", "why_important": ["–í–∞–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É"]}'
                    }
                }
            ]
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º patch –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        with pytest.patch('digests.ai_summary.openai_client') as mock_client:
            mock_client.chat.completions.create.return_value = mock_openai.return_value

            result = generate_summary_why_important_json(item, max_tokens=120)

            assert isinstance(result, dict)
            assert "title" in result
            assert "why_important" in result
            assert isinstance(result["why_important"], list)
            assert len(result["why_important"]) > 0


def test_generate_summary_why_important_fallback():
    """Unit test: –ø—Ä–æ–≤–µ—Ä–∫–∞ fallback –±–ª–æ–∫–∞ '–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ'"""
    item = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å",
        "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
        "source": "test",
    }

    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É OpenAI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback
    with pytest.patch('digests.ai_summary.openai_client') as mock_client:
        mock_client.chat.completions.create.side_effect = Exception("API Error")

        result = generate_summary_why_important(item, max_tokens=120)

        assert isinstance(result, str)
        assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in result
        assert "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å" in result


def test_generate_summary_why_important_json_with_keys():
    """Unit test: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏"""
    item = {
        "title": "Bitcoin Price Surge",
        "content": "Bitcoin reached new all-time high",
        "source": "crypto",
    }

    expected_keys = {"title", "why_important"}

    # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç OpenAI
    with pytest.patch('digests.ai_summary.openai_client') as mock_client:
        mock_response = {
            "choices": [
                {
                    "message": {
                        "content": '{"title": "Bitcoin Price Surge", "why_important": ["Market impact", "Investment implications"]}'
                    }
                }
            ]
        }
        mock_client.chat.completions.create.return_value = mock_response

        result = generate_summary_why_important_json(item, max_tokens=120)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        assert set(result.keys()) == expected_keys
        assert result["title"] == "Bitcoin Price Surge"
        assert isinstance(result["why_important"], list)
        assert len(result["why_important"]) == 2


def test_generate_batch_summary_structure():
    """Unit test: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã batch summary"""
    data = [
        {
            "title": "News 1",
            "content": "Content 1",
            "source": "test",
        },
        {
            "title": "News 2",
            "content": "Content 2",
            "source": "test",
        },
    ]

    # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    with pytest.patch('digests.ai_summary.openai_client') as mock_client:
        mock_response = {
            "choices": [
                {
                    "message": {
                        "content": "üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n1. News 1\n2. News 2\n\n<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:</b>\n1. –í–∞–∂–Ω–æ –¥–ª—è —Ä—ã–Ω–∫–∞\n2. –í–ª–∏—è–µ—Ç –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
                    }
                }
            ]
        }
        mock_client.chat.completions.create.return_value = mock_response

        result = generate_batch_summary(data, max_tokens=300, style="analytical")

        assert isinstance(result, str)
        assert "–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in result or "News 1" in result
        assert "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ" in result
        assert len(result) > 50


def test_generate_summary_with_empty_data():
    """Unit test: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    empty_data = []

    with pytest.patch('digests.ai_summary.openai_client') as mock_client:
        mock_client.chat.completions.create.side_effect = Exception("Empty data error")

        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å fallback –¥–∞–∂–µ –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        result = generate_batch_summary(empty_data, max_tokens=100)

        assert isinstance(result, str)
        assert len(result) > 0  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–∫–æ–π-—Ç–æ fallback —Ç–µ–∫—Å—Ç
