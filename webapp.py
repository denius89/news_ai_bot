import logging
from flask import Flask, render_template

from config.settings import VERSION, DEBUG, WEBAPP_PORT, WEBAPP_HOST, REACTOR_ENABLED
from routes.news_routes import news_bp
from routes.webapp_routes import webapp_bp
from routes.api_routes import api_bp
# WebSocket routes removed - using FastAPI now
# from routes.ws_routes import ws_bp, init_socketio
from routes.metrics_routes import metrics_bp
from utils.logging_setup import setup_logging

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
setup_logging()
logger = logging.getLogger("news_ai_bot")

app = Flask(__name__)
app.config["VERSION"] = VERSION


# üî• –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏
def importance_icon(value: float) -> str:
    if value is None:
        return "‚ùî"
    if value >= 0.8:
        return "üî•"
    elif value >= 0.5:
        return "‚ö°"
    return "üí§"


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ Jinja
app.jinja_env.filters["importance_icon"] = importance_icon


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def index():
    return render_template("index.html", active_page="home")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.register_blueprint(news_bp)
app.register_blueprint(webapp_bp)
app.register_blueprint(api_bp)
# WebSocket blueprint removed - using FastAPI now
# app.register_blueprint(ws_bp)
app.register_blueprint(metrics_bp)

# WebSocket initialization removed - using FastAPI now
# if REACTOR_ENABLED:
#     try:
#         init_socketio(app)
#         logger.info("‚úÖ WebSocket Hub –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: {e}")
# else:
#     logger.info("‚ö†Ô∏è Reactor –æ—Ç–∫–ª—é—á–µ–Ω, WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    from database.db_models import get_latest_news

    logger.info(f"üöÄ Webapp –∑–∞–ø—É—â–µ–Ω (—Ö–æ—Å—Ç {WEBAPP_HOST}, –ø–æ—Ä—Ç {WEBAPP_PORT}, debug={DEBUG})")

    try:
        latest = get_latest_news(limit=5)
        logger.debug("üîé –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î:")
        for n in latest:
            logger.debug(
                "- %s... (credibility=%s, importance=%s)",
                n["title"][:50],
                n.get("credibility"),
                n.get("importance"),
            )
    except Exception:
        logger.exception("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ debug-–∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

    # WebSocket support removed - using FastAPI now
    # if REACTOR_ENABLED:
    #     # –ò—Å–ø–æ–ª—å–∑—É–µ–º SocketIO –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    #     from routes.ws_routes import socketio
    #     if socketio:
    #         socketio.run(app, host=WEBAPP_HOST, port=WEBAPP_PORT, debug=DEBUG, allow_unsafe_werkzeug=True)
    #     else:
    #         logger.error("‚ùå SocketIO –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π Flask")
    #         app.run(host=WEBAPP_HOST, port=WEBAPP_PORT, debug=DEBUG)
    # else:
    #     # –û–±—ã—á–Ω—ã–π Flask –∑–∞–ø—É—Å–∫
    #     app.run(host=WEBAPP_HOST, port=WEBAPP_PORT, debug=DEBUG)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π Flask –±–µ–∑ WebSocket
    logger.info("‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π Flask")
    app.run(host=WEBAPP_HOST, port=WEBAPP_PORT, debug=DEBUG)
