import hashlib
import logging
import os
from datetime import datetime, timezone
from typing import List, Dict, Optional

from dotenv import load_dotenv
from supabase import create_client

from ai_modules.credibility import evaluate_credibility
from ai_modules.importance import evaluate_importance
from config.settings import COUNTRY_MAP
from utils.dates import format_datetime, ensure_utc_iso

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logger = logging.getLogger("database")

# --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SUPABASE ---
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

supabase = None
if SUPABASE_URL and SUPABASE_KEY:
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("‚úÖ Supabase client initialized")
else:
    logger.warning(
        "‚ö†Ô∏è Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç –∫–ª—é—á–µ–π). Unit-—Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ–∑ –ë–î."
    )


# --- UID –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π ---
def make_uid(url: str, title: str) -> str:
    return hashlib.sha256(f"{url}|{title}".encode()).hexdigest()


# --- Event ID –¥–ª—è —Å–æ–±—ã—Ç–∏–π ---
def make_event_id(title: str, country: str, event_time: str) -> str:
    raw = f"{title}|{country}|{event_time}"
    return hashlib.sha256(raw.encode()).hexdigest()


# --- –û–±–æ–≥–∞—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π AI ---
def enrich_news_with_ai(news_item: Dict) -> Dict:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç credibility –∏ importance –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ AI-–º–æ–¥—É–ª–∏."""
    try:
        news_item["credibility"] = evaluate_credibility(news_item)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ AI-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ credibility: {e}")
        news_item["credibility"] = 0.5

    try:
        news_item["importance"] = evaluate_importance(news_item)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ AI-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ importance: {e}")
        news_item["importance"] = 0.5

    return news_item


# --- UPSERT –Ω–æ–≤–æ—Å—Ç–µ–π ---
def upsert_news(items: List[Dict]):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ Supabase –±–µ–∑ –¥—É–±–ª–µ–π (–ø–æ uid) –∏ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º AI."""
    if not supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    rows: List[Dict] = []
    for item in items:
        try:
            enriched = enrich_news_with_ai(item)

            # üî• –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–ø—É—Å—Ç–æ–π title
            title = (enriched.get("title") or "").strip()
            if not title:
                title = enriched.get("source") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            # üî• content: —Å–Ω–∞—á–∞–ª–∞ content ‚Üí summary ‚Üí title
            content = (
                (enriched.get("content") or "").strip()
                or (enriched.get("summary") or "").strip()
                or title
            )

            uid = make_uid(enriched.get("url", ""), title)

            rows.append(
                {
                    "uid": uid,
                    "title": title[:512],
                    "content": content,
                    "link": enriched.get("url"),
                    "published_at": ensure_utc_iso(enriched.get("published_at"))
                    or datetime.now(timezone.utc).isoformat(),
                    "source": enriched.get("source"),
                    "category": enriched.get("category"),
                    "credibility": enriched.get("credibility"),
                    "importance": enriched.get("importance"),
                }
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}, item={item}")

    if not rows:
        logger.info("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return

    try:
        res = supabase.table("news").upsert(rows, on_conflict="uid").execute()
        inserted = len(res.data or [])
        logger.info("‚úÖ Upsert news: %s prepared, %s inserted/updated", len(rows), inserted)
        return res
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Supabase: {e}")


# --- UPSERT —Å–æ–±—ã—Ç–∏–π ---
def upsert_event(items: List[Dict]):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ Supabase –±–µ–∑ –¥—É–±–ª–µ–π (–ø–æ event_id)."""
    if not supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, —Å–æ–±—ã—Ç–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    rows: List[Dict] = []
    for item in items:
        try:
            event_time = item.get("datetime")
            if isinstance(event_time, datetime):
                event_time = ensure_utc_iso(event_time)
            elif not event_time:
                event_time = datetime.now(timezone.utc).isoformat()

            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º country_code —á–µ—Ä–µ–∑ COUNTRY_MAP
            country_raw = (item.get("country") or "").lower()
            country_code = COUNTRY_MAP.get(country_raw)

            event_id = make_event_id(item.get("title", ""), item.get("country", ""), event_time)

            rows.append(
                {
                    "event_id": event_id,
                    "event_time": event_time,
                    "country": item.get("country"),
                    "currency": item.get("currency"),
                    "title": item.get("title"),
                    "importance": item.get("importance"),
                    "priority": item.get("priority"),
                    "fact": item.get("fact"),
                    "forecast": item.get("forecast"),
                    "previous": item.get("previous"),
                    "source": item.get("source", "investing"),
                    "country_code": country_code,
                    "created_at": datetime.now(timezone.utc).isoformat(),
                }
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}, item={item}")

    if not rows:
        logger.info("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return

    try:
        res = supabase.table("events").upsert(rows, on_conflict="event_id").execute()
        inserted = len(res.data or [])
        logger.info("‚úÖ Upsert events: %s prepared, %s inserted/updated", len(rows), inserted)
        return res
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π –≤ Supabase: {e}")


# üëâ –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
upsert_events = upsert_event


def get_latest_events(limit: int = 10) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ events)."""
    if not supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, get_latest_events –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return []

    query = (
        supabase.table("events")
        .select(
            "event_time, country, country_code, currency, title, importance, fact, forecast, previous, source"
        )
        .order("event_time", desc=False)
        .limit(limit)
    )

    try:
        data = query.execute().data or []
        for ev in data:
            ev["event_time_fmt"] = format_datetime(ev.get("event_time"))
            try:
                ev["importance"] = int(ev.get("importance") or 0)
            except Exception:
                ev["importance"] = 0
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
        return []


def get_latest_news(
    source: Optional[str] = None,
    categories: Optional[List[str]] = None,
    limit: int = 10,
) -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î.
    - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω source ‚Üí —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É.
    - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã categories ‚Üí —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    if not supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, get_latest_news –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return []

    query = (
        supabase.table("news")
        .select(
            "id, uid, title, content, link, published_at, source, category, credibility, importance"
        )
        .order("published_at", desc=True)
        .limit(limit)
    )

    if source:
        query = query.eq("source", source)
    if categories:
        query = query.in_("category", categories)

    try:
        data = query.execute().data or []
        for row in data:
            row["published_at_fmt"] = format_datetime(row.get("published_at"))
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []
