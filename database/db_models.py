import hashlib
import logging
import os
import time
from datetime import datetime, timezone
from typing import List, Dict, Optional, Union
from pathlib import Path
import httpx
from dotenv import load_dotenv
from supabase import create_client, Client

from ai_modules.credibility import evaluate_credibility
from ai_modules.importance import evaluate_importance
from config.settings import COUNTRY_MAP
from utils.dates import format_datetime, ensure_utc_iso

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logger = logging.getLogger("database")

# --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SUPABASE ---
load_dotenv(Path(__file__).resolve().parent.parent / ".env")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

supabase: Optional[Client] = None
if SUPABASE_URL and SUPABASE_KEY:
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        logger.info("‚úÖ Supabase client initialized")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: %s", e)
else:
    logger.warning("‚ö†Ô∏è Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç –∫–ª—é—á–µ–π). Unit-—Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ–∑ –ë–î.")


# --- SAFE EXECUTE (—Ä–µ—Ç—Ä–∞–∏) ---
def safe_execute(query, retries: int = 3, delay: int = 2):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö Supabase/httpx.
    """
    for attempt in range(1, retries + 1):
        try:
            return query.execute()
        except (httpx.RemoteProtocolError, httpx.ConnectError) as e:
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ %s/%s: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è %s", attempt, retries, e)
            if attempt < retries:
                time.sleep(delay)
            else:
                raise


# --- UID –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π ---
def make_uid(url: str, title: str) -> str:
    return hashlib.sha256(f"{url}|{title}".encode()).hexdigest()


# --- Event ID –¥–ª—è —Å–æ–±—ã—Ç–∏–π ---
def make_event_id(title: str, country: str, event_time: str) -> str:
    raw = f"{title}|{country}|{event_time}"
    return hashlib.sha256(raw.encode()).hexdigest()


# --- –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç ---
def parse_datetime_from_row(value: Union[str, datetime, None]) -> Optional[datetime]:
    """
    –ü–∞—Ä—Å–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î –≤ datetime –æ–±—ä–µ–∫—Ç.

    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ datetime)

    Returns:
        datetime –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
    """
    if value is None:
        return None

    if isinstance(value, datetime):
        return value

    if isinstance(value, str):
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º ISO —Ñ–æ—Ä–º–∞—Ç
            if "T" in value or "+" in value or value.endswith("Z"):
                return datetime.fromisoformat(value.replace("Z", "+00:00"))
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            elif len(value) == 10 and value.count("-") == 2:
                return datetime.fromisoformat(value + "T00:00:00+00:00")
            # Fallback –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {value}")
                return datetime.now(timezone.utc)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{value}': {e}")
            return datetime.now(timezone.utc)

    return None


# --- –û–±–æ–≥–∞—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π AI ---
def enrich_news_with_ai(news_item: Dict) -> Dict:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç credibility –∏ importance –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ AI-–º–æ–¥—É–ª–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ news_item - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    if not isinstance(news_item, dict):
        logger.error(f"enrich_news_with_ai –ø–æ–ª—É—á–∏–ª –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(news_item)} = {news_item}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(news_item, str):
            return {"content": news_item, "credibility": 0.5, "importance": 0.5}
        return {"credibility": 0.5, "importance": 0.5}

    try:
        news_item["credibility"] = evaluate_credibility(news_item)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ AI-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ credibility: {e}")
        news_item["credibility"] = 0.5

    try:
        news_item["importance"] = evaluate_importance(news_item)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ AI-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ importance: {e}")
        news_item["importance"] = 0.5

    return news_item


# --- UPSERT –Ω–æ–≤–æ—Å—Ç–µ–π ---
def upsert_news(items: List[Dict]):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ Supabase –±–µ–∑ –¥—É–±–ª–µ–π (–ø–æ uid) –∏ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º AI."""
    if not supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    rows: List[Dict] = []
    for item in items:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ item - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if not isinstance(item, dict):
                logger.error(f"upsert_news –ø–æ–ª—É—á–∏–ª –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(item)} = {item}")
                continue

            enriched = enrich_news_with_ai(item)

            title = (enriched.get("title") or "").strip() or enriched.get("source") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            content = (enriched.get("content") or "").strip() or (enriched.get("summary") or "").strip() or title
            uid = make_uid(enriched.get("url", ""), title)

            row = {
                "uid": uid,
                "title": title[:512],
                "content": content,
                "link": enriched.get("url"),
                "published_at": ensure_utc_iso(enriched.get("published_at")) or datetime.now(timezone.utc).isoformat(),
                "source": enriched.get("source"),
                "category": (enriched.get("category") or "").lower() or None,
                "credibility": enriched.get("credibility"),
                "importance": enriched.get("importance"),
            }
            logger.debug("Prepared news row: %s", row)
            rows.append(row)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: %s, item=%s", e, item)

    if not rows:
        logger.info("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return

    try:
        res = safe_execute(supabase.table("news").upsert(rows, on_conflict="uid"))
        inserted = len(res.data or [])
        logger.info("‚úÖ Upsert news: %s prepared, %s inserted/updated", len(rows), inserted)
        return res
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Supabase: %s", e)


# --- UPSERT —Å–æ–±—ã—Ç–∏–π ---
def upsert_event(items: List[Dict]):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ Supabase –±–µ–∑ –¥—É–±–ª–µ–π (–ø–æ event_id)."""
    if not supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, —Å–æ–±—ã—Ç–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    rows: List[Dict] = []
    for item in items:
        try:
            event_time = item.get("datetime")
            if isinstance(event_time, datetime):
                event_time = ensure_utc_iso(event_time)
            elif not event_time:
                event_time = datetime.now(timezone.utc).isoformat()

            country_raw = (item.get("country") or "").lower()
            country_code = COUNTRY_MAP.get(country_raw)
            event_id = make_event_id(item.get("title", ""), item.get("country", ""), event_time)

            row = {
                "event_id": event_id,
                "event_time": event_time,
                "country": item.get("country"),
                "currency": item.get("currency"),
                "title": item.get("title"),
                "importance": item.get("importance"),
                "priority": item.get("priority"),
                "fact": item.get("fact"),
                "forecast": item.get("forecast"),
                "previous": item.get("previous"),
                "source": item.get("source", "investing"),
                "country_code": country_code,
                "created_at": datetime.now(timezone.utc).isoformat(),
            }
            logger.debug("Prepared event row: %s", row)
            rows.append(row)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è: %s, item=%s", e, item)

    if not rows:
        logger.info("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return

    try:
        res = safe_execute(supabase.table("events").upsert(rows, on_conflict="event_id"))
        inserted = len(res.data or [])
        logger.info("‚úÖ Upsert events: %s prepared, %s inserted/updated", len(rows), inserted)
        return res
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π –≤ Supabase: %s", e)


# üëâ –ê–ª–∏–∞—Å
upsert_events = upsert_event


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ---
def get_latest_events(limit: int = 10) -> List[Dict]:
    if not supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, get_latest_events –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return []

    query = (
        supabase.table("events")
        .select("event_time, country, country_code, currency, title, importance, fact, forecast, previous, source")
        .order("event_time", desc=False)
        .limit(limit)
    )

    try:
        data = safe_execute(query).data or []
        logger.debug("get_latest_events: fetched %d rows", len(data))
        for ev in data:
            ev["event_time_fmt"] = format_datetime(ev.get("event_time"))
            try:
                ev["importance"] = int(ev.get("importance") or 0)
            except Exception:
                ev["importance"] = 0
        return data
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: %s", e)
        return []


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π ---
def get_latest_news(
    source: Optional[str] = None,
    categories: Optional[List[str]] = None,
    limit: int = 10,
) -> List[Dict]:
    if not supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, get_latest_news –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return []

    logger.debug("get_latest_news: source=%s, categories=%s, limit=%s", source, categories, limit)

    query = (
        supabase.table("news")
        .select("id, uid, title, content, link, published_at, source, category, subcategory, credibility, importance")
        .order("published_at", desc=True)
        .limit(limit)
    )

    if source:
        query = query.eq("source", source)
    if categories:
        cats = [c.lower() for c in categories]
        query = query.in_("category", cats)

    try:
        data = safe_execute(query).data or []
        logger.debug("get_latest_news: fetched %d rows", len(data))
        for row in data:
            # –ü–∞—Ä—Å–∏–º published_at –≤ datetime –æ–±—ä–µ–∫—Ç
            row["published_at"] = parse_datetime_from_row(row.get("published_at"))
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            row["published_at_fmt"] = format_datetime(row.get("published_at"))
        return data
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: %s", e)
        return []


# --- USER MANAGEMENT FUNCTIONS ---


def upsert_user_by_telegram(telegram_id: int, username: str | None = None, locale: str = "ru") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID.

    Args:
        telegram_id: Telegram user ID
        username: Telegram username (optional)
        locale: User locale (default: 'ru')

    Returns:
        User ID from database
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return ""

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = supabase.table("users").select("id").eq("telegram_id", telegram_id).execute()

        if existing_user.data:
            user_id = existing_user.data[0]["id"]
            logger.debug("–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=%s", user_id)
            return user_id

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = (
            supabase.table("users")
            .insert({"telegram_id": telegram_id, "username": username, "locale": locale})
            .execute()
        )

        if new_user.data:
            user_id = new_user.data[0]["id"]
            logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=%s, telegram_id=%d", user_id, telegram_id)
            return user_id
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return ""

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
        return ""


def get_user_by_telegram(telegram_id: int) -> dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID.

    Args:
        telegram_id: Telegram user ID

    Returns:
        User data dict or None if not found
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None

    try:
        result = supabase.table("users").select("*").eq("telegram_id", telegram_id).execute()

        if result.data:
            return result.data[0]
        return None

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
        return None


def add_subscription(user_id: str, category: str) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: User ID
        category: News category

    Returns:
        True if subscription was added, False if already exists
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False

    try:
        result = supabase.table("subscriptions").insert({"user_id": user_id, "category": category}).execute()

        if result.data:
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: user_id=%d, category=%s", user_id, category)
            return True
        else:
            logger.debug("–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: user_id=%d, category=%s", user_id, category)
            return False

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        return False


def remove_subscription(user_id: str, category: str) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: User ID
        category: News category

    Returns:
        Number of deleted subscriptions (0 or 1)
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return 0

    try:
        result = supabase.table("subscriptions").delete().eq("user_id", user_id).eq("category", category).execute()

        deleted_count = len(result.data) if result.data else 0
        if deleted_count > 0:
            logger.info("–£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: user_id=%d, category=%s", user_id, category)

        return deleted_count

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        return 0


def list_subscriptions(user_id: str) -> list[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: User ID

    Returns:
        List of subscription dicts
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return []

    try:
        result = supabase.table("subscriptions").select("*").eq("user_id", user_id).execute()

        return result.data or []

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: %s", e)
        return []


def upsert_notification(
    user_id: str,
    type_: str = "digest",
    frequency: str = "daily",
    enabled: bool = True,
    preferred_hour: int = 9,
) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: User ID
        type_: Notification type ('digest', 'events', 'breaking')
        frequency: Notification frequency ('daily', 'weekly', 'instant')
        enabled: Whether notification is enabled
        preferred_hour: Preferred hour for daily notifications (0-23)
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # –£–∫–∞–∑—ã–≤–∞–µ–º on_conflict –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ (user_id, type)
        result = (
            supabase.table("notifications")
            .upsert(
                {
                    "user_id": user_id,
                    "type": type_,
                    "frequency": frequency,
                    "enabled": enabled,
                    "preferred_hour": preferred_hour,
                },
                on_conflict="user_id,type",  # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            )
            .execute()
        )

        if result.data:
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: user_id=%s, type=%s", user_id, type_)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)


def list_notifications(user_id: str) -> list[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: User ID

    Returns:
        List of notification settings dicts
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return []

    try:
        result = supabase.table("notifications").select("*").eq("user_id", user_id).execute()

        return result.data or []

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)
        return []


# --- USER NOTIFICATIONS FUNCTIONS ---


def get_user_notifications(user_id: Union[int, str], limit: int = 50, offset: int = 0) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: User ID
        limit: Maximum number of notifications to return
        offset: Number of notifications to skip

    Returns:
        List of notification dicts
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return []

    try:
        result = (
            supabase.table("user_notifications")
            .select("id, title, message, read, user_id")
            .eq("user_id", user_id)
            .order("id", desc=True)  # Use id instead of created_at
            .limit(limit)
            .execute()
        )

        notifications = result.data or []
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %d –¥–ª—è user_id=%s", len(notifications), user_id)
        return notifications

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)
        return []


def create_user_notification(
    user_id: Union[int, str],
    title: str,
    content: str,
    category: str = "general",
    read: bool = False,
    via_telegram: bool = False,
    via_webapp: bool = True,
) -> Optional[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: User ID
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        read: –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        via_telegram: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —á–µ—Ä–µ–∑ Telegram
        via_webapp: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤ WebApp

    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None

    try:
        notification_data = {
            "user_id": str(user_id),
            "title": title,
            "message": content,  # –í –±–∞–∑–µ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è message
            "category": category,
            "read": read,
            "via_telegram": via_telegram,
            "via_webapp": via_webapp,
        }

        result = supabase.table("user_notifications").insert(notification_data).execute()

        if result.data and len(result.data) > 0:
            notification_id = result.data[0].get("id")
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: user_id={user_id}, notification_id={notification_id}")
            return str(notification_id)
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è user_id={user_id}")
            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return None


def mark_notification_read(user_id: Union[int, str], notification_id: Union[int, str]) -> bool:
    """
    –û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.

    Args:
        user_id: User ID
        notification_id: Notification ID

    Returns:
        True if notification was marked as read, False otherwise
    """
    if not supabase:
        logger.error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False

    try:
        logger.info("Marking notification as read: user_id=%s, notification_id=%s", user_id, notification_id)
        result = (
            supabase.table("user_notifications")
            .update({"read": True})
            .eq("id", notification_id)
            .eq("user_id", user_id)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            .execute()
        )
        logger.info("Update result: %s", result.data)

        if result.data and len(result.data) > 0:
            logger.info(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: user_id=%s, notification_id=%s",
                user_id,
                notification_id,
            )
            return True
        else:
            logger.warning(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: user_id=%s, notification_id=%s",
                user_id,
                notification_id,
            )
            return False

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: %s", e)
        return False
