"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PulseAI.
"""

import asyncio
import logging
import os
from datetime import datetime, timezone
from typing import List, Dict, Optional
from pathlib import Path
import sys

from dotenv import load_dotenv
from supabase import create_async_client, AsyncClient

sys.path.append(str(Path(__file__).parent.parent))

from utils.dates import format_datetime  # noqa: E402

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logger = logging.getLogger("database.async")

# --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SUPABASE ---
load_dotenv(Path(__file__).resolve().parent.parent / ".env")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

async_supabase: Optional[AsyncClient] = None


async def init_async_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Supabase."""
    global async_supabase
    if SUPABASE_URL and SUPABASE_KEY:
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if async_supabase:
                await async_supabase.aclose()
                async_supabase = None

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            async_supabase = await create_async_client(SUPABASE_URL, SUPABASE_KEY)
            logger.info("‚úÖ Async Supabase client initialized (fresh)")
            return True
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Async Supabase: %s", e)
            return False
    else:
        logger.warning(
            "‚ö†Ô∏è Async Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç –∫–ª—é—á–µ–π). Unit-—Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ–∑ –ë–î."
        )
        return False


# --- ASYNC SAFE EXECUTE ---
async def async_safe_execute(query, retries: int = 3, delay: int = 2):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö.
    """
    for attempt in range(1, retries + 1):
        try:
            return await query.execute()
        except Exception as e:
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ %s/%s: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è %s", attempt, retries, e)
            if attempt < retries:
                await asyncio.sleep(delay)
            else:
                raise e


# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–û–í–û–°–¢–ï–ô ---
async def async_get_latest_news(
    source: Optional[str] = None,
    categories: Optional[List[str]] = None,
    limit: int = 10,
) -> List[Dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
    if not async_supabase:
        logger.warning("‚ö†Ô∏è Async Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, async_get_latest_news –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return []

    logger.debug(
        "async_get_latest_news: source=%s, categories=%s, limit=%s", source, categories, limit
    )

    query = (
        async_supabase.table("news")
        .select(
            "id, uid, title, content, link, published_at, source, category, subcategory, credibility, importance"
        )
        .order("published_at", desc=True)
        .limit(limit)
    )

    if source:
        query = query.eq("source", source)

    if categories:
        query = query.in_("category", categories)

    try:
        result = await async_safe_execute(query)
        return result.data or []
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: %s", e)
        return []


async def async_insert_news_batch(news_items: List[Dict]) -> int:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∞–∫–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    if not news_items:
        return 0

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–±–µ–∑ created_at –∏ published_at_fmt)
        # –≠—Ç–∏ –ø–æ–ª—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        clean_items = []
        for item in news_items:
            clean_item = {
                "uid": item.get("uid"),
                "title": item.get("title"),
                "content": item.get("content"),
                "link": item.get("link"),
                "source": item.get("source"),
                "category": item.get("category"),
                "subcategory": item.get("subcategory"),
                "published_at": item.get("published_at"),
            }
            clean_items.append(clean_item)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        from database.db_models import supabase, safe_execute

        if not supabase:
            logger.warning("‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω")
            return 0

        safe_execute(supabase.table("news").upsert(clean_items, on_conflict="uid"))

        inserted_count = len(clean_items)
        logger.info("‚úÖ Async: –≤—Å—Ç–∞–≤–ª–µ–Ω–æ %s –Ω–æ–≤–æ—Å—Ç–µ–π", inserted_count)
        return inserted_count

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ async_insert_news_batch: %s", e)
        return 0


async def async_get_news_count(categories: Optional[List[str]] = None) -> int:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    if not async_supabase:
        return 0

    try:
        query = async_supabase.table("news").select("id", count="exact")

        if categories:
            query = query.in_("category", categories)

        result = await async_safe_execute(query)
        return result.count or 0
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ async_get_news_count: %s", e)
        return 0


# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ë–´–¢–ò–ô ---
async def async_get_latest_events(limit: int = 50) -> List[Dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
    if not async_supabase:
        logger.warning("‚ö†Ô∏è Async Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, async_get_latest_events –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return []

    try:
        result = await async_safe_execute(
            async_supabase.table("events").select("*").order("event_time", desc=True).limit(limit)
        )

        events = result.data or []

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        for event in events:
            if event.get("event_time"):
                event["event_time_fmt"] = format_datetime(event["event_time"])

        return events

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ async_get_latest_events: %s", e)
        return []


# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
async def async_get_user_subscriptions(user_id: int) -> Dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not async_supabase:
        return {"categories": [], "sources": []}

    try:
        result = await async_safe_execute(
            async_supabase.table("users").select("categories, sources").eq("id", user_id).single()
        )

        if result.data:
            return {
                "categories": result.data.get("categories", []),
                "sources": result.data.get("sources", []),
            }
        else:
            return {"categories": [], "sources": []}

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ async_get_user_subscriptions: %s", e)
        return {"categories": [], "sources": []}


async def async_update_user_subscriptions(
    user_id: int, categories: List[str], sources: List[str]
) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not async_supabase:
        return False

    try:
        await async_safe_execute(
            async_supabase.table("users").upsert(
                {
                    "id": user_id,
                    "categories": categories,
                    "sources": sources,
                    "updated_at": datetime.now(timezone.utc).isoformat(),
                }
            )
        )

        logger.info("‚úÖ Async: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
        return True

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ async_update_user_subscriptions: %s", e)
        return False


# --- –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ---
async def test_async_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if not async_supabase:
        print("‚ùå Async Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False

    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        result = await async_safe_execute(async_supabase.table("news").select("id").limit(1))
        print(f"‚úÖ Async –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(result.data)} –∑–∞–ø–∏—Å–µ–π")
        return True
    except Exception as e:
        print(f"‚ùå Async –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async def main():
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not await init_async_supabase():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Async Supabase")
            return

        await test_async_connection()

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        news = await async_get_latest_news(limit=3)
        print(f"üì∞ –ü–æ–ª—É—á–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        events = await async_get_latest_events(limit=3)
        print(f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")

    asyncio.run(main())
