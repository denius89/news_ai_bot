"""
Flask-–º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π.
"""

import logging
from typing import Dict, List
from flask import Blueprint, render_template, request, jsonify

from services.unified_digest_service import get_sync_digest_service
from services.categories import get_categories
from database.db_models import (
    get_latest_events,
)  # –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∑–¥–µ—Å—å (–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ EventsService)

logger = logging.getLogger(__name__)

news_bp = Blueprint("news", __name__)


# --- –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π ---
@news_bp.route("/digest")
def digest():
    categories = request.args.getlist("category")

    digest_service = get_sync_digest_service()
    digest_text = digest_service.build_daily_digest(limit=10, categories=categories)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    news_items = digest_service.db_service.get_latest_news(categories=categories, limit=10)

    # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    enriched_items = []
    for item in news_items:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        if hasattr(item, "model_dump"):
            item_dict = item.model_dump()
        else:
            item_dict = dict(item)

        item_dict["source"] = item_dict.get("source") or "‚Äî"
        item_dict["credibility"] = float(item_dict.get("credibility") or 0.0)
        item_dict["importance"] = float(item_dict.get("importance") or 0.0)
        item_dict["published_at_fmt"] = item_dict.get("published_at_fmt") or "‚Äî"
        enriched_items.append(item_dict)

    news_items = enriched_items

    return render_template(
        "digest.html",
        news=news_items,
        all_categories=get_categories(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        active_categories=categories,
        digest_text=digest_text,
        active_page="digest",
    )


# --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π ---
@news_bp.route("/events")
def events():
    category = request.args.get("category")

    events_list = get_latest_events(limit=50)

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ —É —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å category)
    if category:
        events_list = [ev for ev in events_list if ev.get("category") == category]

    for ev in events_list:
        ev["event_time_fmt"] = ev.get("event_time_fmt") or "‚Äî"
        try:
            ev["importance"] = int(ev.get("importance") or 0)
        except Exception:
            ev["importance"] = 0

    return render_template(
        "calendar.html",
        events=events_list,
        active_category=category,
        active_page="events",
    )


# --- API Endpoints ---
@news_bp.route("/latest")
@news_bp.route("/api/latest")  # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def api_latest_news():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."""
    try:
        from database.db_models import get_latest_news
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = int(request.args.get('page', 1))
        limit = int(request.args.get('limit', 20))
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_news = get_latest_news(limit=1000)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏, –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏ —Å–≤–µ–∂–µ—Å—Ç–∏
        import datetime
        now = datetime.datetime.now(datetime.timezone.utc)
        
        def calculate_score(item):
            importance = float(item.get('importance', 0.5))
            credibility = float(item.get('credibility', 0.5))
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å
            published_at = item.get('published_at')
            if published_at:
                if isinstance(published_at, str):
                    try:
                        published_at = datetime.datetime.fromisoformat(published_at.replace('Z', '+00:00'))
                    except:
                        published_at = now
                hours_ago = (now - published_at).total_seconds() / 3600
                freshness_bonus = 0.1 if hours_ago <= 6 else 0.05 if hours_ago <= 24 else 0
            else:
                freshness_bonus = 0
            
            return importance * 0.6 + credibility * 0.4 + freshness_bonus
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–æ–≤–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        all_news.sort(key=calculate_score, reverse=True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ü–û–°–õ–ï —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        total = len(all_news)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        paginated_news = all_news[start_idx:end_idx]
        
        return jsonify({
            "status": "success",
            "data": [
                {
                    "id": n.get("id"),
                    "title": n.get("title"),
                    "content": n.get("content"),
                    "source": n.get("source"),
                    "url": n.get("link"),  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
                    "published_at": n.get("published_at").isoformat() if n.get("published_at") else None,
                    "category": n.get("category"),
                    "credibility": n.get("credibility"),
                    "importance": n.get("importance")
                }
                for n in paginated_news
            ],
            "pagination": {
                "page": page,
                "limit": limit,
                "total": total,
                "total_pages": (total + limit - 1) // limit,
                "has_next": end_idx < total,
                "has_prev": page > 1
            }
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# --- WebApp Dashboard ---
# Moved to webapp_routes.py to avoid conflicts


@news_bp.route("/api/latest-weighted")
def api_latest_news_weighted():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
    try:
        from database.db_models import get_latest_news
        from services.categories import get_categories
        from utils.news_distribution import (
            distribute_news_weighted, 
            get_distribution_statistics,
            get_category_weights
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        page = int(request.args.get('page', 1))
        limit = int(request.args.get('limit', 20))
        distribution_mode = request.args.get('mode', 'weighted')  # weighted, balanced, round_robin
        
        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: page={page}, limit={limit}, mode={distribution_mode}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        news_by_category = {}
        all_categories = get_categories()
        
        for category in all_categories:
            try:
                category_news = get_latest_news(categories=[category], limit=100)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
                news_by_category[category] = category_news
                logger.debug(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}: {len(category_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
                news_by_category[category] = []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if distribution_mode == 'weighted':
            distributed_news = distribute_news_weighted(news_by_category, limit)
        elif distribution_mode == 'balanced':
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            distributed_news = distribute_news_balanced(news_by_category, limit)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ
            distributed_news = distribute_news_weighted(news_by_category, limit)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        distribution_stats = get_distribution_statistics(distributed_news)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º
        total_distributed = len(distributed_news)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        paginated_news = distributed_news[start_idx:end_idx]
        
        logger.info(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(distributed_news)} –Ω–æ–≤–æ—Å—Ç–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {len(paginated_news)} –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
        
        return jsonify({
            "status": "success",
            "data": [
                {
                    "id": n.get("id"),
                    "title": n.get("title"),
                    "content": n.get("content"),
                    "source": n.get("source"),
                    "url": n.get("link"),
                    "published_at": n.get("published_at").isoformat() if n.get("published_at") else None,
                    "category": n.get("category"),
                    "credibility": n.get("credibility"),
                    "importance": n.get("importance")
                }
                for n in paginated_news
            ],
            "pagination": {
                "page": page,
                "limit": limit,
                "total": total_distributed,
                "total_pages": (total_distributed + limit - 1) // limit,
                "has_next": end_idx < total_distributed,
                "has_prev": page > 1
            },
            "distribution": {
                "mode": distribution_mode,
                "statistics": distribution_stats,
                "category_weights": get_category_weights()
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500


def distribute_news_balanced(news_by_category: Dict[str, List[Dict]], total_limit: int = 20) -> List[Dict]:
    """
    –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (Round Robin).
    
    Args:
        news_by_category: –°–ª–æ–≤–∞—Ä—å {category: [news_items]}
        total_limit: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    """
    if not news_by_category:
        return []
    
    from utils.news_distribution import calculate_news_score
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    for category in news_by_category:
        news_by_category[category].sort(key=calculate_news_score, reverse=True)
    
    # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    categories = list(news_by_category.keys())
    per_category = total_limit // len(categories)
    remainder = total_limit % len(categories)
    
    distributed_news = []
    for i, category in enumerate(categories):
        limit = per_category + (1 if i < remainder else 0)
        category_news = news_by_category[category][:limit]
        distributed_news.extend(category_news)
    
    return distributed_news


@news_bp.route("/api/distribution-stats")
def api_distribution_stats():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
    try:
        from services.categories import get_categories
        from utils.news_distribution import get_category_weights, get_distribution_statistics
        from database.db_models import get_latest_news
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = get_categories()
        category_stats = {}
        total_news = 0
        
        for category in categories:
            try:
                category_news = get_latest_news(categories=[category], limit=1000)
                category_stats[category] = {
                    'count': len(category_news),
                    'avg_importance': sum(float(n.get('importance', 0.5)) for n in category_news) / len(category_news) if category_news else 0,
                    'avg_credibility': sum(float(n.get('credibility', 0.5)) for n in category_news) / len(category_news) if category_news else 0,
                }
                total_news += len(category_news)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
                category_stats[category] = {'count': 0, 'avg_importance': 0, 'avg_credibility': 0}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        weights = get_category_weights()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        recommended_weights = {}
        if total_news > 0:
            for category in categories:
                recommended_weights[category] = category_stats[category]['count'] / total_news
        
        return jsonify({
            "status": "success",
            "statistics": {
                "total_news": total_news,
                "categories_count": len(categories),
                "category_stats": category_stats,
                "current_weights": weights,
                "recommended_weights": recommended_weights,
                "distribution_efficiency": {
                    "crypto_ratio": category_stats.get('crypto', {}).get('count', 0) / total_news if total_news > 0 else 0,
                    "tech_ratio": category_stats.get('tech', {}).get('count', 0) / total_news if total_news > 0 else 0,
                    "world_ratio": category_stats.get('world', {}).get('count', 0) / total_news if total_news > 0 else 0,
                }
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500


__all__ = ["news_bp"]
