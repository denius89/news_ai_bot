"""
Module: routes.news_routes
Purpose: Flask routes for news and events display
Location: routes/news_routes.py

Description:
    Flask Blueprint –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–æ–≤–æ—Å—Ç—è–º –∏ —Å–æ–±—ã—Ç–∏—è–º.

Key Endpoints:
    GET  / - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
    GET  /news - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    GET  /events - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
    GET  /api/news/latest - API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    GET  /api/events/latest - API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π

Dependencies:
    External:
        - Flask: Web framework
    Internal:
        - services.unified_digest_service: Digest generation
        - services.categories: Category management
        - database.db_models: Database operations (legacy)

Usage Example:
    ```python
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    GET /
    Response: HTML template with latest news

    # API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    GET /api/news/latest?limit=10&categories=tech,crypto
    Response: {"news": [...]}
    ```

Template Structure:
    - templates/index.html - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    - templates/news.html - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    - templates/events.html - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π

Notes:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç legacy db_models (–Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ service.py)
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å unified_digest_service
    - TODO (Week 2): –î–æ–±–∞–≤–∏—Ç—å pagination –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ Subscriptions Integration

Author: PulseAI Team
Last Updated: October 2025
"""

import logging
from typing import Dict, List
from flask import Blueprint, render_template, request, jsonify

from services.unified_digest_service import get_sync_digest_service
from services.categories import get_categories
from database.service import get_sync_service

logger = logging.getLogger(__name__)

news_bp = Blueprint("news", __name__)


# --- –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π ---
@news_bp.route("/digest")
def digest():
    categories = request.args.getlist("category")

    digest_service = get_sync_digest_service()
    digest_text = digest_service.build_daily_digest(limit=10, categories=categories)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    news_items = digest_service.db_service.get_latest_news(categories=categories, limit=10)

    # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    enriched_items = []
    for item in news_items:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        if hasattr(item, "model_dump"):
            item_dict = item.model_dump()
        else:
            item_dict = dict(item)

        item_dict["source"] = item_dict.get("source") or "‚Äî"
        item_dict["credibility"] = float(item_dict.get("credibility") or 0.0)
        item_dict["importance"] = float(item_dict.get("importance") or 0.0)
        item_dict["published_at_fmt"] = item_dict.get("published_at_fmt") or "‚Äî"
        enriched_items.append(item_dict)

    news_items = enriched_items

    return render_template(
        "digest.html",
        news=news_items,
        all_categories=get_categories(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        active_categories=categories,
        digest_text=digest_text,
        active_page="digest",
    )


# --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π ---
@news_bp.route("/events")
def events():
    category = request.args.get("category")

    db_service = get_sync_service()
    events_list = db_service.get_latest_events(limit=50)

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ —É —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å category)
    if category:
        events_list = [ev for ev in events_list if ev.get("category") == category]

    for ev in events_list:
        ev["event_time_fmt"] = ev.get("event_time_fmt") or "‚Äî"
        try:
            ev["importance"] = int(ev.get("importance") or 0)
        except Exception:
            ev["importance"] = 0

    return render_template(
        "calendar.html",
        events=events_list,
        active_category=category,
        active_page="events",
    )


# --- API Endpoints ---
@news_bp.route("/latest")
@news_bp.route("/api/latest")  # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def api_latest_news():
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.

    Query params:
        page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (default: 1)
        limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (default: 20)
        filter_by_subscriptions: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (default: false)
        user_id: UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –µ—Å–ª–∏ filter_by_subscriptions=true)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = int(request.args.get("page", 1))
        limit = int(request.args.get("limit", 20))

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filter_by_subscriptions = request.args.get("filter_by_subscriptions", "false").lower() == "true"
        selected_category = request.args.get("category")
        selected_subcategory = request.args.get("subcategory")

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'categories' –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if not selected_category:
            categories_param = request.args.get("categories")
            if categories_param:
                selected_category = categories_param.split(",")[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_service = get_sync_service()

        # –†–∞–∑—É–º–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        fetch_limit = min(limit * page * 2, 500)  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è deep pagination

        logger.info(
            f"üìä [API] News request: page={page}, category={selected_category}, "
            f"subcategory={selected_subcategory}, filter_by_subs={filter_by_subscriptions}"
        )

        # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
        user_id = None
        if filter_by_subscriptions:
            from flask import g

            if hasattr(g, "current_user") and g.current_user:
                user_id = g.current_user["user_id"]
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω user_id –∏–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {user_id}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ g.current_user")

        # –õ–û–ì–ò–ö–ê –ú–Ø–ì–ö–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ò (–í–∞—Ä–∏–∞–Ω—Ç A - Discovery Mode)
        if filter_by_subscriptions and user_id:
            from database.db_models import get_active_categories

            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –ù–ï–ó–ê–í–ò–°–ò–ú–û –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ (discovery mode)
            if selected_category:
                logger.info(f"üîç Discovery mode: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é {selected_category} –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")
                all_news = db_service.get_latest_news(categories=[selected_category], limit=fetch_limit)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if selected_subcategory:
                    logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {selected_subcategory}")
                    all_news = [n for n in all_news if n.get("subcategory") == selected_subcategory]
                    logger.info(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(all_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                active_cats = get_active_categories(user_id)
                full_categories = active_cats.get("full_categories", [])
                subcategories_filter = active_cats.get("subcategories", {})
                logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: full={full_categories}, subcategories={subcategories_filter}")

                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–¥–ø–∏—Å–∫–∏
                # –í–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                all_news = []

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
                from services.categories import get_categories

                all_available_categories = get_categories()

                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                is_subscribed_to_all = (
                    set(full_categories) == set(all_available_categories)
                    and not subcategories_filter
                    and len(full_categories) == len(all_available_categories)
                )
                if is_subscribed_to_all:
                    logger.info("üöÄ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É—é –µ–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                    all_news = db_service.get_latest_news(limit=fetch_limit)
                    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
                else:
                    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                    if full_categories:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
                        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {full_categories}")
                        for category in full_categories:
                            category_news = db_service.get_latest_news(
                                categories=[category],
                                limit=fetch_limit // len(full_categories) if len(full_categories) > 0 else fetch_limit,
                            )
                            all_news.extend(category_news)

                    if subcategories_filter:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {subcategories_filter}")
                        for category, subcats in subcategories_filter.items():
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                            category_limit = min(fetch_limit * 3, 500)  # x3 –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                            category_news = db_service.get_latest_news(categories=[category], limit=category_limit)
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω—É–∂–Ω—ã–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                            filtered_category_news = [n for n in category_news if n.get("subcategory") in subcats]
                            all_news.extend(filtered_category_news)
                            logger.info(
                                f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(category_news)}, "
                                f"–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_category_news)} –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {subcats}"
                            )

                    logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º: {len(all_news)}")

                    # –ù–æ–≤–æ—Å—Ç–∏ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
                    if not all_news and (full_categories or subcategories_filter):
                        logger.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    elif not (full_categories or subcategories_filter):
                        logger.info("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")
                        all_news = db_service.get_latest_news(limit=fetch_limit)
        else:
            # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
            if selected_category:
                logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫: {selected_category}")
                all_news = db_service.get_latest_news(categories=[selected_category], limit=fetch_limit)

                if selected_subcategory:
                    logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {selected_subcategory}")
                    all_news = [n for n in all_news if n.get("subcategory") == selected_subcategory]
                    logger.info(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(all_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                all_news = db_service.get_latest_news(limit=fetch_limit)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏, –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏ —Å–≤–µ–∂–µ—Å—Ç–∏
        import datetime

        now = datetime.datetime.now(datetime.timezone.utc)

        def calculate_score(item):
            importance = float(item.get("importance", 0.5))
            credibility = float(item.get("credibility", 0.5))

            # –ë–æ–Ω—É—Å –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å
            published_at = item.get("published_at")
            if published_at:
                if isinstance(published_at, str):
                    try:
                        published_at = datetime.datetime.fromisoformat(published_at.replace("Z", "+00:00"))
                    except BaseException:
                        published_at = now
                hours_ago = (now - published_at).total_seconds() / 3600
                freshness_bonus = 0.1 if hours_ago <= 6 else 0.05 if hours_ago <= 24 else 0
            else:
                freshness_bonus = 0

            return importance * 0.6 + credibility * 0.4 + freshness_bonus

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–æ–≤–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        all_news.sort(key=calculate_score, reverse=True)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ü–û–°–õ–ï —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        total = len(all_news)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        paginated_news = all_news[start_idx:end_idx]

        logger.info(
            f"‚úÖ [API] Returning {len(paginated_news)} news items, " f"total={total}, has_next={end_idx < total}"
        )

        return jsonify(
            {
                "status": "success",
                "data": [
                    {
                        "id": n.get("id"),
                        "title": n.get("title"),
                        "content": n.get("content"),
                        "source": n.get("source"),
                        "url": n.get("link"),  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
                        "published_at": (
                            n.get("published_at").isoformat()
                            if hasattr(n.get("published_at"), "isoformat")
                            else n.get("published_at")
                        ),
                        "category": n.get("category"),
                        "subcategory": n.get("subcategory"),
                        "credibility": n.get("credibility"),
                        "importance": n.get("importance"),
                    }
                    for n in paginated_news
                ],
                "pagination": {
                    "page": page,
                    "limit": limit,
                    "total": total,
                    "total_pages": (total + limit - 1) // limit,
                    "has_next": end_idx < total,
                    "has_prev": page > 1,
                },
                "filtered_by_subscriptions": filter_by_subscriptions and user_id is not None,
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500


# --- WebApp Dashboard ---
# Moved to webapp_routes.py to avoid conflicts


@news_bp.route("/api/latest-weighted")
def api_latest_news_weighted():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
    try:
        from services.categories import get_categories
        from utils.ai.news_distribution import (
            distribute_news_weighted,
            get_distribution_statistics,
            get_category_weights,
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        page = int(request.args.get("page", 1))
        limit = int(request.args.get("limit", 20))
        distribution_mode = request.args.get("mode", "weighted")  # weighted, balanced, round_robin

        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: page={page}, limit={limit}, mode={distribution_mode}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: 1 –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ N)
        news_by_category = {}
        all_categories = get_categories()
        db_service = get_sync_service()

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è batch –∑–∞–≥—Ä—É–∑–∫–∏ (1 –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ 10+)
            from database.db_models import supabase

            if supabase:
                result = supabase.rpc(
                    "get_news_by_categories_batch", {"cats": all_categories, "limit_per_category": 50}
                ).execute()

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                for category in all_categories:
                    news_by_category[category] = []

                for news_item in result.data or []:
                    cat = news_item.get("category")
                    if cat in news_by_category:
                        news_by_category[cat].append(news_item)

                logger.info(f"‚úÖ Batch –∑–∞–≥—Ä—É–∑–∫–∞: {len(result.data or [])} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(all_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –µ—Å–ª–∏ RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                for category in all_categories:
                    try:
                        category_news = db_service.get_latest_news(categories=[category], limit=50)
                        news_by_category[category] = category_news
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
                        news_by_category[category] = []

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ batch –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
            for category in all_categories:
                try:
                    category_news = db_service.get_latest_news(categories=[category], limit=50)
                    news_by_category[category] = category_news
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
                    news_by_category[category] = []

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if distribution_mode == "weighted":
            distributed_news = distribute_news_weighted(news_by_category, limit)
        elif distribution_mode == "balanced":
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            distributed_news = distribute_news_balanced(news_by_category, limit)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ
            distributed_news = distribute_news_weighted(news_by_category, limit)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        distribution_stats = get_distribution_statistics(distributed_news)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º
        total_distributed = len(distributed_news)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        paginated_news = distributed_news[start_idx:end_idx]

        logger.info(
            f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(distributed_news)} –Ω–æ–≤–æ—Å—Ç–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {len(paginated_news)} –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}"
        )

        return jsonify(
            {
                "status": "success",
                "data": [
                    {
                        "id": n.get("id"),
                        "title": n.get("title"),
                        "content": n.get("content"),
                        "source": n.get("source"),
                        "url": n.get("link"),
                        "published_at": (
                            n.get("published_at").isoformat()
                            if hasattr(n.get("published_at"), "isoformat")
                            else n.get("published_at")
                        ),
                        "category": n.get("category"),
                        "credibility": n.get("credibility"),
                        "importance": n.get("importance"),
                    }
                    for n in paginated_news
                ],
                "pagination": {
                    "page": page,
                    "limit": limit,
                    "total": total_distributed,
                    "total_pages": (total_distributed + limit - 1) // limit,
                    "has_next": end_idx < total_distributed,
                    "has_prev": page > 1,
                },
                "distribution": {
                    "mode": distribution_mode,
                    "statistics": distribution_stats,
                    "category_weights": get_category_weights(),
                },
            }
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500


def distribute_news_balanced(news_by_category: Dict[str, List[Dict]], total_limit: int = 20) -> List[Dict]:
    """
    –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (Round Robin).

    Args:
        news_by_category: –°–ª–æ–≤–∞—Ä—å {category: [news_items]}
        total_limit: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π

    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    """
    if not news_by_category:
        return []

    from utils.ai.news_distribution import calculate_news_score

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    for category in news_by_category:
        news_by_category[category].sort(key=calculate_news_score, reverse=True)

    # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    categories = list(news_by_category.keys())
    per_category = total_limit // len(categories)
    remainder = total_limit % len(categories)

    distributed_news = []
    for i, category in enumerate(categories):
        limit = per_category + (1 if i < remainder else 0)
        category_news = news_by_category[category][:limit]
        distributed_news.extend(category_news)

    return distributed_news


@news_bp.route("/api/distribution-stats")
def api_distribution_stats():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
    try:
        from services.categories import get_categories
        from utils.ai.news_distribution import get_category_weights

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: SQL aggregation)
        categories = get_categories()
        category_stats = {}
        total_news = 0

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ (1 –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ N)
            from database.db_models import supabase

            if supabase:
                result = supabase.rpc("get_all_category_stats").execute()

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
                for row in result.data or []:
                    category_stats[row["category"]] = {
                        "count": row["count"],
                        "avg_importance": row["avg_importance"],
                        "avg_credibility": row["avg_credibility"],
                    }
                    total_news += row["count"]

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
                for category in categories:
                    if category not in category_stats:
                        category_stats[category] = {"count": 0, "avg_importance": 0, "avg_credibility": 0}

                logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ RPC: {len(category_stats)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {total_news} –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
                raise Exception("Supabase not available")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ RPC: {e}, fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±")
            # Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            db_service = get_sync_service()
            for category in categories:
                try:
                    category_news = db_service.get_latest_news(categories=[category], limit=1000)
                    category_stats[category] = {
                        "count": len(category_news),
                        "avg_importance": (
                            sum(float(n.get("importance", 0.5)) for n in category_news) / len(category_news)
                            if category_news
                            else 0
                        ),
                        "avg_credibility": (
                            sum(float(n.get("credibility", 0.5)) for n in category_news) / len(category_news)
                            if category_news
                            else 0
                        ),
                    }
                    total_news += len(category_news)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
                    category_stats[category] = {"count": 0, "avg_importance": 0, "avg_credibility": 0}

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        weights = get_category_weights()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        recommended_weights = {}
        if total_news > 0:
            for category in categories:
                recommended_weights[category] = category_stats[category]["count"] / total_news

        return jsonify(
            {
                "status": "success",
                "statistics": {
                    "total_news": total_news,
                    "categories_count": len(categories),
                    "category_stats": category_stats,
                    "current_weights": weights,
                    "recommended_weights": recommended_weights,
                    "distribution_efficiency": {
                        "crypto_ratio": (
                            category_stats.get("crypto", {}).get("count", 0) / total_news if total_news > 0 else 0
                        ),
                        "tech_ratio": (
                            category_stats.get("tech", {}).get("count", 0) / total_news if total_news > 0 else 0
                        ),
                        "world_ratio": (
                            category_stats.get("world", {}).get("count", 0) / total_news if total_news > 0 else 0
                        ),
                    },
                },
            }
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500


__all__ = ["news_bp"]
