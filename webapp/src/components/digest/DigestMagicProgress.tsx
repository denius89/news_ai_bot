import { motion } from "framer-motion";
import { useEffect, useState } from "react";
import { Sparkles, Bot, Briefcase, Brain, Laugh, Newspaper, BookOpen, MessageCircle } from "lucide-react";

const personalities = {
  analytical: {
    color: "from-blue-400 via-cyan-300 to-blue-500",
    icon: <Brain className="w-10 h-10 text-blue-400" />,
    phrases: [
      "–ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤...",
      "–°—Ä–∞–≤–Ω–∏–≤–∞—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –≤—ã—è–≤–ª—è—é –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏...",
      "–û—Ü–µ–Ω–∏–≤–∞—é –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏ –≤–∞–∂–Ω–æ—Å—Ç—å...",
      "–§–æ—Ä–º–∏—Ä—É—é –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö..."
    ]
  },
  business: {
    color: "from-amber-400 via-yellow-300 to-orange-400",
    icon: <Briefcase className="w-10 h-10 text-amber-400" />,
    phrases: [
      "–û—Ç–±–∏—Ä–∞—é –∫–ª—é—á–µ–≤—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è...",
      "–ò—â—É —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...",
      "–ü—Ä–æ–≤–µ—Ä—è—é –æ—Ç—á—ë—Ç—ã –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏...",
      "–°–æ–∑–¥–∞—é –¥–∞–π–¥–∂–µ—Å—Ç –≤ –¥–µ–ª–æ–≤–æ–º —Ç–æ–Ω–µ..."
    ]
  },
  meme: {
    color: "from-pink-400 via-purple-400 to-fuchsia-400",
    icon: <Laugh className="w-10 h-10 text-pink-400" />,
    phrases: [
      "–ü–µ—Ä–µ–≤–æ–∂—É –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —è–∑—ã–∫ –º–µ–º–æ–≤ üòé",
      "–î–æ–±–∞–≤–ª—è—é –Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞–∑–º–∞...",
      "AI —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ",
      "–°–æ–±–∏—Ä–∞—é –≤–µ—Å—ë–ª—É—é —Å–≤–æ–¥–∫—É —Å–æ–±—ã—Ç–∏–π!"
    ]
  },
  
  // –ù–û–í–´–ï –°–¢–ò–õ–ò v2
  newsroom: {
    color: "from-slate-400 via-gray-300 to-slate-500",
    icon: <Newspaper className="w-10 h-10 text-slate-400" />,
    phrases: [
      "–°–æ–±–∏—Ä–∞—é —Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...",
      "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ü–∏—Ñ—Ä—ã...",
      "–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
      "–§–æ—Ä–º–∏—Ä—É—é –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤ —Å—Ç–∏–ª–µ Reuters..."
    ]
  },
  
  magazine: {
    color: "from-violet-400 via-purple-300 to-indigo-400",
    icon: <BookOpen className="w-10 h-10 text-violet-400" />,
    phrases: [
      "–ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç...",
      "–ü—Ä–µ–≤—Ä–∞—â–∞—é —Ñ–∞–∫—Ç—ã –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é...",
      "–î–æ–±–∞–≤–ª—è—é –≥–ª—É–±–∏–Ω—É –∏ storytelling...",
      "–°–æ–∑–¥–∞—é –¥–∞–π–¥–∂–µ—Å—Ç –≤ —Å—Ç–∏–ª–µ The Atlantic..."
    ]
  },
  
  casual: {
    color: "from-teal-400 via-cyan-300 to-emerald-400",
    icon: <MessageCircle className="w-10 h-10 text-teal-400" />,
    phrases: [
      "–ü–µ—Ä–µ–≤–æ–∂—É –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫...",
      "–£–±–∏—Ä–∞—é –≤—Å–µ —Å–ª–æ–∂–Ω–æ–µ –∏ —Å–∫—É—á–Ω–æ–µ...",
      "–î–µ–ª–∞—é –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–æ üöá",
      "–§–æ—Ä–º–∏—Ä—É—é —É–¥–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è Telegram..."
    ]
  }
};

interface DigestMagicProgressProps {
  style?: 'analytical' | 'business' | 'meme' | 'newsroom' | 'magazine' | 'casual';
  tone?: 'neutral' | 'insightful' | 'critical' | 'optimistic';
  length?: 'short' | 'medium' | 'long';
  onComplete?: () => void;
}

export const DigestMagicProgress: React.FC<DigestMagicProgressProps> = ({ 
  style = "analytical", 
  tone = "neutral",
  length = "medium",
  onComplete 
}) => {
  const persona = personalities[style] || personalities.analytical;
  
  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ñ—Ä–∞–∑ –ø–æ —Ç–æ–Ω—É
  const getPhrases = (style: string, tone?: string) => {
    const basePersona = personalities[style];
    
    if (tone === 'critical') {
      return [
        ...basePersona.phrases,
        "–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö...",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã..."
      ];
    }
    
    if (tone === 'optimistic') {
      return [
        ...basePersona.phrases,
        "–ò—â—É –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã...",
        "–í—ã–¥–µ–ª—è—é —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è..."
      ];
    }
    
    return basePersona.phrases;
  };
  
  const adaptedPhrases = getPhrases(style, tone);
  const [phrase, setPhrase] = useState(adaptedPhrases[0]);

  useEffect(() => {
    const interval = setInterval(() => {
      setPhrase(prev => {
        const currentIndex = adaptedPhrases.indexOf(prev);
        const nextIndex = (currentIndex + 1) % adaptedPhrases.length;
        return adaptedPhrases[nextIndex];
      });
    }, 3000);
    
    return () => clearInterval(interval);
  }, [adaptedPhrases]);

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const getGenerationTime = (length?: string) => {
    switch (length) {
      case 'short': return 10000; // 10 —Å–µ–∫—É–Ω–¥
      case 'medium': return 15000; // 15 —Å–µ–∫—É–Ω–¥
      case 'long': return 20000; // 20 —Å–µ–∫—É–Ω–¥
      default: return 15000;
    }
  };

  // Auto-complete after some time (optional)
  useEffect(() => {
    if (onComplete) {
      const timer = setTimeout(() => {
        onComplete();
      }, getGenerationTime(length));
      
      return () => clearTimeout(timer);
    }
  }, [onComplete, length]);

  return (
    <motion.div 
      className={`fixed inset-0 flex flex-col items-center justify-center 
                  bg-gradient-to-br ${persona.color} 
                  dark:from-[#0d0d0d] dark:via-[#1a1a1a] dark:to-[#222] 
                  backdrop-blur-xl text-center z-50 px-6 transition-all`}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
    >
      {/* Animated Icons */}
      <motion.div
        className="flex items-center justify-center mb-6"
        animate={{ rotate: 360 }}
        transition={{ repeat: Infinity, duration: 8, ease: "linear" }}
      >
        {persona.icon}
        <Bot className="w-10 h-10 text-white/80 mx-2" />
        <Sparkles className="w-10 h-10 text-white/70" />
      </motion.div>

      {/* Dynamic Title */}
      <motion.h2
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-2xl font-semibold text-white mb-3 drop-shadow-lg"
      >
        AI –¥—É–º–∞–µ—Ç –≤ —Å—Ç–∏–ª–µ "{style}"...
      </motion.h2>

      {/* Dynamic Phrases */}
      <motion.p
        key={phrase}
        initial={{ opacity: 0, y: 5 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-white/90 text-base max-w-md px-4 leading-relaxed mb-5"
      >
        {phrase}
      </motion.p>

      {/* Animated Progress Bar */}
      <motion.div
        className="mt-4 h-1 w-3/4 bg-white/20 rounded-full overflow-hidden"
        initial={{ scaleX: 0 }}
        animate={{ scaleX: 1 }}
        transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
      >
        <motion.div 
          className="h-full w-full bg-gradient-to-r from-white/70 via-white/40 to-white/80"
          animate={{ 
            x: ["-100%", "100%"],
            opacity: [0.7, 1, 0.7]
          }}
          transition={{ 
            duration: 2, 
            repeat: Infinity, 
            ease: "easeInOut" 
          }}
        />
      </motion.div>

      {/* Floating Particles Effect */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-2 bg-white/30 rounded-full"
            style={{
              left: `${20 + i * 15}%`,
              top: `${30 + (i % 3) * 20}%`,
            }}
            animate={{
              y: [-20, 20, -20],
              opacity: [0.3, 0.8, 0.3],
            }}
            transition={{
              duration: 3 + i * 0.5,
              repeat: Infinity,
              ease: "easeInOut",
              delay: i * 0.3,
            }}
          />
        ))}
      </div>
    </motion.div>
  );
};

export default DigestMagicProgress;
