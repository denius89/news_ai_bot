/**
 * –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Admin Panel
 */

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export function formatDuration(seconds: number): string {
    if (seconds < 60) {
        return `${seconds} —Å–µ–∫`;
    }

    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;

    if (minutes < 60) {
        return remainingSeconds > 0
            ? `${minutes} –º–∏–Ω ${remainingSeconds} —Å–µ–∫`
            : `${minutes} –º–∏–Ω`;
    }

    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;

    return `${hours} —á ${remainingMinutes} –º–∏–Ω`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ ISO —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export function formatTime(isoString: string): string {
    try {
        const date = new Date(isoString);
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch {
        return isoString;
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export function parseLogLevel(text: string): 'INFO' | 'WARNING' | 'ERROR' | 'SUCCESS' | 'DEBUG' {
    const upperText = text.toUpperCase();

    if (upperText.includes('ERROR') || upperText.includes('‚ùå')) {
        return 'ERROR';
    }
    if (upperText.includes('WARNING') || upperText.includes('‚ö†Ô∏è')) {
        return 'WARNING';
    }
    if (upperText.includes('SUCCESS') || upperText.includes('‚úÖ')) {
        return 'SUCCESS';
    }
    if (upperText.includes('DEBUG')) {
        return 'DEBUG';
    }

    return 'INFO';
}

/**
 * –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –ª–æ–≥–∞
 */
export function highlightLogText(text: string): string {
    // –í—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —ç–º–æ–¥–∑–∏ –∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return text
        // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        .replace(/"([^"]+\.[a-z]+)"/g, '<span class="text-blue-600 font-mono">"$1"</span>')
        // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        .replace(/\b(\d+)\b/g, '<span class="text-green-600 font-semibold">$1</span>')
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        .replace(/\[(\d{2}:\d{2}:\d{2})\]/g, '<span class="text-gray-500">[$1]</span>')
        // –°—Ç–∞—Ç—É—Å—ã
        .replace(/\b(—É—Å–ø–µ—Ö|error|success|–∑–∞–≤–µ—Ä—à–µ–Ω|–∑–∞–ø—É—â–µ–Ω)\b/gi,
            '<span class="font-semibold">$1</span>')
        // URL –∏ –ø—É—Ç–∏
        .replace(/(https?:\/\/[^\s]+)/g,
            '<span class="text-purple-600 underline">$1</span>');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
 */
export function getLogLevelColor(level: string): string {
    switch (level) {
        case 'ERROR':
            return 'text-red-600 bg-red-50';
        case 'WARNING':
            return 'text-yellow-600 bg-yellow-50';
        case 'SUCCESS':
            return 'text-green-600 bg-green-50';
        case 'DEBUG':
            return 'text-gray-500 bg-gray-50';
        default:
            return 'text-blue-600 bg-blue-50';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export function formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 B';

    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
 */
export function formatPercent(value: number, maxDecimals: number = 1): string {
    return `${Math.min(100, Math.max(0, value)).toFixed(maxDecimals)}%`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
 */
export function formatNumber(value: number): string {
    return value.toLocaleString('ru-RU');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—Å–∫–∞
 */
export function getRunStatusIcon(status: string): string {
    switch (status) {
        case 'completed':
            return '‚úÖ';
        case 'failed':
            return '‚ùå';
        case 'running':
            return 'üîÑ';
        case 'stopped':
            return '‚è∏Ô∏è';
        default:
            return '‚ùì';
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—Å–∫–∞
 */
export function getRunStatusText(status: string): string {
    switch (status) {
        case 'completed':
            return '–ó–∞–≤–µ—Ä—à–µ–Ω';
        case 'failed':
            return '–û—à–∏–±–∫–∞';
        case 'running':
            return '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';
        case 'stopped':
            return '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        default:
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}
