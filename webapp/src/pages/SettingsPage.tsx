import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/Card';
import { Button } from '../components/ui/Button';
import { Input } from '../components/ui/Input';
import { MobileHeader } from '../components/ui/Header';

interface Category {
  id: string;
  name: string;
  icon: string;
  enabled: boolean;
  subcategories: {
    id: string;
    name: string;
    enabled: boolean;
  }[];
}

interface NotificationSettings {
  push: boolean;
  email: boolean;
  digest: boolean;
  events: boolean;
  frequency: 'instant' | 'hourly' | 'daily' | 'weekly';
}

interface SettingsPageProps {
  theme: 'light' | 'dark';
  onThemeToggle: () => void;
}

const SettingsPage: React.FC<SettingsPageProps> = ({ theme }) => {
  const [categories, setCategories] = useState<Category[]>([]);
  const [notifications, setNotifications] = useState<NotificationSettings>({
    push: true,
    email: false,
    digest: true,
    events: true,
    frequency: 'daily',
  });
  const [loading, setLoading] = useState(true);
  const [userInfo, setUserInfo] = useState({
    name: '',
    email: '',
    timezone: 'Europe/Moscow',
  });

  const mockCategories: Category[] = [
    {
      id: 'crypto',
      name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
      icon: '‚Çø',
      enabled: true,
      subcategories: [
        { id: 'bitcoin', name: 'Bitcoin', enabled: true },
        { id: 'ethereum', name: 'Ethereum', enabled: true },
        { id: 'altcoins', name: '–ê–ª—å—Ç–∫–æ–∏–Ω—ã', enabled: false },
        { id: 'defi', name: 'DeFi', enabled: true },
      ],
    },
    {
      id: 'tech',
      name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      icon: 'ü§ñ',
      enabled: true,
      subcategories: [
        { id: 'ai', name: '–ò–ò', enabled: true },
        { id: 'blockchain', name: '–ë–ª–æ–∫—á–µ–π–Ω', enabled: false },
        { id: 'startups', name: '–°—Ç–∞—Ä—Ç–∞–ø—ã', enabled: true },
      ],
    },
    {
      id: 'sports',
      name: '–°–ø–æ—Ä—Ç',
      icon: '‚öΩ',
      enabled: false,
      subcategories: [
        { id: 'football', name: '–§—É—Ç–±–æ–ª', enabled: false },
        { id: 'basketball', name: '–ë–∞—Å–∫–µ—Ç–±–æ–ª', enabled: false },
        { id: 'tennis', name: '–¢–µ–Ω–Ω–∏—Å', enabled: false },
      ],
    },
  ];

  useEffect(() => {
    // Simulate API call
    setTimeout(() => {
      setCategories(mockCategories);
      setLoading(false);
    }, 1000);
  }, []);

  const toggleCategory = (categoryId: string) => {
    setCategories(prev => prev.map(cat => 
      cat.id === categoryId 
        ? { ...cat, enabled: !cat.enabled }
        : cat
    ));
  };

  const toggleSubcategory = (categoryId: string, subcategoryId: string) => {
    setCategories(prev => prev.map(cat => 
      cat.id === categoryId 
        ? {
            ...cat,
            subcategories: cat.subcategories.map(sub => 
              sub.id === subcategoryId 
                ? { ...sub, enabled: !sub.enabled }
                : sub
            )
          }
        : cat
    ));
  };

  const updateNotificationSettings = (key: keyof NotificationSettings, value: any) => {
    setNotifications(prev => ({ ...prev, [key]: value }));
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
        ease: 'easeOut',
      },
    },
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-bg">
        <MobileHeader title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" subtitle="–ó–∞–≥—Ä—É–∑–∫–∞..." />
        <main className="container-main">
          <div className="space-y-4">
            {[...Array(3)].map((_, i) => (
              <Card key={i} className="animate-pulse">
                <CardHeader>
                  <div className="h-4 bg-surface-alt rounded w-3/4"></div>
                  <div className="h-3 bg-surface-alt rounded w-1/2"></div>
                </CardHeader>
                <CardContent>
                  <div className="h-3 bg-surface-alt rounded w-full mb-2"></div>
                  <div className="h-3 bg-surface-alt rounded w-2/3"></div>
                </CardContent>
              </Card>
            ))}
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-bg">
      <MobileHeader 
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" 
        subtitle="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
      />
      
      <main className="container-main">
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className="space-y-6"
        >
          {/* User Profile */}
          <motion.section variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</CardTitle>
                <CardDescription>
                  –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-text mb-2 block">
                    –ò–º—è
                  </label>
                  <Input
                    value={userInfo.name}
                    onChange={(e) => setUserInfo(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  />
                </div>
                <div>
                  <label className="text-sm font-medium text-text mb-2 block">
                    Email
                  </label>
                  <Input
                    type="email"
                    value={userInfo.email}
                    onChange={(e) => setUserInfo(prev => ({ ...prev, email: e.target.value }))}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
                  />
                </div>
                <div>
                  <label className="text-sm font-medium text-text mb-2 block">
                    –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                  </label>
                  <select 
                    className="input w-full"
                    value={userInfo.timezone}
                    onChange={(e) => setUserInfo(prev => ({ ...prev, timezone: e.target.value }))}
                  >
                    <option value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (UTC+3)</option>
                    <option value="Europe/London">–õ–æ–Ω–¥–æ–Ω (UTC+0)</option>
                    <option value="America/New_York">–ù—å—é-–ô–æ—Ä–∫ (UTC-5)</option>
                    <option value="Asia/Tokyo">–¢–æ–∫–∏–æ (UTC+9)</option>
                  </select>
                </div>
                <Button variant="primary" className="w-full">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </Button>
              </CardContent>
            </Card>
          </motion.section>

          {/* Categories */}
          <motion.section variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π</CardTitle>
                <CardDescription>
                  –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {categories.map((category) => (
                    <div key={category.id} className="border border-border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{category.icon}</span>
                          <div>
                            <h4 className="font-medium text-text">{category.name}</h4>
                            <p className="text-sm text-muted-strong">
                              {category.subcategories.filter(sub => sub.enabled).length} –∏–∑ {category.subcategories.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                            </p>
                          </div>
                        </div>
                        <Button
                          variant={category.enabled ? 'primary' : 'secondary'}
                          size="sm"
                          onClick={() => toggleCategory(category.id)}
                        >
                          {category.enabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                        </Button>
                      </div>
                      
                      {category.enabled && (
                        <div className="space-y-2">
                          {category.subcategories.map((subcategory) => (
                            <div key={subcategory.id} className="flex items-center justify-between py-2 px-3 bg-surface-alt rounded-lg">
                              <span className="text-sm text-text">{subcategory.name}</span>
                              <Button
                                variant={subcategory.enabled ? 'primary' : 'secondary'}
                                size="sm"
                                onClick={() => toggleSubcategory(category.id, subcategory.id)}
                              >
                                {subcategory.enabled ? '–í–∫–ª' : '–í—ã–∫–ª'}
                              </Button>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </motion.section>

          {/* Notifications */}
          <motion.section variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</CardTitle>
                <CardDescription>
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-text">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                      <p className="text-sm text-muted-strong">–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ</p>
                    </div>
                    <Button
                      variant={notifications.push ? 'primary' : 'secondary'}
                      size="sm"
                      onClick={() => updateNotificationSettings('push', !notifications.push)}
                    >
                      {notifications.push ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                    </Button>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-text">Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                      <p className="text-sm text-muted-strong">–ü–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã –Ω–∞ email</p>
                    </div>
                    <Button
                      variant={notifications.email ? 'primary' : 'secondary'}
                      size="sm"
                      onClick={() => updateNotificationSettings('email', !notifications.email)}
                    >
                      {notifications.email ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                    </Button>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-text">AI-–¥–∞–π–¥–∂–µ—Å—Ç—ã</h4>
                      <p className="text-sm text-muted-strong">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –æ—Ç –ò–ò</p>
                    </div>
                    <Button
                      variant={notifications.digest ? 'primary' : 'secondary'}
                      size="sm"
                      onClick={() => updateNotificationSettings('digest', !notifications.digest)}
                    >
                      {notifications.digest ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                    </Button>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-text">–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</h4>
                      <p className="text-sm text-muted-strong">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö</p>
                    </div>
                    <Button
                      variant={notifications.events ? 'primary' : 'secondary'}
                      size="sm"
                      onClick={() => updateNotificationSettings('events', !notifications.events)}
                    >
                      {notifications.events ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                    </Button>
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium text-text mb-2 block">
                    –ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  </label>
                  <select 
                    className="input w-full"
                    value={notifications.frequency}
                    onChange={(e) => updateNotificationSettings('frequency', e.target.value)}
                  >
                    <option value="instant">–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ</option>
                    <option value="hourly">–ö–∞–∂–¥—ã–π —á–∞—Å</option>
                    <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                    <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                  </select>
                </div>
              </CardContent>
            </Card>
          </motion.section>

          {/* Export/Import */}
          <motion.section variants={itemVariants}>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç</CardTitle>
                <CardDescription>
                  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Button variant="secondary" className="w-full">
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
                  </Button>
                  <Button variant="secondary" className="w-full">
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                    </svg>
                    –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.section>

          {/* Danger Zone */}
          <motion.section variants={itemVariants}>
            <Card className="border-error/20">
              <CardHeader>
                <CardTitle className="text-lg text-error">–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞</CardTitle>
                <CardDescription>
                  –ù–µ–æ–±—Ä–∞—Ç–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button variant="secondary" className="w-full text-error border-error/20 hover:bg-error/10">
                  –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Button>
                <Button variant="secondary" className="w-full text-error border-error/20 hover:bg-error/10">
                  –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                </Button>
              </CardContent>
            </Card>
          </motion.section>
        </motion.div>
      </main>
    </div>
  );
};

export default SettingsPage;
