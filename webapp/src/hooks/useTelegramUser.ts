import { useState, useEffect } from 'react';

export interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
  photo_url?: string;
}

export interface UserData {
  user_id: string;
  telegram_id: number;
  username?: string;
  locale: string;
  first_name?: string;
  telegram_user?: TelegramUser;
}

export interface UseTelegramUserReturn {
  userId: string | null;
  telegramUser: TelegramUser | null;
  userData: UserData | null;
  loading: boolean;
  error: string | null;
  isTelegramWebApp: boolean;
  isAuthenticated: boolean;
}

/**
 * Hook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è user_id –∏–∑ Telegram WebApp
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç Telegram WebApp
 * - –ü–æ–ª—É—á–∞–µ—Ç telegram_id –∏–∑ window.Telegram.WebApp.user.id
 * - –ù–∞—Ö–æ–¥–∏—Ç user_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
 * - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * - –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ localStorage
 * 
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
 */
export const useTelegramUser = (): UseTelegramUserReturn => {
  const [userId, setUserId] = useState<string | null>(null);
  const [telegramUser, setTelegramUser] = useState<TelegramUser | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false);

  useEffect(() => {
    const initializeUser = async () => {
      try {
        setLoading(true);
        setError(null);

        console.log('üöÄ Initializing Telegram user...');
        console.log('üîç window.Telegram:', window.Telegram);
        console.log('üîç window.Telegram?.WebApp:', window.Telegram?.WebApp);
        console.log('üîç window.location:', window.location);
        console.log('üîç window.location.origin:', window.location.origin);
        console.log('üîç navigator.userAgent:', navigator.userAgent);

        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú HTTPS –ü–†–û–í–ï–†–ö–£ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        const isHttps = window.location.protocol === 'https:';
        console.log('üîç Protocol:', window.location.protocol, 'HTTPS:', isHttps);
        console.log('‚ö†Ô∏è HTTPS check disabled for debugging');
        
        // if (!isHttps) {
        //   console.log('‚ùå Not HTTPS - Telegram WebApp requires HTTPS');
        //   setError('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ HTTPS (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cloudflare URL)');
        //   setIsTelegramWebApp(false);
        //   return;
        // }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram WebApp
        const tgWebApp = window.Telegram?.WebApp;
        const tgUser = tgWebApp?.user || tgWebApp?.initDataUnsafe?.user;
        
        console.log('üîç Telegram WebApp check:');
        console.log('- window.Telegram exists:', !!window.Telegram);
        console.log('- tgWebApp exists:', !!tgWebApp);
        console.log('- tgUser exists:', !!tgUser);
        console.log('- tgUser type:', typeof tgUser);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üîç Debug info:');
        console.log('- window.Telegram:', window.Telegram);
        console.log('- tgWebApp:', tgWebApp);
        console.log('- tgUser:', tgUser);
        console.log('- Current URL:', window.location.href);
        console.log('- User Agent:', navigator.userAgent);
        
        if (tgWebApp && tgUser) {
          console.log('üöÄ Telegram WebApp detected:', tgUser);
          setIsTelegramWebApp(true);
            setTelegramUser(tgUser || null);

          // –ö—ç—à –æ—Ç–∫–ª—é—á–µ–Ω - –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram

          // –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
          console.log('üîÑ Fetching user data for telegram_id:', tgUser.id);
        console.log('üîç tgUser data:', tgUser);
        console.log('üîç tgUser.first_name:', tgUser.first_name);
        console.log('üîç tgUser.username:', tgUser.username);
        console.log('üîç tgUser.id:', tgUser.id);
        console.log('üîç tgUser keys:', Object.keys(tgUser));
        console.log('üîç tgUser full object:', JSON.stringify(tgUser, null, 2));
          
          const response = await fetch(`/api/users/by-telegram-id/${tgUser.id}`, {
            headers: {
              'X-Telegram-User-Data': JSON.stringify(tgUser)
            }
          });
          const data = await response.json();

          if (data.status === 'success') {
            const userInfo: UserData = {
              user_id: data.data.user_id,
              telegram_id: data.data.telegram_id,
              username: data.data.username,
              locale: data.data.locale,
              first_name: data.data.first_name,
              telegram_user: tgUser
            };

            console.log('‚úÖ User data fetched successfully:', userInfo);
            
            setUserData(userInfo);
            setUserId(userInfo.user_id);
            
            // –ö—ç—à –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            
          } else {
            console.error('‚ùå Failed to fetch user data:', data.message);
            // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorMessage = data.message?.includes('Database') ? 
              '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' :
              data.message || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            setError(errorMessage);
          }

        } else {
          console.log('üåê Not running in Telegram WebApp - using fallback');
          console.log('‚ùå REASON: window.Telegram?.WebApp is:', window.Telegram?.WebApp);
          console.log('‚ùå REASON: tgWebApp is:', tgWebApp);
          console.log('‚ùå REASON: tgUser is:', tgUser);
          setIsTelegramWebApp(false);
          
          // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          setError('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram WebApp');
        }

      } catch (err) {
        console.error('‚ùå Error initializing Telegram user:', err);
        setError(err instanceof Error ? err.message : 'Unknown error');
        
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        console.log('‚ùå No fallback user - showing error to user');
        
      } finally {
        setLoading(false);
      }
    };

    initializeUser();
  }, []);

  const isAuthenticated = Boolean(userId && userData);

  return {
    userId,
    telegramUser,
    userData,
    loading,
    error,
    isTelegramWebApp,
    isAuthenticated
  };
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const clearTelegramUserCache = (telegramId?: number) => {
  if (telegramId) {
    localStorage.removeItem(`telegram_user_${telegramId}`);
  } else {
    // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('telegram_user_')) {
        localStorage.removeItem(key);
      }
    });
  }
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const refreshTelegramUser = async (telegramId: number): Promise<UserData | null> => {
  try {
    const response = await fetch(`/api/users/by-telegram-id/${telegramId}`);
    const data = await response.json();

    if (data.status === 'success') {
      const userInfo: UserData = {
        user_id: data.data.user_id,
        telegram_id: data.data.telegram_id,
        username: data.data.username,
        locale: data.data.locale,
        first_name: data.data.first_name,
        telegram_user: window.Telegram?.WebApp?.user || window.Telegram?.WebApp?.initDataUnsafe?.user
      };

      // –ö—ç—à –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

      return userInfo;
    }
    
    return null;
  } catch (error) {
    console.error('Error refreshing user data:', error);
    return null;
  }
};
