import { useState, useEffect } from 'react';

export interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
  photo_url?: string;
}

export interface UserData {
  user_id: string;
  telegram_id: number;
  username?: string;
  locale: string;
  telegram_user?: TelegramUser;
}

export interface UseTelegramUserReturn {
  userId: string | null;
  telegramUser: TelegramUser | null;
  userData: UserData | null;
  loading: boolean;
  error: string | null;
  isTelegramWebApp: boolean;
  isAuthenticated: boolean;
}

/**
 * Hook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è user_id –∏–∑ Telegram WebApp
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç Telegram WebApp
 * - –ü–æ–ª—É—á–∞–µ—Ç telegram_id –∏–∑ window.Telegram.WebApp.user.id
 * - –ù–∞—Ö–æ–¥–∏—Ç user_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
 * - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * - –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ localStorage
 * 
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
 */
export const useTelegramUser = (): UseTelegramUserReturn => {
  const [userId, setUserId] = useState<string | null>(null);
  const [telegramUser, setTelegramUser] = useState<TelegramUser | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false);

  useEffect(() => {
    const initializeUser = async () => {
      try {
        setLoading(true);
        setError(null);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram WebApp
        const tgWebApp = window.Telegram?.WebApp;
        const tgUser = tgWebApp?.user || tgWebApp?.initDataUnsafe?.user;
        
        if (tgWebApp && tgUser) {
          console.log('üöÄ Telegram WebApp detected:', tgUser);
          setIsTelegramWebApp(true);
            setTelegramUser(tgUser || null);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ localStorage
          const cacheKey = `telegram_user_${tgUser.id}`;
          const cachedData = localStorage.getItem(cacheKey);
          
          if (cachedData) {
            try {
              const parsedCache = JSON.parse(cachedData);
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
              if (Date.now() - parsedCache.timestamp < 3600000) {
                console.log('‚úÖ Using cached user data:', parsedCache.data);
                setUserData(parsedCache.data);
                setUserId(parsedCache.data.user_id);
                setLoading(false);
                return;
              }
            } catch (e) {
              console.warn('‚ö†Ô∏è Invalid cache data, fetching fresh data');
            }
          }

          // –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
          console.log('üîÑ Fetching user data for telegram_id:', tgUser.id);
          
          const response = await fetch(`/api/users/by-telegram-id/${tgUser.id}`);
          const data = await response.json();

          if (data.status === 'success') {
            const userInfo: UserData = {
              user_id: data.data.user_id,
              telegram_id: data.data.telegram_id,
              username: data.data.username,
              locale: data.data.locale,
              telegram_user: tgUser
            };

            console.log('‚úÖ User data fetched successfully:', userInfo);
            
            setUserData(userInfo);
            setUserId(userInfo.user_id);
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            localStorage.setItem(cacheKey, JSON.stringify({
              data: userInfo,
              timestamp: Date.now()
            }));
            
          } else {
            console.error('‚ùå Failed to fetch user data:', data.message);
            setError(data.message || 'Failed to authenticate user');
          }

        } else {
          console.log('üåê Not running in Telegram WebApp - using fallback');
          setIsTelegramWebApp(false);
          
          // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const fallbackUser: UserData = {
            user_id: 'f7d38911-4e62-4012-a9bf-2aaa03483497', // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            telegram_id: 123,
            username: 'demo_user',
            locale: 'ru',
            telegram_user: {
              id: 123,
              first_name: 'Demo',
              username: 'demo_user',
              language_code: 'ru'
            }
          };

          console.log('üîÑ Using fallback user data:', fallbackUser);
          setUserData(fallbackUser);
          setUserId(fallbackUser.user_id);
          setTelegramUser(fallbackUser.telegram_user || null);
        }

      } catch (err) {
        console.error('‚ùå Error initializing Telegram user:', err);
        setError(err instanceof Error ? err.message : 'Unknown error');
        
        // Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const fallbackUser: UserData = {
          user_id: 'f7d38911-4e62-4012-a9bf-2aaa03483497',
          telegram_id: 123,
          username: 'demo_user',
          locale: 'ru',
          telegram_user: {
            id: 123,
            first_name: 'Demo',
            username: 'demo_user',
            language_code: 'ru'
          }
        };
        
        setUserData(fallbackUser);
        setUserId(fallbackUser.user_id);
        setTelegramUser(fallbackUser.telegram_user || null);
        
      } finally {
        setLoading(false);
      }
    };

    initializeUser();
  }, []);

  const isAuthenticated = Boolean(userId && userData);

  return {
    userId,
    telegramUser,
    userData,
    loading,
    error,
    isTelegramWebApp,
    isAuthenticated
  };
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const clearTelegramUserCache = (telegramId?: number) => {
  if (telegramId) {
    localStorage.removeItem(`telegram_user_${telegramId}`);
  } else {
    // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('telegram_user_')) {
        localStorage.removeItem(key);
      }
    });
  }
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const refreshTelegramUser = async (telegramId: number): Promise<UserData | null> => {
  try {
    const response = await fetch(`/api/users/by-telegram-id/${telegramId}`);
    const data = await response.json();

    if (data.status === 'success') {
      const userInfo: UserData = {
        user_id: data.data.user_id,
        telegram_id: data.data.telegram_id,
        username: data.data.username,
        locale: data.data.locale,
        telegram_user: window.Telegram?.WebApp?.user || window.Telegram?.WebApp?.initDataUnsafe?.user
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      const cacheKey = `telegram_user_${telegramId}`;
      localStorage.setItem(cacheKey, JSON.stringify({
        data: userInfo,
        timestamp: Date.now()
      }));

      return userInfo;
    }
    
    return null;
  } catch (error) {
    console.error('Error refreshing user data:', error);
    return null;
  }
};
