from typing import Union, Dict, Any, List, Optional
from html import escape
from datetime import datetime
import zoneinfo

from models.news import NewsItem
from models.event import EventItem


def format_date(
    dt: Optional[datetime], fmt: str = "%-d %b %Y, %H:%M", tz: str = "Europe/Warsaw"
) -> str:
    """
    Format datetime object to human-readable string with timezone support.

    Args:
        dt: datetime object to format (can be None)
        fmt: strftime format string (default: "%-d %b %Y, %H:%M")
        tz: target timezone (default: "Europe/Warsaw")

    Returns:
        Formatted date string or "‚Äî" if None
    """
    if not dt:
        return "‚Äî"

    try:
        # Convert to target timezone
        target_tz = zoneinfo.ZoneInfo(tz)
        localized_dt = dt.astimezone(target_tz)

        # Format with the provided format
        return localized_dt.strftime(fmt)
    except Exception:
        # Fallback to ISO format with minutes precision
        try:
            return dt.isoformat(timespec="minutes")
        except Exception:
            return "‚Äî"


def format_digest_output(data: Union[str, Dict[str, Any]], style: str = "analytical") -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
    - –ï—Å–ª–∏ style == "why_important" ‚Üí —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –≤ HTML —Å –±—É–ª–ª–µ—Ç–∞–º–∏.
    - –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å.
    """

    if style == "why_important":
        if isinstance(data, dict):
            summary = data.get("summary", "‚Äî")
            points: List[str] = data.get("why_important", [])
            formatted_points = "\n".join([f"{i+1}. {p}" for i, p in enumerate(points) if p])

            return (
                f"<b>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:</b>\n{summary}\n\n"
                f"<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:</b>\n{formatted_points if formatted_points else '‚Äî'}"
            )
        else:
            # fallback: –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –µ—ë
            return str(data)

    # –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return str(data).strip()


def format_news_item(item: NewsItem, index: Optional[int] = None) -> str:
    """
    HTML-–±–ª–æ–∫ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏, –¥–∞—Ç–æ–π –∏ —Å—Å—ã–ª–∫–æ–π.
    """
    title_raw = (item.title or item.source or "Untitled").strip()
    title = escape(title_raw)
    link = item.link or ""
    source = escape(item.source or "‚Äî")
    published = format_date(item.published_at)

    cred = float(item.credibility or 0.0)
    imp = float(item.importance or 0.0)
    cred_icon = "‚úÖ" if cred > 0.7 else "‚ö†Ô∏è" if cred > 0.4 else "‚ùå"
    imp_icon = "üî•" if imp > 0.7 else "‚ö°" if imp > 0.4 else "üí§"

    summary = (item.content or "").strip()
    if len(summary) > 260:
        summary = summary[:259] + "‚Ä¶"
    summary = escape(summary)

    prefix = f"{index}. " if index is not None else ""
    title_line = (
        f"<b>{prefix}<a href=\"{escape(link)}\">{title}</a></b>"
        if link
        else f"<b>{prefix}{title}</b>"
    )

    if summary:
        return (
            f"\n{title_line}\n"
            f"{source} ¬∑ {published}\n"
            f"{cred_icon} <b>Credibility:</b> {cred:.2f} ¬∑ "
            f"{imp_icon} <b>Importance:</b> {imp:.2f}\n"
            f"‚Äî {summary}"
        )
    return (
        f"\n{title_line}\n"
        f"{source} ¬∑ {published}\n"
        f"{cred_icon} <b>Credibility:</b> {cred:.2f} ¬∑ "
        f"{imp_icon} <b>Importance:</b> {imp:.2f}"
    )


def format_news(
    news_list: List[NewsItem], limit: Optional[int] = None, with_header: bool = True
) -> str:
    """
    –ü–æ–ª–Ω—ã–π HTML-–¥–∞–π–¥–∂–µ—Å—Ç: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    if not news_list:
        if with_header:
            return "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."
        return "–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."
    items = news_list[:limit] if limit else news_list
    lines: List[str] = ["üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>"] if with_header else []
    for idx, it in enumerate(items, start=1):
        lines.append(format_news_item(it, index=idx))
    text = "\n".join(lines)
    return text if len(text) <= 4000 else text[:3999] + "‚Ä¶"


def format_ai_fallback() -> str:
    """
    –ë–ª–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ¬´–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ¬ª, –µ—Å–ª–∏ LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—É–Ω–∫—Ç–æ–≤.
    """
    return (
        "\n\n<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:</b>\n"
        "‚Äî –°–æ–±—ã—Ç–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫\n"
        "‚Äî –í–∞–∂–Ω–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤\n"
        "‚Äî –ú–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–æ–º–ø–∞–Ω–∏–π"
    )


def format_news_items(news: List[NewsItem], limit: int = 5, min_importance: float = 0.4) -> str:
    """
    HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ NewsItem –¥–ª—è Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏: title, source, link, published_at_fmt, credibility, importance, content.
    """
    if not news:
        return "‚ö†Ô∏è No fresh news"

    filtered = [n for n in news if float(n.importance or 0.0) >= float(min_importance)]
    if not filtered:
        return "‚ö†Ô∏è No important news today"

    lines: List[str] = ["üì∞ <b>Top news</b>"]
    for i, item in enumerate(filtered[:limit], start=1):
        title_raw = (item.title or item.source or "Untitled").strip()
        title = escape(title_raw)
        link = item.link or ""
        source = escape(item.source or "‚Äî")
        published = format_date(item.published_at)

        cred = float(item.credibility or 0.0)
        imp = float(item.importance or 0.0)
        cred_icon = "‚úÖ" if cred > 0.7 else "‚ö†Ô∏è" if cred > 0.4 else "‚ùå"
        imp_icon = "üî•" if imp > 0.7 else "‚ö°" if imp > 0.4 else "üí§"

        summary = (item.content or "").strip()
        if len(summary) > 260:
            summary = summary[:259] + "‚Ä¶"
        summary = escape(summary)

        title_line = (
            f"<b>{i}. <a href=\"{escape(link)}\">{title}</a></b>"
            if link
            else f"<b>{i}. {title}</b>"
        )

        if summary:
            lines.append(
                f"\n{title_line}\n"
                f"{source} ¬∑ {published}\n"
                f"{cred_icon} <b>Credibility:</b> {cred:.2f} ¬∑ "
                f"{imp_icon} <b>Importance:</b> {imp:.2f}\n"
                f"‚Äî {summary}"
            )
        else:
            lines.append(
                f"\n{title_line}\n"
                f"{source} ¬∑ {published}\n"
                f"{cred_icon} <b>Credibility:</b> {cred:.2f} ¬∑ "
                f"{imp_icon} <b>Importance:</b> {imp:.2f}"
            )

    text = "\n".join(lines)
    return text if len(text) <= 4000 else text[:3999] + "‚Ä¶"


def format_event_items(events: List[EventItem], limit: int = 5) -> str:
    """
    HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ EventItem –¥–ª—è Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏: event_time_fmt, country/currency, title, importance, fact/forecast/previous.
    """
    if not events:
        return "‚ö†Ô∏è No upcoming events"

    lines: List[str] = ["üìÖ <b>Upcoming events</b>"]
    for i, ev in enumerate(events[:limit], start=1):
        when = ev.event_time_fmt or "‚Äî"
        country = escape(ev.country or "")
        currency = escape(ev.currency or "")
        title = escape(ev.title or "‚Äî")

        importance = int(ev.importance or 0)
        stars = "‚≠ê" * max(1, min(3, importance))
        importance_text = "Low" if importance <= 1 else "Medium" if importance == 2 else "High"

        fact = escape(ev.fact or "‚Äî")
        forecast = escape(ev.forecast or "‚Äî")
        previous = escape(ev.previous or "‚Äî")

        lines.append(
            f"\n<b>{i}. {title}</b>\n"
            f"{when} ¬∑ {country} {currency}\n"
            f"{stars} <b>Importance:</b> {importance_text}\n"
            f"üìä <b>Actual:</b> {fact} ¬∑ <b>Forecast:</b> {forecast} ¬∑ <b>Previous:</b> {previous}"
        )

    text = "\n".join(lines)
    return text if len(text) <= 4000 else text[:3999] + "‚Ä¶"
