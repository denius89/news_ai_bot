"""
–°–∏—Å—Ç–µ–º–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º—ë–Ω –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ,
–≤–∫–ª—é—á–∞—è —ç–º–æ–¥–∑–∏, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, RTL —Ç–µ–∫—Å—Ç –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã.
"""

import re
import unicodedata
import logging
from typing import Optional

logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è emoji-only –∏–º—ë–Ω
EMOJI_ONLY_PATTERN = re.compile(r'^[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF\U00002600-\U000026FF\U00002700-\U000027BF\s]+$')

# –ù–µ–≤–∏–¥–∏–º—ã–µ –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
INVISIBLE_CHARS = {
    '\u200b',  # Zero Width Space
    '\u200c',  # Zero Width Non-Joiner
    '\u200d',  # Zero Width Joiner
    '\u202a',  # Left-to-Right Embedding
    '\u202b',  # Right-to-Left Embedding
    '\u202c',  # Pop Directional Formatting
    '\u202d',  # Left-to-Right Override
    '\u202e',  # Right-to-Left Override
    '\u2060',  # Word Joiner
    '\ufeff',  # Zero Width No-Break Space
}

# –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ–±—ã—á–Ω—ã–µ ASCII
UNICODE_STYLE_MAP = {
    # Mathematical Bold (ùî∏-ùîæ)
    '\U0001D400': 'A', '\U0001D401': 'B', '\U0001D402': 'C', '\U0001D403': 'D', '\U0001D404': 'E', '\U0001D405': 'F', '\U0001D406': 'G',
    '\U0001D407': 'H', '\U0001D408': 'I', '\U0001D409': 'J', '\U0001D40A': 'K', '\U0001D40B': 'L', '\U0001D40C': 'M', '\U0001D40D': 'N',
    '\U0001D40E': 'O', '\U0001D40F': 'P', '\U0001D410': 'Q', '\U0001D411': 'R', '\U0001D412': 'S', '\U0001D413': 'T', '\U0001D414': 'U',
    '\U0001D415': 'V', '\U0001D416': 'W', '\U0001D417': 'X', '\U0001D418': 'Y', '\U0001D419': 'Z',
    # Mathematical Bold lowercase (ùïí-ùï´)
    '\U0001D41A': 'a', '\U0001D41B': 'b', '\U0001D41C': 'c', '\U0001D41D': 'd', '\U0001D41E': 'e', '\U0001D41F': 'f', '\U0001D420': 'g',
    '\U0001D421': 'h', '\U0001D422': 'i', '\U0001D423': 'j', '\U0001D424': 'k', '\U0001D425': 'l', '\U0001D426': 'm', '\U0001D427': 'n',
    '\U0001D428': 'o', '\U0001D429': 'p', '\U0001D42A': 'q', '\U0001D42B': 'r', '\U0001D42C': 's', '\U0001D42D': 't', '\U0001D42E': 'u',
    '\U0001D42F': 'v', '\U0001D430': 'w', '\U0001D431': 'x', '\U0001D432': 'y', '\U0001D433': 'z',
    # Mathematical Double-Struck (ùî∏-ùîæ)
    '\U0001D538': 'A', '\U0001D539': 'B', '\U0001D53A': 'C', '\U0001D53B': 'D', '\U0001D53C': 'E', '\U0001D53D': 'F', '\U0001D53E': 'G',
    '\U0001D53F': 'H', '\U0001D540': 'I', '\U0001D541': 'J', '\U0001D542': 'K', '\U0001D543': 'L', '\U0001D544': 'M', '\U0001D545': 'N',
    '\U0001D546': 'O', '\U0001D547': 'P', '\U0001D548': 'Q', '\U0001D549': 'R', '\U0001D54A': 'S', '\U0001D54B': 'T', '\U0001D54C': 'U',
    '\U0001D54D': 'V', '\U0001D54E': 'W', '\U0001D54F': 'X', '\U0001D550': 'Y', '\U0001D551': 'Z',
    '\U0001D552': 'a', '\U0001D553': 'b', '\U0001D554': 'c', '\U0001D555': 'd', '\U0001D556': 'e', '\U0001D557': 'f', '\U0001D558': 'g',
    '\U0001D559': 'h', '\U0001D55A': 'i', '\U0001D55B': 'j', '\U0001D55C': 'k', '\U0001D55D': 'l', '\U0001D55E': 'm', '\U0001D55F': 'n',
    '\U0001D560': 'o', '\U0001D561': 'p', '\U0001D562': 'q', '\U0001D563': 'r', '\U0001D564': 's', '\U0001D565': 't', '\U0001D566': 'u',
    '\U0001D567': 'v', '\U0001D568': 'w', '\U0001D569': 'x', '\U0001D56A': 'y', '\U0001D56B': 'z',
}

# –ú–∞–ø–ø–∏–Ω–≥ –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã—Ö –∏–º—ë–Ω (–¥–≤–æ–π–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8)
CORRUPTION_MAP = {
    '√ê√ê¬∞√ê¬Ω': '–ò–≤–∞–Ω',
    '√ê√ê¬∞√ë√ê¬∞': '–ú–∞—à–∞',
    '√ê√ê¬ª√ê¬µ√ê¬∫√ë√ê¬µ√ê¬π': '–ê–ª–µ–∫—Å–µ–π',
    # –î–≤–∞–∂–¥—ã –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
    '√É\x90√É\x90√Ç¬∞√É\x90√Ç¬Ω': '–ò–≤–∞–Ω',
    '√É√ê√É√ê√Ç¬∞√É√ê√Ç¬Ω': '–ò–≤–∞–Ω',
}


def normalize_user_name(raw_name: Optional[str], username: Optional[str], user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ, —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è UI –∏ –ª–æ–≥–æ–≤.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:
    1. –ï—Å–ª–∏ raw_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @username –∏–ª–∏ User #<user_id>
    2. –£–¥–∞–ª–∏—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∏–∑ —ç–º–æ–¥–∑–∏/—Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –µ—Å–ª–∏ –¥–∞ ‚Üí fallback
    4. –û–±—Ä–µ–∑–∞—Ç—å –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤
    5. –í–µ—Ä–Ω—É—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è (display_name)
    
    Args:
        raw_name: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        username: Telegram username (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        user_id: Telegram user ID –¥–ª—è fallback
        
    Returns:
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ raw_name
        if not raw_name or not raw_name.strip():
            return _get_fallback_name(username, user_id)
        
        # –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        processed_name = _fix_corrupted_encoding(raw_name)
        
        # –®–∞–≥ 3: –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        cleaned_name = _remove_invisible_chars(processed_name)
        
        # –®–∞–≥ 4: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã
        normalized_name = _convert_styled_unicode(cleaned_name)
        
        # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ emoji-only
        if _is_emoji_only(normalized_name):
            logger.debug(f"Emoji-only name detected: '{normalized_name}', using fallback")
            return _get_fallback_name(username, user_id)
        
        # –®–∞–≥ 6: –û–±—Ä–µ–∑–∞–µ–º –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–ª–æ–≤
        final_name = _truncate_preserving_words(normalized_name, 64)
        
        # –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
        if not final_name.strip():
            return _get_fallback_name(username, user_id)
        
        logger.debug(f"Normalized name: '{raw_name}' -> '{final_name}'")
        return final_name.strip()
        
    except Exception as e:
        logger.error(f"Error normalizing name '{raw_name}': {e}")
        return _get_fallback_name(username, user_id)


def _get_fallback_name(username: Optional[str], user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∏–º—è –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
    if username and username.strip():
        return f"@{username.strip()}"
    return f"User #{user_id}"


def _fix_corrupted_encoding(name: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
    if name in CORRUPTION_MAP:
        return CORRUPTION_MAP[name]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–≤–æ–π–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
    try:
        if '√ê' in name and len(name) > 0:
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ latin-1, –∑–∞—Ç–µ–º –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ UTF-8
            fixed = name.encode('latin-1').decode('utf-8')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
            if any('\u0400' <= c <= '\u04FF' for c in fixed):
                return fixed
    except (UnicodeDecodeError, UnicodeEncodeError):
        pass
    
    return name


def _remove_invisible_chars(name: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ Unicode —Å–∏–º–≤–æ–ª—ã."""
    result = []
    
    for char in name:
        # –£–¥–∞–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if char in INVISIBLE_CHARS:
            continue
            
        # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è C)
        if unicodedata.category(char).startswith('C'):
            continue
            
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        if char.isspace() and len(result) > 0 and result[-1].isspace():
            continue
            
        result.append(char)
    
    return ''.join(result)


def _convert_styled_unicode(name: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã –≤ –æ–±—ã—á–Ω—ã–µ ASCII."""
    result = []
    
    for char in name:
        if char in UNICODE_STYLE_MAP:
            result.append(UNICODE_STYLE_MAP[char])
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª
            normalized = unicodedata.normalize('NFKD', char)
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏–ª–∏ ASCII —Å–∏–º–≤–æ–ª
            if len(normalized) == 1 and ord(normalized) < 128:
                result.append(normalized)
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                result.append(char)
    
    return ''.join(result)


def _is_emoji_only(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏–º—è —Ç–æ–ª—å–∫–æ –∏–∑ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤."""
    if not name.strip():
        return True
    
    return bool(EMOJI_ONLY_PATTERN.match(name.strip()))


def _truncate_preserving_words(text: str, max_length: int) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ max_length —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–ª–æ–≤."""
    if len(text) <= max_length:
        return text
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ max_length
    truncated = text[:max_length]
    last_space = truncated.rfind(' ')
    
    if last_space > max_length * 0.7:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫–æ–Ω—Ü–∞
        return truncated[:last_space]
    
    return truncated


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def is_safe_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        normalized = normalize_user_name(name, None, 0)
        return normalized != f"User #0"  # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
    except Exception:
        return False


def get_name_display_variant(name: str, username: Optional[str] = None, user_id: int = 0) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è UI."""
    return normalize_user_name(name, username, user_id)
