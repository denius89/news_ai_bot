"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.
–ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ RSS.
"""

import logging
import yaml
from pathlib import Path
from typing import Dict, List, Optional, Tuple

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
SOURCES_FILE = Path(__file__).parent.parent / "config" / "data" / "sources.yaml"

# –ù–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ sources.yaml)
NEWS_CATEGORIES = {"crypto", "sports", "markets", "tech", "world"}

# –ö—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
_sources_cache: Optional[Dict] = None
_cache_timestamp: Optional[float] = None


def _load_sources() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    global _sources_cache, _cache_timestamp

    try:
        file_mtime = SOURCES_FILE.stat().st_mtime
        if _sources_cache is None or _cache_timestamp != file_mtime:
            with open(SOURCES_FILE, "r", encoding="utf-8") as f:
                _sources_cache = yaml.safe_load(f)
            _cache_timestamp = file_mtime
            logger.info("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ %s", SOURCES_FILE)

        return _sources_cache or {}
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %s", e)
        return {}


def get_categories() -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    sources = _load_sources()
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π, –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    return [cat for cat in sources.keys() if cat in NEWS_CATEGORIES]


def get_subcategories(category: str) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        category: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    sources = _load_sources()
    if category not in sources:
        return []

    return list(sources[category].keys())


def get_icon(category: str, subcategory: str) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        category: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        Optional[str]: –ö–ª—é—á –∏–∫–æ–Ω–∫–∏ –∏–ª–∏ None
    """
    sources = _load_sources()
    if category not in sources or subcategory not in sources[category]:
        return None

    return sources[category][subcategory].get("icon")


def get_sources(category: str, subcategory: str) -> List[Dict[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        category: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ–ª—è–º–∏ name –∏ url
    """
    sources = _load_sources()
    if category not in sources or subcategory not in sources[category]:
        return []

    return sources[category][subcategory].get("sources", [])


def get_all_sources() -> List[Tuple[str, str, str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π.

    Returns:
        List[Tuple[str, str, str, str]]: –°–ø–∏—Å–æ–∫ (category, subcategory, name, url)
    """
    all_sources = []
    sources = _load_sources()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    for category, subcategories in sources.items():
        if category not in NEWS_CATEGORIES:
            continue

        for subcategory, data in subcategories.items():
            sources_list = data.get("sources", [])
            for source in sources_list:
                all_sources.append((category, subcategory, source.get("name", ""), source.get("url", "")))

    return all_sources


def get_category_structure() -> Dict[str, Dict[str, Dict]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–∫–æ–Ω–∫–∞–º–∏.

    Returns:
        Dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ {category: {subcategory: {icon: str, sources: [...]}}}
    """
    sources = _load_sources()
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π, –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    return {cat: data for cat, data in sources.items() if cat in NEWS_CATEGORIES}


def get_emoji_icon(category: str, subcategory: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –∏–∫–æ–Ω–∫—É –¥–ª—è Telegram –±–æ—Ç–∞.

    Args:
        category: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        str: Emoji –∏–∫–æ–Ω–∫–∞
    """
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_icons = {
        "crypto": "‚Çø",
        "sports": "‚öΩ",
        "markets": "üìà",
        "tech": "ü§ñ",
        "world": "üåç",
    }

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞—è)
    if not subcategory:
        return category_icons.get(category, "üì∞")

    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    icon_map = {
        # Crypto
        "btc": "‚Çø",
        "bitcoin": "‚Çø",
        "eth": "Œû",
        "ethereum": "Œû",
        "altcoin": "ü™ô",
        "altcoins": "ü™ô",
        "defi": "üè¶",
        "nft": "üñºÔ∏è",
        "gamefi": "üéÆ",
        "exchange": "üè¢",
        "exchanges": "üè¢",
        "regulation": "‚öñÔ∏è",
        "security": "üîí",
        "market_trends": "üìä",
        # Sports - Football leagues
        "football": "‚öΩ",
        "champions_league": "‚öΩ",
        "europa_league": "‚öΩ",
        "conference_league": "‚öΩ",
        "premier_league": "‚öΩ",
        "bundesliga": "‚öΩ",
        "la_liga": "‚öΩ",
        "serie_a": "‚öΩ",
        "ligue_1": "‚öΩ",
        "world_cup": "‚öΩ",
        # Sports - Other sports
        "basketball": "üèÄ",
        "tennis": "üéæ",
        "hockey": "üèí",
        "ufc": "ü•ä",
        "ufc_mma": "ü•ä",
        "cricket": "üèè",
        "baseball": "‚öæ",
        "american_football": "üèà",
        "rugby": "üèâ",
        "volleyball": "üèê",
        "handball": "ü§æ",
        "badminton": "üè∏",
        "table_tennis": "üèì",
        # Sports - Esports
        "esports": "üéÆ",
        "dota2": "üéÆ",
        "csgo": "üî´",
        "lol": "üéÆ",
        "valorant": "üéÆ",
        "overwatch": "üéÆ",
        "r6siege": "üéÆ",
        "sports_other": "üèÜ",
        "other": "üèÜ",
        # Markets
        "stocks": "üìà",
        "bonds": "üìä",
        "forex": "üí±",
        "commodities": "üåæ",
        "ipos": "üìã",
        "earnings": "üí∞",
        "dividends": "üí∏",
        "splits": "‚úÇÔ∏è",
        "rates": "üìä",
        "etf": "üìä",
        "funds_etfs": "üìä",
        "economic_data": "üìä",
        "central_banks": "üèõÔ∏è",
        # Tech
        "ai": "ü§ñ",
        "bigtech": "üíª",
        "hardware": "üîß",
        "software": "üíø",
        "cybersecurity": "üõ°Ô∏è",
        "blockchain": "‚õìÔ∏è",
        "blockchain_tech": "‚õìÔ∏è",
        "startups": "üöÄ",
        "conferences": "üé§",
        "conference": "üé§",
        "release": "üöÄ",
        "launch": "üöÄ",
        "update": "üîÑ",
        # World
        "conflicts": "‚ö†Ô∏è",
        "elections": "üó≥Ô∏è",
        "energy": "‚ö°",
        "geopolitics": "üåç",
        "diplomacy": "ü§ù",
        "sanctions": "üö´",
        "organizations": "üèõÔ∏è",
        "migration": "üë•",
        "climate": "üå±",
        "global_risks": "‚ö†Ô∏è",
    }

    icon_key = get_icon(category, subcategory)
    return icon_map.get(icon_key, category_icons.get(category, "üì∞"))


def validate_sources() -> Tuple[bool, List[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

    Returns:
        Tuple[bool, List[str]]: (is_valid, list_of_errors)
    """
    errors = []
    sources = _load_sources()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    filtered_sources = {cat: data for cat, data in sources.items() if cat in NEWS_CATEGORIES}

    if not filtered_sources:
        errors.append("–§–∞–π–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False, errors

    for category, subcategories in filtered_sources.items():
        if not isinstance(subcategories, dict):
            errors.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            continue

        for subcategory, data in subcategories.items():
            if not isinstance(data, dict):
                errors.append(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}.{subcategory}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏
            if "icon" not in data:
                errors.append(f"–£ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}.{subcategory}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∫–æ–Ω–∫–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            sources_list = data.get("sources", [])
            if not isinstance(sources_list, list):
                errors.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ '{category}.{subcategory}' –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                continue

            for i, source in enumerate(sources_list):
                if not isinstance(source, dict):
                    errors.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #{i+1} –≤ '{category}.{subcategory}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
                    continue

                if "name" not in source:
                    errors.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #{i+1} –≤ '{category}.{subcategory}' –±–µ–∑ –∏–º–µ–Ω–∏")
                if "url" not in source:
                    errors.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #{i+1} –≤ '{category}.{subcategory}' –±–µ–∑ URL")

    return len(errors) == 0, errors


def get_statistics() -> Dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.

    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    sources = _load_sources()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    filtered_sources = {cat: data for cat, data in sources.items() if cat in NEWS_CATEGORIES}

    total_categories = len(filtered_sources)
    total_subcategories = 0
    total_sources = 0

    for category, subcategories in filtered_sources.items():
        total_subcategories += len(subcategories)
        for subcategory, data in subcategories.items():
            sources_list = data.get("sources", [])
            total_sources += len(sources_list)

    return {
        "categories": total_categories,
        "subcategories": total_subcategories,
        "sources": total_sources,
        "avg_sources_per_subcategory": (
            round(total_sources / total_subcategories, 1) if total_subcategories > 0 else 0
        ),
    }


def reload_sources() -> bool:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞.

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ
    """
    global _sources_cache, _cache_timestamp
    _sources_cache = None
    _cache_timestamp = None

    try:
        _load_sources()
        return True
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %s", e)
        return False
