"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.
"""

import logging
from typing import List, Tuple, Optional

from repositories.news_repository import NewsRepository
from digests.generator import generate_digest
from database.db_models import supabase

logger = logging.getLogger(__name__)


class DigestService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏."""

    def __init__(self, news_repo: NewsRepository):
        self.news_repo = news_repo

    def build_daily_digest(
        self,
        limit: int = 10,
        style: str = "analytical",
        categories: Optional[List[str]] = None,
    ) -> Tuple[str, List[dict]]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (digest_text, news_items).
        """
        try:
            news = self.news_repo.get_recent_news(limit=limit, categories=categories)
            if not news:
                return "–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.", []

            # –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            lines = []
            for i, item in enumerate(news, 1):
                title = item.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                date = item.get("published_at_fmt", "‚Äî")
                link = item.get("link")
                if link:
                    lines.append(f'{i}. <b>{title}</b> [{date}] ‚Äî <a href="{link}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>')
                else:
                    lines.append(f"{i}. <b>{title}</b> [{date}]")

            digest_text = "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n" + "\n".join(lines)
            return digest_text, news

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: %s", e, exc_info=True)
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.", []

    def build_ai_digest(
        self,
        category: Optional[str],
        period: str,
        style: str,
        limit: int = 20,
    ) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç AI-–¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞.
        –ü–æ–∫–∞ period –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤).
        """
        try:
            digest_text = generate_digest(
                limit=limit,
                ai=True,
                category=category,
                style=style,
            )
            return digest_text
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞: %s", e, exc_info=True)
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞."


# --- Singleton –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
try:
    _default_service = DigestService(NewsRepository(supabase))
except Exception as e:
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DigestService —Å Supabase: %s", e)
    _default_service = None


def build_daily_digest(*args, **kwargs):
    if not _default_service:
        return "‚ö†Ô∏è DigestService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", []
    return _default_service.build_daily_digest(*args, **kwargs)


def build_ai_digest(*args, **kwargs):
    if not _default_service:
        return "‚ö†Ô∏è DigestService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    return _default_service.build_ai_digest(*args, **kwargs)


# --- ‚ö†Ô∏è Backward compatibility ---
def get_latest_news(limit: int = 10, categories: Optional[List[str]] = None):
    """
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –∫–æ–¥–∞.
    –ò—Å–ø–æ–ª—å–∑—É–π DigestService.news_repo.get_recent_news –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞.
    """
    if not _default_service:
        return []
    return _default_service.news_repo.get_recent_news(limit=limit, categories=categories)


__all__ = [
    "build_daily_digest",
    "build_ai_digest",
    "DigestService",
    "get_latest_news",  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
]
