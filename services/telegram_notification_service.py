"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
—á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º.
"""

import logging
from datetime import datetime
from typing import Optional
from aiogram import Bot, types
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config.settings import TELEGRAM_BOT_TOKEN
from database.db_models import get_user_notifications, mark_notification_read

logger = logging.getLogger(__name__)


class TelegramNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç."""

    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN) if TELEGRAM_BOT_TOKEN else None

    async def send_notification_via_bot(
        self, user_id: int, title: str, text: str, notification_id: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç.

        Args:
            user_id: Telegram user ID
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º"

        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self.bot:
            logger.error("‚ùå Telegram bot token not configured")
            return False

        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self._format_notification_message(title, text)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º"
            keyboard = None
            if notification_id:
                keyboard = self._create_mark_read_keyboard(notification_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=user_id, text=message_text, parse_mode="HTML", reply_markup=keyboard
            )

            logger.info(
                f"‚úÖ Notification sent to user {user_id}, notification_id: {notification_id}"
            )
            return True

        except TelegramForbiddenError:
            logger.warning(f"‚ö†Ô∏è User {user_id} blocked the bot or has privacy settings")
            return False
        except TelegramBadRequest as e:
            logger.error(f"‚ùå Telegram API error for user {user_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected error sending notification to user {user_id}: {e}")
            return False

    def _format_notification_message(self, title: str, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        current_time = datetime.now().strftime("%H:%M %d.%m")

        return f"<b>üîî {title}</b>\n\n" f"{text}\n\n" f"<i>üìÖ {current_time}</i>"

    def _create_mark_read_keyboard(self, notification_id: str) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º'."""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º", callback_data=f"mark_read:{notification_id}")
        return builder.as_markup()

    async def handle_mark_read_callback(
        self, query: types.CallbackQuery, notification_id: str
    ) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ.

        Args:
            query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
            success = await self._mark_notification_read_via_api(
                user_id=query.from_user.id, notification_id=notification_id
            )

            if success:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.edit_text(
                    query.message.text + "\n\n‚úÖ <b>–ü—Ä–æ—á–∏—Ç–∞–Ω–æ</b>", parse_mode="HTML"
                )
                await query.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
                logger.info(
                    f"‚úÖ Notification {notification_id} marked as read by user {query.from_user.id}"
                )
                return True
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º", show_alert=True)
                return False

        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
                await query.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
                return True
            else:
                logger.error(f"‚ùå Telegram API error: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
                return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected error handling mark_read callback: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            return False

    async def _mark_notification_read_via_api(self, user_id: int, notification_id: str) -> bool:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç API –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ.

        Args:
            user_id: Telegram user ID
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –ª–∏–±–æ –≤—ã–∑—ã–≤–∞—Ç—å API –Ω–∞–ø—Ä—è–º—É—é, –ª–∏–±–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            result = mark_notification_read(user_id=user_id, notification_id=notification_id)

            if result:
                logger.info(
                    f"‚úÖ API: Notification {notification_id} marked as read for user {user_id}"
                )
                return True
            else:
                logger.warning(
                    f"‚ö†Ô∏è API: Failed to mark notification {notification_id} as read for user {user_id}"
                )
                return False

        except Exception as e:
            logger.error(f"‚ùå API error marking notification {notification_id} as read: {e}")
            return False

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–æ—Ç–∞."""
        if self.bot:
            await self.bot.session.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_notification_service = TelegramNotificationService()
