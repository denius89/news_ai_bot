"""
–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –¥–æ—Å—Ç–∞–≤–∫—É
—á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (Telegram, WebApp).
"""

import logging
from typing import Optional
from database.db_models import create_user_notification
# from database.db_models import get_user_notifications  # TODO: implement
from services.telegram_notification_service import telegram_notification_service

logger = logging.getLogger(__name__)


class NotificationDeliveryService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    async def send_notification(
        self,
        user_id: int,
        title: str,
        content: str,
        category: str = "general",
        via_telegram: bool = False,
        via_webapp: bool = True,
    ) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            via_telegram: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —á–µ—Ä–µ–∑ Telegram
            via_webapp: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤ WebApp

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # 1. –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            notification_id = create_user_notification(
                user_id=user_id,
                title=title,
                content=content,
                category=category,
                read=False,
                via_telegram=via_telegram,
                via_webapp=via_webapp,
            )

            if not notification_id:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è user_id={user_id}")
                return None

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if via_telegram:
                telegram_success = await telegram_notification_service.send_notification_via_bot(
                    user_id=user_id, title=title, text=content, notification_id=notification_id
                )

                if telegram_success:
                    logger.info(
                        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –¥–ª—è user_id={user_id}"
                    )
                else:
                    logger.warning(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} —á–µ—Ä–µ–∑ Telegram –¥–ª—è user_id={user_id}"
                    )

            logger.info(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} —Å–æ–∑–¥–∞–Ω–æ –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}"
            )
            return notification_id

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return None

    async def send_bulk_notification(
        self,
        user_ids: list[int],
        title: str,
        content: str,
        category: str = "general",
        via_telegram: bool = False,
        via_webapp: bool = True,
    ) -> dict[str, int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

        Args:
            user_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            via_telegram: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —á–µ—Ä–µ–∑ Telegram
            via_webapp: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤ WebApp

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {"success": count, "failed": count}
        """
        results = {"success": 0, "failed": 0}

        for user_id in user_ids:
            notification_id = await self.send_notification(
                user_id=user_id,
                title=title,
                content=content,
                category=category,
                via_telegram=via_telegram,
                via_webapp=via_webapp,
            )

            if notification_id:
                results["success"] += 1
            else:
                results["failed"] += 1

        logger.info(
            f"üìä –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ={results['success']}, –æ—à–∏–±–æ–∫={results['failed']}"
        )
        return results


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_delivery_service = NotificationDeliveryService()
