"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.
"""

import logging
from typing import List, Tuple, Optional
import asyncio

from database.service import async_get_latest_news
from digests.generator import generate_digest
from models.news import NewsItem

logger = logging.getLogger(__name__)


class AsyncDigestService:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏."""

    async def build_daily_digest(
        self,
        limit: int = 10,
        style: str = "analytical",
        categories: Optional[List[str]] = None,
    ) -> Tuple[str, List[dict]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (digest_text, news_items).
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            news = await async_get_latest_news(limit=limit, categories=categories)
            if not news:
                return "DIGEST: –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.", []

            # –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            lines = []
            for i, item in enumerate(news, 1):
                title = item.get('title') or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                date = item.get('published_at_fmt') or "‚Äî"
                link = item.get('link')

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å
                importance = item.get('importance', 0)
                credibility = item.get('credibility', 0)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                metrics = ""
                if importance > 0:
                    importance_icon = (
                        "üî•" if importance > 0.7 else "‚ö†Ô∏è" if importance > 0.4 else "üì∞"
                    )
                    credibility_icon = (
                        "‚úÖ" if credibility > 0.7 else "‚ö†Ô∏è" if credibility > 0.4 else "‚ùå"
                    )
                    metrics = (
                        f" {importance_icon}{importance:.2f} {credibility_icon}{credibility:.2f}"
                    )

                line = f"{i}. {title}{metrics}"
                if link:
                    line += f"\n   üîó {link}"
                line += f"\n   üìÖ {date}"
                lines.append(line)

            digest_text = "\n\n".join(lines)
            return digest_text, news

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}", []

    async def build_ai_digest(
        self,
        limit: int = 5,
        categories: Optional[List[str]] = None,
        style: str = "analytical",
    ) -> str:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç AI-–¥–∞–π–¥–∂–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–º—Ç–æ–≤.
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è generate_digest
            category = None
            if categories and len(categories) == 1 and categories[0] != "all":
                category = categories[0]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π generate_digest —Å AI=True
            digest_text = await generate_digest(
                limit=limit,
                category=category,
                ai=True,  # –í–∫–ª—é—á–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑
                style=style
            )

            logger.info(f"Generated digest type: {type(digest_text)}")
            return digest_text

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ AI –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return f"ü§ñ –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
async_digest_service = AsyncDigestService()
