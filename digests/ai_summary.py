"""
digests/ai_summary.py
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-—Å–∞–º–º–∞—Ä–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
"""

import os
import json
import logging
from typing import List, Dict  # ‚úÖ —Ñ–∏–∫—Å: –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

from openai import OpenAI

logger = logging.getLogger("ai_summary")


def get_client() -> OpenAI:
    """–õ–µ–Ω–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise RuntimeError("‚ùå –ù–µ—Ç OPENAI_API_KEY, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –≤ .env")
    return OpenAI(api_key=api_key)


def generate_summary(news_list: List[Dict], max_tokens: int = 300) -> str:
    """–ö—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç (3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)"""
    if not news_list:
        return "–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."

    text_block = "\n".join(
        [
            f"- {item.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({item.get('source','‚Äî')}): {(item.get('content') or '')[:200]}..."
            for item in news_list[:10]
        ]
    )

    prompt = f"""
–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç (3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:

{text_block}

–§–æ—Ä–º–∞—Ç: —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤.
    """

    client = get_client()
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=max_tokens,
        temperature=0.6,
    )
    return response.choices[0].message.content.strip()


def generate_summary_why_important(news_item: Dict, max_tokens: int = 400) -> Dict:
    """–†–µ–∑—é–º–µ + ¬´–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ¬ª (–¥–æ 3 –ø—É–Ω–∫—Ç–æ–≤)"""
    title = news_item.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    content = news_item.get("content") or news_item.get("summary") or ""

    prompt = f"""
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π.
–î–∞–π JSON:
{{
  "summary": "–∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "why_important": ["–ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2", "–ø—É–Ω–∫—Ç 3"]
}}

–ù–æ–≤–æ—Å—Ç—å:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–¢–µ–∫—Å—Ç: {content}
"""

    client = get_client()
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.5,
        )
        data = json.loads(response.choices[0].message.content)
        return {
            "summary": data.get("summary") or title,
            "why_important": data.get("why_important", [])[:3],
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ AI-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {e}", exc_info=True)
        return {"summary": title, "why_important": []}


def generate_batch_summary(news_items: List[Dict], max_tokens: int = 1500) -> str:
    """
    Batch-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ —Å—Ç–∏–ª–µ FT/WSJ/ Economist.
    """
    if not news_items:
        return "–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–ª–æ–∫–∞ —Ñ–∞–∫—Ç–æ–≤
    text_block = "\n".join(
        [
            f"{i+1}. {item.get('title')}: {(item.get('content') or '')[:400]}"
            for i, item in enumerate(news_items)
        ]
    )

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–ª–æ–∫–∞ —Å—Å—ã–ª–æ–∫
    links_block = "\n".join(
        [f"- {item.get('title')}: {item.get('link')}" for item in news_items if item.get("link")]
    )

    prompt = f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ —É—Ä–æ–≤–Ω—è Financial Times, Wall Street Journal –∏–ª–∏ The Economist.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è.

üéØ –ü—Ä–∞–≤–∏–ª–∞ —Å—Ç–∏–ª—è:
- –¢–æ–Ω: –¥–µ–ª–æ–≤–∞—è –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è ‚Äî —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π, –Ω–æ –∂–∏–≤–æ–π.
- –ß–∏—Ç–∞—Ç–µ–ª—å: –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π, —Å–ª–µ–¥–∏—Ç –∑–∞ —Ä—ã–Ω–∫–∞–º–∏ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–æ–π, —Ü–µ–Ω–∏—Ç –≥–ª—É–±–∏–Ω—É –∞–Ω–∞–ª–∏–∑–∞.
- –ù–∞—á–∏–Ω–∞–π —Å —à–∏—Ä–æ–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å —Ä—ã–Ω–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è.
- –í—Å—Ç—Ä–∞–∏–≤–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –ø—Ä–∏–º–µ—Ä—ã, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É.
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ—Ö–æ–¥—ã (¬´–æ–¥–Ω–∞–∫–æ¬ª, ¬´–≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è¬ª, ¬´–Ω–∞ —Ñ–æ–Ω–µ —ç—Ç–æ–≥–æ¬ª) –¥–ª—è —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
- –î–µ–ª–∞–π –≤—ã–≤–æ–¥—ã: —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è —Ä—ã–Ω–∫–æ–≤, –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∏.
- –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤—Å—Ç–∞–≤–ª—è–π –æ—Ä–≥–∞–Ω–∏—á–Ω–æ —á–µ—Ä–µ–∑ HTML: `<a href="URL">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>`.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:
  - `<b>` ‚Äî –∂–∏—Ä–Ω—ã–π
  - `<i>` ‚Äî –∫—É—Ä—Å–∏–≤
  - `<a href="...">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>` ‚Äî —Å—Å—ã–ª–∫–∏
  - –ù–∏–∫–∞–∫–∏—Ö `###`, `**`, `_` –∏–ª–∏ Markdown.

üìë –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –í–≤–æ–¥–Ω—ã–π –∞–±–∑–∞—Ü ‚Äî –æ–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –∏ –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞.
2. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (2‚Äì3 –∞–±–∑–∞—Ü–∞) ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã + –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–∏–º–∏.
3. –ê–±–∑–∞—Ü ¬´–ü—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è¬ª.
4. –í –∫–æ–Ω—Ü–µ ‚Äî –±–ª–æ–∫ ¬´–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ¬ª (3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).
‚ùó –ü–æ—Å–ª–µ –±–ª–æ–∫–∞ ¬´–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ¬ª –±–æ–ª—å—à–µ –ù–ò–ß–ï–ì–û –Ω–µ –ø–∏—Å–∞—Ç—å. –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∏–Ω–∞–ª —Ç–µ–∫—Å—Ç–∞.

<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:</b>
1. –ö–ª—é—á–µ–≤–æ–π –≤—ã–≤–æ–¥ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏–ª–∏ —Ä—ã–Ω–∫–æ–≤.
2. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π, —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
3. –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ —Ä–∏—Å–∫–∏.
(—Å—Ç—Ä–æ–≥–æ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞)

üìå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{text_block}

üìé –°—Å—ã–ª–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
{links_block}
"""

    client = get_client()
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.7,  # —á—É—Ç—å –≤—ã—à–µ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª ¬´–∂–∏–≤–µ–µ¬ª
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ batch-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {e}", exc_info=True)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞."
