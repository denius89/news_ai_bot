import logging
from database.db_models import supabase

logger = logging.getLogger(__name__)

def fetch_recent_news(limit: int = 5):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ importance –∏ –¥–∞—Ç–µ).
    """
    response = supabase.table("news") \
        .select("id, title, link, importance, published_at") \
        .order("importance", desc=True) \
        .order("published_at", desc=True) \
        .limit(limit) \
        .execute()

    return response.data or []

def generate_digest(limit: int = 5) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    news_items = fetch_recent_news(limit=limit)
    if not news_items:
        return "‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."

    lines = []
    for i, item in enumerate(news_items, 1):
        title = item.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = item.get("link", "")
        lines.append(f"{i}. {title} ({link})")

    digest_text = "üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n" + "\n".join(lines)
    return digest_text
