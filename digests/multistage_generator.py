"""
Multi-stage Digest Generator with Chain-of-Thought reasoning.

This module implements a 5-stage generation process:
0. Reasoning (Chain-of-Thought)
1. Fact extraction
2. Outline creation
3. Text generation
4. Editing and refinement
"""

import json
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime

from models.news import NewsItem
from utils.ai.ai_client import ask_async

try:
    from digests.rag_system import get_rag_context

    RAG_AVAILABLE = True
except ImportError:
    RAG_AVAILABLE = False

logger = logging.getLogger(__name__)


class MultiStageGenerator:
    """5-stage digest generation with Chain-of-Thought reasoning."""

    def __init__(self):
        self.stage_logs = []

    async def generate(
        self,
        news_items: List[NewsItem],
        category: str,
        subcategory: Optional[str] = None,
        style: str = "analytical",
        events: Optional[List[Dict[str, Any]]] = None,
        use_reasoning: bool = True,
        use_rag: bool = True,
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ 5 —ç—Ç–∞–ø–æ–≤ —Å Chain-of-Thought."""

        start_time = datetime.utcnow()
        logger.info(f"Starting multi-stage generation for {category}/{subcategory}")

        # Stage 0: Chain-of-Thought reasoning
        reasoning = None
        if use_reasoning:
            reasoning = await self._reason_about_news(news_items, category, subcategory, events, use_rag)
            logger.info("Stage 0: Reasoning completed")

        # Stage 1: Extract facts
        facts = await self._extract_facts(news_items, events, reasoning)
        logger.info(f"Stage 1: Extracted {len(facts)} facts")

        # Stage 2: Create outline
        outline = await self._create_outline(facts, category, subcategory, reasoning)
        logger.info("Stage 2: Outline created")

        # Stage 3: Generate text
        text = await self._generate_text(facts, outline, category, subcategory, style, reasoning)
        logger.info("Stage 3: Text generated")

        # Stage 4: Edit and refine
        final_text = await self._edit_text(text, facts, outline, category, subcategory)
        logger.info("Stage 4: Text refined")

        end_time = datetime.utcnow()
        duration = (end_time - start_time).total_seconds()

        return {
            "text": final_text,
            "reasoning": reasoning,
            "facts": facts,
            "outline": outline,
            "stats": {
                "stages": 5,
                "facts_count": len(facts),
                "word_count": len(final_text.split()),
                "generation_time_sec": duration,
            },
            "stage_logs": self.stage_logs,
        }

    async def _reason_about_news(
        self,
        news_items: List[NewsItem],
        category: str,
        subcategory: Optional[str],
        events: Optional[List[Dict[str, Any]]] = None,
        use_rag: bool = True,
    ) -> Dict[str, Any]:
        """Stage 0: Chain-of-Thought reasoning."""

        news_text = "\n\n".join(
            [f"{i+1}. {item.title}: {(item.content or '')[:200]}..." for i, item in enumerate(news_items)]
        )

        events_text = ""
        if events:
            events_text = "\n\n–ü–†–ï–î–°–¢–û–Ø–©–ò–ï –°–û–ë–´–¢–ò–Ø:\n" + "\n".join(
                [f"‚Ä¢ {e['title']} ({e['date']})" for e in events[:3]]  # Limit events for reasoning
            )

        subcategory_context = f"/{subcategory}" if subcategory else ""

        # –î–æ–±–∞–≤–ª—è–µ–º RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        rag_context = ""
        if use_rag and RAG_AVAILABLE:
            try:
                rag_context = get_rag_context(
                    category=category,
                    subcategory=subcategory,
                    style="analytical",
                    news_items=news_items,
                    max_samples=2,  # –ú–µ–Ω—å—à–µ –¥–ª—è reasoning —ç—Ç–∞–ø–∞
                )
                if rag_context:
                    rag_context = (
                        "\n\nüéØ –ü–†–ò–ú–ï–†–´ –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –î–ê–ô–î–ñ–ï–°–¢–û–í:\n"
                        + rag_context.split("–ü–†–ò–ú–ï–†–´ –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –î–ê–ô–î–ñ–ï–°–¢–û–í:")[-1]
                        if "–ü–†–ò–ú–ï–†–´ –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –î–ê–ô–î–ñ–ï–°–¢–û–í:" in rag_context
                        else rag_context
                    )
                    logger.info(f"Added RAG context to reasoning: {len(rag_context)} chars")
            except Exception as e:
                logger.warning(f"Failed to add RAG context to reasoning: {e}")

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–¥—É–º–∞–π –≤—Å–ª—É—Ö.

–ö–ê–¢–ï–ì–û–†–ò–Ø: {category}{subcategory_context}
{rag_context}

–ù–û–í–û–°–¢–ò:
{news_text}
{events_text}

–†–ê–ó–ú–´–®–õ–Ø–ô –ü–û–®–ê–ì–û–í–û:

1. –ì–õ–ê–í–ù–ê–Ø –¢–ï–ú–ê: –ö–∞–∫–∞—è –æ–¥–Ω–∞ —Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {subcategory if subcategory else category}?

2. –ü–†–ò–ß–ò–ù–ù–û-–°–õ–ï–î–°–¢–í–ï–ù–ù–´–ï –°–í–Ø–ó–ò: –ö–∞–∫–∏–µ —Å–≤—è–∑–∏ —Ç—ã –≤–∏–¥–∏—à—å –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏?

3. –ö–û–ù–¢–ï–ö–°–¢: –ö–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ —Ç—Ä–µ–Ω–¥–∞–º–∏?

4. –£–ì–û–õ –ó–†–ï–ù–ò–Ø: –ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –±—É–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —á–∏—Ç–∞—Ç–µ–ª—é?

5. –ú–ï–¢–ê–§–û–†–´: –ö–∞–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è?

6. –ü–†–û–ì–ù–û–ó: –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –±—É–¥—É—â–µ–≥–æ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏?

–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{{
  "main_theme": "...",
  "connections": ["—Å–≤—è–∑—å 1", "—Å–≤—è–∑—å 2"],
  "context_links": ["–∫–æ–Ω—Ç–µ–∫—Å—Ç 1", "–∫–æ–Ω—Ç–µ–∫—Å—Ç 2"],
  "angle": "...",
  "metaphors": ["–º–µ—Ç–∞—Ñ–æ—Ä–∞ 1", "–º–µ—Ç–∞—Ñ–æ—Ä–∞ 2"],
  "forecast": "..."
}}"""

        try:
            response = await ask_async(prompt=prompt, style="analytical", max_tokens=800)

            if response and response.strip().startswith("{"):
                reasoning = json.loads(response.strip())
                self.stage_logs.append(
                    {"stage": 0, "name": "reasoning", "success": True, "output_length": len(response)}
                )
                return reasoning
            else:
                logger.warning("Failed to parse reasoning JSON")
        except Exception as e:
            logger.error(f"Reasoning stage failed: {e}")

        # Fallback reasoning
        return {
            "main_theme": "–û–±–∑–æ—Ä –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
            "connections": ["–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–≤—è–∑—å —Å–æ–±—ã—Ç–∏–π"],
            "context_links": ["–æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"],
            "angle": "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
            "metaphors": [],
            "forecast": "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤",
        }

    async def _extract_facts(
        self, news_items: List[NewsItem], events: Optional[List[Dict[str, Any]]], reasoning: Optional[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """Stage 1: Extract key facts from news items."""

        facts = []

        for item in news_items:
            fact = {
                "title": item.title,
                "content": item.content or "",
                "source": item.source or "Unknown",
                "importance": item.importance or 0.0,
                "credibility": item.credibility or 0.0,
                "published_at": item.published_at_fmt if item.published_at else "Unknown",
                "category": item.category,
                "subcategory": item.subcategory,
            }
            facts.append(fact)

        # Add event facts
        if events:
            for event in events[:5]:  # Limit events
                fact = {
                    "title": event["title"],
                    "content": f"–°–æ–±—ã—Ç–∏–µ: {event.get('description', '')}",
                    "source": "Events",
                    "importance": event.get("importance", 0.7),
                    "credibility": 0.9,  # Events are high credibility
                    "published_at": event.get("date", "Unknown"),
                    "category": "event",
                    "subcategory": event.get("subcategory", ""),
                }
                facts.append(fact)

        # Add reasoning insights as facts
        if reasoning and reasoning.get("context_links"):
            for link in reasoning["context_links"][:2]:
                fact = {
                    "title": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                    "content": link,
                    "source": "AI Reasoning",
                    "importance": 0.6,
                    "credibility": 0.8,
                    "published_at": "Analysis",
                    "category": "context",
                    "subcategory": "",
                }
                facts.append(fact)

        self.stage_logs.append({"stage": 1, "name": "extract_facts", "success": True, "facts_count": len(facts)})

        return facts

    async def _create_outline(
        self,
        facts: List[Dict[str, Any]],
        category: str,
        subcategory: Optional[str],
        reasoning: Optional[Dict[str, Any]],
    ) -> Dict[str, Any]:
        """Stage 2: Create structured outline."""

        main_theme = reasoning.get("main_theme", "–û–±–∑–æ—Ä —Å–æ–±—ã—Ç–∏–π") if reasoning else "–û–±–∑–æ—Ä —Å–æ–±—ã—Ç–∏–π"
        angle = reasoning.get("angle", "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π") if reasoning else "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π"

        prompt = f"""–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞.

–¢–ï–ú–ê: {main_theme}
–£–ì–û–õ: {angle}
–ö–ê–¢–ï–ì–û–†–ò–Ø: {category}/{subcategory if subcategory else 'general'}

–§–ê–ö–¢–´ ({len(facts)}):
{chr(10).join([f"- {fact['title']}: {fact['content'][:100]}..." for fact in facts[:5]])}

–°–û–ó–î–ê–ô –°–¢–†–£–ö–¢–£–†–£ JSON:
{{
  "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ (5-8 —Å–ª–æ–≤)",
  "dek": "–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (10-15 —Å–ª–æ–≤)",
  "sections": [
    {{
      "heading": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞",
      "purpose": "—á—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç",
      "facts": [–∏–Ω–¥–µ–∫—Å—ã —Ñ–∞–∫—Ç–æ–≤ 0-4],
      "order": 1
    }}
  ],
  "conclusion": "—á—Ç–æ –æ–∂–∏–¥–∞—Ç—å –¥–∞–ª—å—à–µ"
}}"""

        try:
            response = await ask_async(prompt=prompt, style="analytical", max_tokens=600)

            if response and response.strip().startswith("{"):
                outline = json.loads(response.strip())
                self.stage_logs.append(
                    {
                        "stage": 2,
                        "name": "create_outline",
                        "success": True,
                        "sections_count": len(outline.get("sections", [])),
                    }
                )
                return outline
        except Exception as e:
            logger.error(f"Outline creation failed: {e}")

        # Fallback outline
        outline = {
            "title": f"–î–∞–π–¥–∂–µ—Å—Ç {category}",
            "dek": "–û–±–∑–æ—Ä –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
            "sections": [
                {
                    "heading": "–û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
                    "purpose": "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –∫–ª—é—á–µ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö",
                    "facts": list(range(min(3, len(facts)))),
                    "order": 1,
                }
            ],
            "conclusion": "–°–æ–±—ã—Ç–∏—è —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é",
        }

        return outline

    async def _generate_text(
        self,
        facts: List[Dict[str, Any]],
        outline: Dict[str, Any],
        category: str,
        subcategory: Optional[str],
        style: str,
        reasoning: Optional[Dict[str, Any]],
    ) -> str:
        """Stage 3: Generate full text based on outline and facts."""

        # Prepare facts text
        facts_text = "\n\n".join(
            [f"–§–ê–ö–¢ {i}: {fact['title']}\n{fact['content'][:300]}..." for i, fact in enumerate(facts)]
        )

        # Prepare reasoning context
        reasoning_context = ""
        if reasoning:
            reasoning_context = f"""
–ê–ù–ê–õ–ò–ó –ò –†–ê–°–°–£–ñ–î–ï–ù–ò–Ø:
- –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞: {reasoning.get('main_theme', '')}
- –°–≤—è–∑–∏: {', '.join(reasoning.get('connections', []))}
- –ú–µ—Ç–∞—Ñ–æ—Ä—ã: {', '.join(reasoning.get('metaphors', []))}
- –ü—Ä–æ–≥–Ω–æ–∑: {reasoning.get('forecast', '')}
"""

        prompt = f"""–°–æ–∑–¥–∞–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ñ–∞–∫—Ç–æ–≤.

–°–¢–†–£–ö–¢–£–†–ê:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {outline.get('title', '')}
–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: {outline.get('dek', '')}

–†–∞–∑–¥–µ–ª—ã:
{chr(10).join([f"- {section['heading']}: {section['purpose']}" for section in outline.get('sections', [])])}

{reasoning_context}

–§–ê–ö–¢–´:
{facts_text}

–°–¢–ò–õ–¨: {style}
–ö–ê–¢–ï–ì–û–†–ò–Ø: {category}/{subcategory if subcategory else 'general'}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤—è–∑–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
- –ü–æ–∫–∞–∂–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
- –î–æ–±–∞–≤—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∞–Ω–∞–ª–∏–∑
- –ü–∏—à–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
- –î–ª–∏–Ω–∞: 400-800 —Å–ª–æ–≤

–°–æ–∑–¥–∞–π –≥–æ—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ (–±–µ–∑ <html>, <body> —Ç–µ–≥–æ–≤)."""

        try:
            response = await ask_async(prompt=prompt, style=style, max_tokens=1500)

            if response:
                self.stage_logs.append(
                    {"stage": 3, "name": "generate_text", "success": True, "output_length": len(response)}
                )
                return response

        except Exception as e:
            logger.error(f"Text generation failed: {e}")

        # Fallback text
        return f"<b>{outline.get('title', '–î–∞–π–¥–∂–µ—Å—Ç')}</b>\n\n–ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."

    async def _edit_text(
        self, text: str, facts: List[Dict[str, Any]], outline: Dict[str, Any], category: str, subcategory: Optional[str]
    ) -> str:
        """Stage 4: Edit and refine the generated text."""

        prompt = f"""–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏ —É–ª—É—á—à–∏ —ç—Ç–æ—Ç –¥–∞–π–¥–∂–µ—Å—Ç.

–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:
{text}

–ó–ê–î–ê–ß–ò –†–ï–î–ê–ö–¢–£–†–´:
1. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–∫—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
2. –£–ª—É—á—à–∏ —Å—Ç–∏–ª—å –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
3. –î–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
4. –£–±–µ—Ä–∏ –ø–æ–≤—Ç–æ—Ä—ã –∏ —É–ª—É—á—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
5. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º

–°–¢–ò–õ–¨ –†–ï–î–ê–ö–¢–£–†–´:
- –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –£–ª—É—á—à–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –î–æ–±–∞–≤—å –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
- –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–∫—É –∏–∑–ª–æ–∂–µ–Ω–∏—è

–í–µ—Ä–Ω–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ."""

        try:
            response = await ask_async(prompt=prompt, style="analytical", max_tokens=1200)

            if response and len(response.strip()) > 100:  # Reasonable minimum
                self.stage_logs.append(
                    {"stage": 4, "name": "edit_text", "success": True, "improvements": len(response) - len(text)}
                )
                return response

        except Exception as e:
            logger.error(f"Text editing failed: {e}")

        # Return original text if editing fails
        return text


# Convenience function
async def generate_multistage_digest(
    news_items: List[NewsItem],
    category: str,
    subcategory: Optional[str] = None,
    style: str = "analytical",
    events: Optional[List[Dict[str, Any]]] = None,
    use_reasoning: bool = True,
    use_rag: bool = True,
) -> Dict[str, Any]:
    """Generate digest using multi-stage approach."""

    generator = MultiStageGenerator()
    return await generator.generate(
        news_items=news_items,
        category=category,
        subcategory=subcategory,
        style=style,
        events=events,
        use_reasoning=use_reasoning,
        use_rag=use_rag,
    )
