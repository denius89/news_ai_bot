#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PulseAI
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 2.0

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
check_process_status() {
    local process_pattern="$1"
    local process_name="$2"
    local expected_port="$3"
    local check_url="$4"
    
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ $process_name...${NC}"
    
    if pgrep -f "$process_pattern" > /dev/null; then
        echo -e "${GREEN}‚úÖ $process_name –∑–∞–ø—É—â–µ–Ω${NC}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        pgrep -f "$process_pattern" | while read pid; do
            local cmd=$(ps -p $pid -o command= 2>/dev/null || echo '–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            local cpu=$(ps -p $pid -o %cpu= 2>/dev/null || echo 'N/A')
            local mem=$(ps -p $pid -o %mem= 2>/dev/null || echo 'N/A')
            local time=$(ps -p $pid -o etime= 2>/dev/null || echo 'N/A')
            
            echo -e "   ${CYAN}PID:${NC} $pid"
            echo -e "   ${CYAN}CPU:${NC} $cpu%"
            echo -e "   ${CYAN}Memory:${NC} $mem%"
            echo -e "   ${CYAN}Uptime:${NC} $time"
            echo -e "   ${CYAN}Command:${NC} $cmd"
        done
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if [ -n "$expected_port" ]; then
            if lsof -i ":$expected_port" > /dev/null 2>&1; then
                echo -e "   ${GREEN}‚úÖ –ü–æ—Ä—Ç $expected_port –∑–∞–Ω—è—Ç${NC}"
            else
                echo -e "   ${YELLOW}‚ö†Ô∏è –ü–æ—Ä—Ç $expected_port —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
        if [ -n "$check_url" ]; then
            if curl -s "$check_url" > /dev/null 2>&1; then
                echo -e "   ${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ $check_url${NC}"
            else
                echo -e "   ${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ $check_url${NC}"
            fi
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå $process_name –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    echo -e "${BLUE}üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...${NC}"
    
    local ports=("8001:Flask WebApp" "3000:React Dev Server")
    
    for port_info in "${ports[@]}"; do
        local port=$(echo $port_info | cut -d: -f1)
        local service=$(echo $port_info | cut -d: -f2)
        
        if lsof -i ":$port" > /dev/null 2>&1; then
            local pid=$(lsof -i ":$port" | tail -n +2 | awk '{print $2}' | head -1)
            echo -e "   ${GREEN}‚úÖ –ü–æ—Ä—Ç $port ($service) –∑–∞–Ω—è—Ç PID: $pid${NC}"
        else
            echo -e "   ${YELLOW}‚ö†Ô∏è –ü–æ—Ä—Ç $port ($service) —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare Tunnel
check_cloudflare() {
    echo -e "${BLUE}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Cloudflare Tunnel...${NC}"
    
    if pgrep -f "cloudflared" > /dev/null; then
        echo -e "${GREEN}‚úÖ Cloudflare Tunnel –∑–∞–ø—É—â–µ–Ω${NC}"
        
        pgrep -f "cloudflared" | while read pid; do
            local cmd=$(ps -p $pid -o command= 2>/dev/null || echo '–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            local cpu=$(ps -p $pid -o %cpu= 2>/dev/null || echo 'N/A')
            local mem=$(ps -p $pid -o %mem= 2>/dev/null || echo 'N/A')
            local time=$(ps -p $pid -o etime= 2>/dev/null || echo 'N/A')
            
            echo -e "   ${CYAN}PID:${NC} $pid"
            echo -e "   ${CYAN}CPU:${NC} $cpu%"
            echo -e "   ${CYAN}Memory:${NC} $mem%"
            echo -e "   ${CYAN}Uptime:${NC} $time"
            echo -e "   ${CYAN}Command:${NC} $cmd"
        done
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        WEBAPP_URL=$(python3 -c "
import sys
sys.path.append('/Users/denisfedko/news_ai_bot')
from config.cloudflare import get_webapp_url
print(get_webapp_url())
" 2>/dev/null || echo "https://immunology-restructuring-march-same.trycloudflare.com")
        
        echo -e "   ${CYAN}URL:${NC} $WEBAPP_URL"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if curl -s "$WEBAPP_URL/webapp" > /dev/null 2>&1; then
            echo -e "   ${GREEN}‚úÖ Cloudflare Tunnel –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        else
            echo -e "   ${RED}‚ùå Cloudflare Tunnel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå Cloudflare Tunnel –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
show_summary() {
    echo ""
    echo -e "${BLUE}üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê${NC}"
    echo "=================================================="
    
    local flask_count=$(pgrep -f "python3 src/webapp.py" | wc -l)
    local bot_count=$(pgrep -f "telegram_bot" | wc -l)
    local cloudflare_count=$(pgrep -f "cloudflared" | wc -l)
    
    echo -e "${CYAN}Flask WebApp –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:${NC} $flask_count"
    echo -e "${CYAN}Telegram Bot –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:${NC} $bot_count"
    echo -e "${CYAN}Cloudflare Tunnel –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:${NC} $cloudflare_count"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PID —Ñ–∞–π–ª—ã
    echo ""
    echo -e "${BLUE}üìÅ PID –§–ê–ô–õ–´${NC}"
    echo "=================================================="
    
    if [ -f ".flask.pid" ]; then
        local flask_pid=$(cat .flask.pid)
        if ps -p $flask_pid > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ .flask.pid: $flask_pid (–∞–∫—Ç–∏–≤–µ–Ω)${NC}"
        else
            echo -e "${RED}‚ùå .flask.pid: $flask_pid (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è .flask.pid –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    if [ -f ".bot.pid" ]; then
        local bot_pid=$(cat .bot.pid)
        if ps -p $bot_pid > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ .bot.pid: $bot_pid (–∞–∫—Ç–∏–≤–µ–Ω)${NC}"
        else
            echo -e "${RED}‚ùå .bot.pid: $bot_pid (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è .bot.pid –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º lock —Ñ–∞–π–ª—ã
    echo ""
    echo -e "${BLUE}üîí LOCK –§–ê–ô–õ–´${NC}"
    echo "=================================================="
    
    if [ -f ".flask.lock" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è .flask.lock –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    if [ -f ".bot.lock" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è .bot.lock –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    if [ ! -f ".flask.lock" ] && [ ! -f ".bot.lock" ]; then
        echo -e "${GREEN}‚úÖ Lock —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PulseAI —Å–µ—Ä–≤–∏—Å–æ–≤${NC}"
    echo "=================================================="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    check_process_status "python3 src/webapp.py" "Flask WebApp" "8001" "http://localhost:8001/webapp"
    echo ""
    
    check_process_status "telegram_bot" "Telegram Bot" "" ""
    echo ""
    
    check_cloudflare
    echo ""
    
    check_ports
    echo ""
    
    show_summary
    
    echo ""
    echo -e "${BLUE}üí° –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø${NC}"
    echo "=================================================="
    echo -e "${CYAN}–ó–∞–ø—É—Å–∫:${NC} ./start_services_safe.sh"
    echo -e "${CYAN}–û—Å—Ç–∞–Ω–æ–≤–∫–∞:${NC} ./stop_services.sh"
    echo -e "${CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞:${NC} ./check_processes.sh"
    echo -e "${CYAN}–õ–æ–≥–∏:${NC} tail -f logs/*.log"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
