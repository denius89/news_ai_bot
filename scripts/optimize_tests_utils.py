#!/usr/bin/env python3
"""
üßπ –°–∫—Ä–∏–ø—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫ tests –∏ utils
–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ tests –∏ utils
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

class TestsUtilsOptimizer:
    def __init__(self, project_root="."):
        self.project_root = Path(project_root)
        self.backup_dir = self.project_root / "optimization_backup"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.tests_new = self.project_root / "tests_new"
        self.utils_new = self.project_root / "utils_new"
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ tests
        self.tests_mapping = {
            # Unit —Ç–µ—Å—Ç—ã - AI
            "test_ai_modules.py": "unit/ai/",
            "test_ai_optimization.py": "unit/ai/",
            "test_ai_service.py": "unit/ai/",
            "test_ai_summary.py": "unit/ai/",
            
            # Unit —Ç–µ—Å—Ç—ã - Database
            "test_database_service.py": "unit/database/",
            "test_db_content.py": "unit/database/",
            "test_db_insert.py": "unit/database/",
            "test_db_models.py": "unit/database/",
            "test_supabase.py": "unit/database/",
            
            # Unit —Ç–µ—Å—Ç—ã - Parsers
            "test_advanced_parser.py": "unit/parsers/",
            "test_parsers.py": "unit/parsers/",
            "test_clean_text.py": "unit/parsers/",
            "test_sources.py": "unit/parsers/",
            
            # Unit —Ç–µ—Å—Ç—ã - Utils
            "test_cache.py": "unit/utils/",
            "test_formatters.py": "unit/utils/",
            "test_progress_animation.py": "unit/utils/",
            
            # Integration —Ç–µ—Å—Ç—ã - API
            "test_api_notifications.py": "integration/api/",
            "test_api_subscriptions.py": "integration/api/",
            "test_routes.py": "integration/api/",
            
            # Integration —Ç–µ—Å—Ç—ã - Telegram
            "test_telegram_sender.py": "integration/telegram/",
            "test_telegram_keyboards.py": "integration/telegram/",
            "test_keyboards_subscriptions.py": "integration/telegram/",
            "test_bot_routers.py": "integration/telegram/",
            
            # Integration —Ç–µ—Å—Ç—ã - WebApp
            "test_webapp.py": "integration/webapp/",
            "test_dashboard_webapp.py": "integration/webapp/",
            
            # Quick —Ç–µ—Å—Ç—ã - Smoke
            "test_main_import.py": "quick/smoke/",
            "test_main.py": "quick/smoke/",
            
            # Quick —Ç–µ—Å—Ç—ã - Performance
            "test_optimization_integration.py": "quick/performance/",
            
            # External Services
            "test_openai.py": "external/",
            "test_deepl.py": "external/",
            "test_http_client.py": "external/",
            
            # Fixtures (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–Ω–µ)
            "conftest.py": "",
            "__init__.py": "",
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ utils
        self.utils_mapping = {
            # AI —É—Ç–∏–ª–∏—Ç—ã
            "ai_client.py": "ai/",
            "news_distribution.py": "ai/",
            
            # Network —É—Ç–∏–ª–∏—Ç—ã
            "http_client.py": "network/",
            "telegram_sender.py": "network/",
            
            # Text —É—Ç–∏–ª–∏—Ç—ã
            "clean_text.py": "text/",
            "formatters.py": "text/",
            
            # System —É—Ç–∏–ª–∏—Ç—ã
            "cache.py": "system/",
            "dates.py": "system/",
            "progress_animation.py": "system/",
            
            # Logging —É—Ç–∏–ª–∏—Ç—ã
            "logging_setup.py": "logging/",
            "standard_logging.py": "logging/",
        }
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîÑ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ tests –∏ utils
        if (self.project_root / "tests").exists():
            shutil.copytree(self.project_root / "tests", self.backup_dir / "tests")
            print("  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞ tests")
            
        if (self.project_root / "utils").exists():
            shutil.copytree(self.project_root / "utils", self.backup_dir / "utils")
            print("  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞ utils")
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ {self.backup_dir}")
        
    def analyze_files(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª—ã...")
        
        tests_files = list((self.project_root / "tests").glob("*.py"))
        utils_files = list((self.project_root / "utils").glob("*.py"))
        
        print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ {len(tests_files)} —Ñ–∞–π–ª–æ–≤ –≤ tests")
        print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ {len(utils_files)} —Ñ–∞–π–ª–æ–≤ –≤ utils")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        unmapped_tests = []
        for file_path in tests_files:
            if file_path.name not in self.tests_mapping:
                unmapped_tests.append(file_path.name)
        
        unmapped_utils = []
        for file_path in utils_files:
            if file_path.name not in self.utils_mapping:
                unmapped_utils.append(file_path.name)
        
        if unmapped_tests:
            print(f"  ‚ö†Ô∏è –ù–µ –º–∞–ø–ø–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç—ã: {unmapped_tests}")
        
        if unmapped_utils:
            print(f"  ‚ö†Ô∏è –ù–µ –º–∞–ø–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Ç–∏–ª–∏—Ç—ã: {unmapped_utils}")
        
        return unmapped_tests, unmapped_utils
        
    def move_tests_files(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã tests –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        print("üìÅ –ü–µ—Ä–µ–º–µ—â–∞—é —Ñ–∞–π–ª—ã tests...")
        
        moved_count = 0
        for filename, target_dir in self.tests_mapping.items():
            src = self.project_root / "tests" / filename
            if src.exists():
                dst_dir = self.tests_new / target_dir
                dst_dir.mkdir(parents=True, exist_ok=True)
                dst = dst_dir / filename
                
                shutil.move(str(src), str(dst))
                print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω {filename} ‚Üí {target_dir}")
                moved_count += 1
            else:
                print(f"  ‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤ tests")
        
    def move_utils_files(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã utils –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        print("üìÅ –ü–µ—Ä–µ–º–µ—â–∞—é —Ñ–∞–π–ª—ã utils...")
        
        moved_count = 0
        for filename, target_dir in self.utils_mapping.items():
            src = self.project_root / "utils" / filename
            if src.exists():
                dst_dir = self.utils_new / target_dir
                dst_dir.mkdir(parents=True, exist_ok=True)
                dst = dst_dir / filename
                
                shutil.move(str(src), str(dst))
                print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω {filename} ‚Üí {target_dir}")
                moved_count += 1
            else:
                print(f"  ‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤ utils")
        
    def create_init_files(self):
        """–°–æ–∑–¥–∞–µ—Ç __init__.py —Ñ–∞–π–ª—ã –≤ –Ω–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö"""
        print("üìÑ –°–æ–∑–¥–∞—é __init__.py —Ñ–∞–π–ª—ã...")
        
        # –î–ª—è tests
        test_dirs = [
            "unit", "unit/ai", "unit/database", "unit/parsers", "unit/utils",
            "integration", "integration/api", "integration/telegram", "integration/webapp",
            "quick", "quick/smoke", "quick/performance",
            "external", "fixtures"
        ]
        
        for dir_name in test_dirs:
            init_file = self.tests_new / dir_name / "__init__.py"
            init_file.parent.mkdir(parents=True, exist_ok=True)
            init_file.write_text('"""–ú–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""\n')
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω {dir_name}/__init__.py")
        
        # –î–ª—è utils
        utils_dirs = ["ai", "network", "text", "system", "logging"]
        
        for dir_name in utils_dirs:
            init_file = self.utils_new / dir_name / "__init__.py"
            init_file.parent.mkdir(parents=True, exist_ok=True)
            init_file.write_text('"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π."""\n')
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω {dir_name}/__init__.py")
        
        print("‚úÖ –í—Å–µ __init__.py —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        
    def replace_old_with_new(self):
        """–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏ –Ω–æ–≤—ã–º–∏"""
        print("üîÑ –ó–∞–º–µ–Ω—è—é —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏ –Ω–æ–≤—ã–º–∏...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏
        if (self.project_root / "tests").exists():
            shutil.rmtree(self.project_root / "tests")
            print("  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ tests")
        
        if (self.project_root / "utils").exists():
            shutil.rmtree(self.project_root / "utils")
            print("  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ utils")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞–ø–∫–∏
        self.tests_new.rename(self.project_root / "tests")
        self.utils_new.rename(self.project_root / "utils")
        
        print("‚úÖ –ü–∞–ø–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    def verify_structure(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º tests
        tests_structure = {
            "unit/ai": 4,
            "unit/database": 5,
            "unit/parsers": 4,
            "unit/utils": 3,
            "integration/api": 3,
            "integration/telegram": 4,
            "integration/webapp": 2,
            "quick/smoke": 2,
            "quick/performance": 1,
            "external": 3,
        }
        
        for dir_name, expected_count in tests_structure.items():
            dir_path = self.project_root / "tests" / dir_name
            if dir_path.exists():
                file_count = len(list(dir_path.glob("*.py")))
                print(f"  ‚úÖ {dir_name}/ - {file_count} —Ñ–∞–π–ª–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count})")
            else:
                print(f"  ‚ùå {dir_name}/ - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º utils
        utils_structure = {
            "ai": 2,
            "network": 2,
            "text": 2,
            "system": 3,
            "logging": 2,
        }
        
        for dir_name, expected_count in utils_structure.items():
            dir_path = self.project_root / "utils" / dir_name
            if dir_path.exists():
                file_count = len(list(dir_path.glob("*.py")))
                print(f"  ‚úÖ {dir_name}/ - {file_count} —Ñ–∞–π–ª–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count})")
            else:
                print(f"  ‚ùå {dir_name}/ - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    def optimize_structure(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("üßπ –ù–∞—á–∏–Ω–∞—é –∞–∫–∫—É—Ä–∞—Ç–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–ø–æ–∫ tests –∏ utils...")
        print("=" * 60)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.create_backup()
            print()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            unmapped_tests, unmapped_utils = self.analyze_files()
            print()
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
            self.move_tests_files()
            print()
            
            self.move_utils_files()
            print()
            
            # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
            self.create_init_files()
            print()
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏ –Ω–æ–≤—ã–º–∏
            self.replace_old_with_new()
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self.verify_structure()
            
            print("\nüéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("  1. –û–±–Ω–æ–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
            print("  2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            print("  3. –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
            print("  4. –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git")
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if self.backup_dir.exists():
                if (self.backup_dir / "tests").exists():
                    shutil.copytree(self.backup_dir / "tests", self.project_root / "tests")
                    print("  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ tests")
                
                if (self.backup_dir / "utils").exists():
                    shutil.copytree(self.backup_dir / "utils", self.project_root / "utils")
                    print("  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ utils")
                    
            print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    optimizer = TestsUtilsOptimizer()
    optimizer.optimize_structure()
