#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
–ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤.
"""

import sys
import os
from pathlib import Path
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from config.paths import PATHS, ensure_path_exists
except ImportError:
    # Fallback –µ—Å–ª–∏ config.paths –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    PATHS = {}

    def ensure_path_exists(key):
        return Path(key)


class HealthChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–µ–∫—Ç–∞."""

    def __init__(self):
        self.errors: List[str] = []
        self.warnings: List[str] = []

    def check_paths(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π."""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π...")

        critical_paths = ["webapp_dist", "webapp_index", "logs", "config", "ai_modules", "utils", "telegram_bot"]

        for path_key in critical_paths:
            try:
                ensure_path_exists(path_key)
                print(f"  ‚úÖ {path_key}: {PATHS[path_key]}")
            except FileNotFoundError as e:
                self.errors.append(str(e))
                print(f"  ‚ùå {path_key}: –ù–ï –ù–ê–ô–î–ï–ù")

        return len(self.errors) == 0

    def check_imports(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã."""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")

        critical_imports = [
            ("config.core.settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"),
            ("utils.ai.ai_client", "AI –∫–ª–∏–µ–Ω—Ç"),
            ("telegram_bot.handlers", "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞"),
            ("database.service", "–°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
            ("ai_modules.credibility", "–ú–æ–¥—É–ª—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏"),
        ]

        for module, description in critical_imports:
            try:
                __import__(module)
                print(f"  ‚úÖ {module}: {description}")
            except ImportError as e:
                self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module}: {e}")
                print(f"  ‚ùå {module}: {description} - –û–®–ò–ë–ö–ê")

        return len(self.errors) == 0

    def check_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

        required_env = [
            "TELEGRAM_BOT_TOKEN",
            "OPENAI_API_KEY",
            "SUPABASE_URL",
            "SUPABASE_KEY",
        ]

        for env_var in required_env:
            if os.getenv(env_var):
                print(f"  ‚úÖ {env_var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                self.warnings.append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {env_var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                print(f"  ‚ö†Ô∏è {env_var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")

        return True  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    def check_processes(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

        import subprocess

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python
            result = subprocess.run(["ps", "aux"], capture_output=True, text=True)
            python_processes = [
                line for line in result.stdout.split("\n") if "python" in line and "webapp" in line or "bot" in line
            ]

            if python_processes:
                print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(python_processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python:")
                for proc in python_processes[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    print(f"    {proc.split()[1]}: {proc.split()[10:12]}")
                self.warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python")
            else:
                print("  ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã Python –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            self.warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã: {e}")

        return True

    def run_all_checks(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        print("üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –ü–†–û–ï–ö–¢–ê")
        print("=" * 40)

        checks = [
            self.check_paths,
            self.check_imports,
            self.check_environment,
            self.check_processes,
        ]

        all_passed = True
        for check in checks:
            if not check():
                all_passed = False

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 40)
        if self.errors:
            print("‚ùå –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")

        if self.warnings:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")

        if all_passed and not self.errors:
            print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
            return True
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    checker = HealthChecker()
    success = checker.run_all_checks()

    if not success:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")
        print("  2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("  3. –°–æ–±–µ—Ä–∏—Ç–µ React: cd webapp && npm run build")
        print("  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)

    print("\nüöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")


if __name__ == "__main__":
    main()
