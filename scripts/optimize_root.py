#!/usr/bin/env python3
"""
üßπ –°–∫—Ä–∏–ø—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ PulseAI
–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

class RootOptimizer:
    def __init__(self, project_root="."):
        self.project_root = Path(project_root)
        self.backup_dir = self.project_root / "optimization_backup"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.config_dir = self.project_root / "config_files"
        self.scripts_dir = self.project_root / "scripts"
        self.tests_dir = self.project_root / "tests"
        self.src_dir = self.project_root / "src"
        self.archive_dir = self.project_root / "archive"
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîÑ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è
        root_files = list(self.project_root.glob("*"))
        for item in root_files:
            if item.is_file() and not item.name.startswith('.'):
                dst = self.backup_dir / item.name
                shutil.copy2(item, dst)
                print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {item.name}")
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ {self.backup_dir}")
        
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        print("üìÅ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
        
        directories = [
            self.config_dir,
            self.src_dir,
            self.archive_dir
        ]
        
        for directory in directories:
            directory.mkdir(exist_ok=True)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory.name}")
            
        print("‚úÖ –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
    def move_config_files(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("‚öôÔ∏è –ü–µ—Ä–µ–º–µ—â–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        
        config_files = [
            ".env", ".env.example",
            "mypy.ini", "pytest.ini", "setup.cfg",
            ".flake8", ".eslintrc.json", ".htmlhintrc",
            ".pre-commit-config.yaml", ".safety-ignore",
            ".editorconfig", ".cursorignore"
        ]
        
        moved_count = 0
        for file_name in config_files:
            src = self.project_root / file_name
            if src.exists():
                dst = self.config_dir / file_name
                shutil.move(str(src), str(dst))
                print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω {file_name}")
                moved_count += 1
            else:
                print(f"  ‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
    def move_test_files(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
        print("üß™ –ü–µ—Ä–µ–º–µ—â–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã...")
        
        test_files = list(self.project_root.glob("test_*.py"))
        moved_count = 0
        
        for test_file in test_files:
            dst = self.tests_dir / test_file.name
            shutil.move(str(test_file), str(dst))
            print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω {test_file.name}")
            moved_count += 1
            
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
    def move_source_files(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("üìÑ –ü–µ—Ä–µ–º–µ—â–∞—é –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        
        source_files = [
            "main.py", "webapp.py"
        ]
        
        moved_count = 0
        for file_name in source_files:
            src = self.project_root / file_name
            if src.exists():
                dst = self.src_dir / file_name
                shutil.move(str(src), str(dst))
                print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω {file_name}")
                moved_count += 1
            else:
                print(f"  ‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
    def move_archive_files(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("üì¶ –ü–µ—Ä–µ–º–µ—â–∞—é –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        
        moved_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é archive_old (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
        archive_old = self.project_root / "archive_old"
        if archive_old.exists():
            print(f"  üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é archive_old...")
            for item in archive_old.iterdir():
                if item.is_file():
                    dst = self.archive_dir / item.name
                    shutil.move(str(item), str(dst))
                    print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª {item.name}")
                elif item.is_dir():
                    dst = self.archive_dir / item.name
                    shutil.move(str(item), str(dst))
                    print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {item.name}")
                moved_count += 1
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            archive_old.rmdir()
            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è archive_old")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ä–Ω–µ
        archive_items = [
            "backup_md_files", "backup_root_md_files"
        ]
        
        for item_name in archive_items:
            src = self.project_root / item_name
            if src.exists():
                dst = self.archive_dir / item_name
                shutil.move(str(src), str(dst))
                print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∞ {item_name}")
                moved_count += 1
            else:
                print(f"  ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} –∞—Ä—Ö–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
    def move_report_files(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ docs"""
        print("üìä –ü–µ—Ä–µ–º–µ—â–∞—é –æ—Ç—á–µ—Ç—ã –≤ docs...")
        
        report_files = [
            "STRUCTURE_REORGANIZATION_REPORT.md"
        ]
        
        docs_dir = self.project_root / "docs"
        moved_count = 0
        
        for file_name in report_files:
            src = self.project_root / file_name
            if src.exists():
                dst = docs_dir / file_name
                shutil.move(str(src), str(dst))
                print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω {file_name}")
                moved_count += 1
            else:
                print(f"  ‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} –æ—Ç—á–µ—Ç–æ–≤")
        
    def remove_unused_files(self):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã"""
        print("üóëÔ∏è –£–¥–∞–ª—è—é –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã...")
        
        unused_files = [
            "unused_main.py"
        ]
        
        removed_count = 0
        for file_name in unused_files:
            src = self.project_root / file_name
            if src.exists():
                src.unlink()
                print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω {file_name}")
                removed_count += 1
            else:
                print(f"  ‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
    def update_makefile(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Makefile —Å –Ω–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏"""
        print("üîß –û–±–Ω–æ–≤–ª—è—é Makefile...")
        
        makefile_path = self.project_root / "Makefile"
        if not makefile_path.exists():
            print("  ‚ö†Ô∏è Makefile –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π Makefile
        with open(makefile_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
        updates = [
            ("start_services.sh", "scripts/start_services.sh"),
            ("stop_services.sh", "scripts/stop_services.sh"),
            ("run_bot.sh", "scripts/run_bot.sh"),
            ("check_dependencies.sh", "scripts/check_dependencies.sh"),
            ("check_processes.sh", "scripts/check_processes.sh"),
        ]
        
        updated_content = content
        for old_path, new_path in updates:
            updated_content = updated_content.replace(old_path, new_path)
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Makefile
        with open(makefile_path, 'w', encoding='utf-8') as f:
            f.write(updated_content)
            
        print("‚úÖ Makefile –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    def verify_structure(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        essential_files = [
            "README.md", "pyproject.toml", "requirements.txt", 
            "Makefile", "LICENSE", ".gitignore"
        ]
        
        missing_files = []
        for file_name in essential_files:
            if not (self.project_root / file_name).exists():
                missing_files.append(file_name)
                
        if missing_files:
            print(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        else:
            print("  ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        new_dirs = [self.config_dir, self.src_dir, self.archive_dir]
        for directory in new_dirs:
            if directory.exists():
                file_count = len(list(directory.iterdir()))
                print(f"  ‚úÖ {directory.name}/ - {file_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            else:
                print(f"  ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory.name} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    def show_final_structure(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        print("\nüìÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–û–†–ù–Ø:")
        print("=" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        root_files = [f for f in self.project_root.iterdir() 
                     if f.is_file() and not f.name.startswith('.')]
        
        print(f"üìÑ –§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ ({len(root_files)}):")
        for file_path in sorted(root_files):
            print(f"  üìã {file_path.name}")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        root_dirs = [d for d in self.project_root.iterdir() 
                    if d.is_dir() and not d.name.startswith('.')]
        
        print(f"\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ({len(root_dirs)}):")
        for dir_path in sorted(root_dirs):
            file_count = len(list(dir_path.iterdir()))
            print(f"  üìÅ {dir_path.name}/ ({file_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
            
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"  - –§–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ: {len(root_files)}")
        print(f"  - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(root_dirs)}")
        print("  - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        
    def optimize_root(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("üßπ –ù–∞—á–∏–Ω–∞—é –∞–∫–∫—É—Ä–∞—Ç–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ—Ä–Ω—è PulseAI...")
        print("=" * 60)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.create_backup()
            print()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            self.create_directories()
            print()
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            self.move_config_files()
            print()
            
            self.move_test_files()
            print()
            
            self.move_source_files()
            print()
            
            self.move_archive_files()
            print()
            
            self.move_report_files()
            print()
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
            self.remove_unused_files()
            print()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Makefile
            self.update_makefile()
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self.verify_structure()
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.show_final_structure()
            
            print("\nüéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–æ–≤")
            print("  2. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
            print("  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")
            print("  4. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git")
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if self.backup_dir.exists():
                for backup_file in self.backup_dir.iterdir():
                    dst = self.project_root / backup_file.name
                    shutil.copy2(backup_file, dst)
                    print(f"  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {backup_file.name}")
                    
            print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    optimizer = RootOptimizer()
    optimizer.optimize_root()
