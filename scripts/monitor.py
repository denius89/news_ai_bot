#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ PulseAI.

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.
"""

import time
import requests
import psutil
import os
from pathlib import Path
from typing import Dict, List

class ServiceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤."""
    
    def __init__(self):
        self.services = {
            'flask': {
                'name': 'Flask WebApp',
                'port': 8001,
                'path': '/webapp',
                'pid_file': '.flask.pid'
            },
            'bot': {
                'name': 'Telegram Bot',
                'pid_file': '.bot.pid'
            }
        }
    
    def check_flask(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Flask."""
        service = self.services['flask']
        result = {
            'name': service['name'],
            'status': 'unknown',
            'details': {}
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            response = requests.get(f"http://localhost:{service['port']}{service['path']}", 
                                  timeout=5)
            if response.status_code == 200:
                result['status'] = 'healthy'
                result['details']['http_status'] = response.status_code
                result['details']['response_time'] = response.elapsed.total_seconds()
            else:
                result['status'] = 'unhealthy'
                result['details']['http_status'] = response.status_code
        except requests.exceptions.RequestException as e:
            result['status'] = 'unreachable'
            result['details']['error'] = str(e)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        pid_file = Path(service['pid_file'])
        if pid_file.exists():
            try:
                pid = int(pid_file.read_text().strip())
                if psutil.pid_exists(pid):
                    result['details']['pid'] = pid
                    result['details']['process_exists'] = True
                else:
                    result['status'] = 'dead'
                    result['details']['process_exists'] = False
            except (ValueError, FileNotFoundError):
                result['status'] = 'no_pid_file'
        
        return result
    
    def check_bot(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram Bot."""
        service = self.services['bot']
        result = {
            'name': service['name'],
            'status': 'unknown',
            'details': {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        pid_file = Path(service['pid_file'])
        if pid_file.exists():
            try:
                pid = int(pid_file.read_text().strip())
                if psutil.pid_exists(pid):
                    result['status'] = 'healthy'
                    result['details']['pid'] = pid
                    result['details']['process_exists'] = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
                    log_file = Path('logs/bot.log')
                    if log_file.exists():
                        last_lines = log_file.read_text().split('\n')[-10:]
                        error_lines = [line for line in last_lines if 'ERROR' in line]
                        if error_lines:
                            result['status'] = 'warning'
                            result['details']['recent_errors'] = len(error_lines)
                else:
                    result['status'] = 'dead'
                    result['details']['process_exists'] = False
            except (ValueError, FileNotFoundError):
                result['status'] = 'no_pid_file'
        else:
            result['status'] = 'not_started'
        
        return result
    
    def check_all_services(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã."""
        return [
            self.check_flask(),
            self.check_bot()
        ]
    
    def print_status(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        print("üìä –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í")
        print("=" * 30)
        
        services = self.check_all_services()
        
        for service in services:
            status_icon = {
                'healthy': '‚úÖ',
                'warning': '‚ö†Ô∏è',
                'unhealthy': '‚ùå',
                'unreachable': 'üîå',
                'dead': 'üíÄ',
                'not_started': '‚èπÔ∏è',
                'no_pid_file': 'üìÑ',
                'unknown': '‚ùì'
            }.get(service['status'], '‚ùì')
            
            print(f"{status_icon} {service['name']}: {service['status']}")
            
            for key, value in service['details'].items():
                print(f"   {key}: {value}")
        
        print()
    
    def monitor_loop(self, interval: int = 30):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ü–∏–∫–ª–µ."""
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while True:
                self.print_status()
                time.sleep(interval)
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ PulseAI')
    parser.add_argument('--interval', '-i', type=int, default=30,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')
    parser.add_argument('--once', action='store_true',
                       help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ–¥–∏–Ω —Ä–∞–∑')
    
    args = parser.parse_args()
    
    monitor = ServiceMonitor()
    
    if args.once:
        monitor.print_status()
    else:
        monitor.monitor_loop(args.interval)

if __name__ == "__main__":
    main()
