#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ PulseAI
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./start_services.sh              - –∑–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–¥–æ—Ä–æ–≤—å—è (safe mode)
#   ./start_services.sh --skip-health-check - –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
#
# –ê–≤—Ç–æ—Ä: PulseAI Team
# –í–µ—Ä—Å–∏—è: 2.0

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
SKIP_HEALTH_CHECK=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
for arg in "$@"; do
    case $arg in
        --skip-health-check)
            SKIP_HEALTH_CHECK=true
            shift
            ;;
        --help|-h)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]"
            echo ""
            echo "OPTIONS:"
            echo "  --skip-health-check    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞"
            echo "  --help, -h             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0                     # –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
            echo "  $0 --skip-health-check # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $arg${NC}"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
done

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–≤
SCRIPT_LOG_DIR="logs/scripts"
mkdir -p "$SCRIPT_LOG_DIR"

# –§–∞–π–ª –ª–æ–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
LOG_FILE="$SCRIPT_LOG_DIR/start_services_$(date +%Y%m%d_%H%M%S).log"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level="$1"
    shift
    local message="$@"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
log_info() {
    echo -e "${BLUE}$@${NC}"
    log "INFO" "$@"
}

log_success() {
    echo -e "${GREEN}$@${NC}"
    log "SUCCESS" "$@"
}

log_warning() {
    echo -e "${YELLOW}$@${NC}"
    log "WARNING" "$@"
}

log_error() {
    echo -e "${RED}$@${NC}"
    log "ERROR" "$@"
}

log_info "üõ°Ô∏è –ó–ê–ü–£–°–ö PULSEAI –°–ï–†–í–ò–°–û–í"
log_info "==============================="
log_info "–õ–æ–≥ —Ñ–∞–π–ª: $LOG_FILE"
log_info "Health check: $([ "$SKIP_HEALTH_CHECK" = true ] && echo "–æ—Ç–∫–ª—é—á—ë–Ω" || echo "–≤–∫–ª—é—á—ë–Ω")"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
if [ "$SKIP_HEALTH_CHECK" = false ]; then
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞..."
    if python3 scripts/health_check.py >> "$LOG_FILE" 2>&1; then
        log_success "‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–¥–æ—Ä–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫..."
    else
        log_error "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!"
        log_error "üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        log_error "üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–µ: $LOG_FILE"
        exit 1
    fi
    echo ""
else
    log_warning "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (--skip-health-check)"
    echo ""
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export PYTHONPATH="/Users/denisfedko/news_ai_bot:$PYTHONPATH"
log "INFO" "PYTHONPATH —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $PYTHONPATH"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
log_info "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
pkill -f "python.*webapp.py" 2>/dev/null || true
pkill -f "python.*telegram_bot" 2>/dev/null || true
sleep 2
log_success "‚úÖ –°—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask WebApp
log_info "üåê –ó–∞–ø—É—Å–∫ Flask WebApp..."
python3 src/webapp.py > logs/webapp.log 2>&1 &
FLASK_PID=$!
log "INFO" "Flask WebApp –∑–∞–ø—É—â–µ–Ω —Å PID: $FLASK_PID"

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Flask
sleep 3

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Flask –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
if curl -s http://localhost:8001/webapp > /dev/null 2>&1; then
    log_success "‚úÖ Flask WebApp –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
else
    log_error "‚ùå Flask WebApp –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    log_error "üìã –õ–æ–≥–∏ Flask:"
    tail -10 logs/webapp.log | tee -a "$LOG_FILE"
    exit 1
fi
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Bot
log_info "ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot..."
python3 -m telegram_bot.bot > logs/bot.log 2>&1 &
BOT_PID=$!
log "INFO" "Telegram Bot –∑–∞–ø—É—â–µ–Ω —Å PID: $BOT_PID"

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Bot
sleep 3

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Bot –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
if ps -p $BOT_PID > /dev/null 2>&1; then
    log_success "‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
else
    log_error "‚ùå Telegram Bot –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    log_error "üìã –õ–æ–≥–∏ Bot:"
    tail -10 logs/bot.log | tee -a "$LOG_FILE"
    exit 1
fi
echo ""

# –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
WEBAPP_URL=$(python3 -c "
import sys
sys.path.append('/Users/denisfedko/news_ai_bot')
try:
    from config.core.cloudflare import get_webapp_url
    print(get_webapp_url())
except:
    from config.cloudflare import get_webapp_url
    print(get_webapp_url())
" 2>/dev/null || echo "http://localhost:8001")

log_success "üéâ –í–°–ï –°–ï–†–í–ò–°–´ –ó–ê–ü–£–©–ï–ù–´!"
echo "========================"
echo -e "${CYAN}üì± WebApp:${NC} $WEBAPP_URL"
echo -e "${CYAN}ü§ñ Telegram Bot:${NC} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
echo -e "${CYAN}üåê Flask:${NC} http://localhost:8001/webapp"
echo -e "${CYAN}üìã –õ–æ–≥ –∑–∞–ø—É—Å–∫–∞:${NC} $LOG_FILE"
echo ""
echo -e "${YELLOW}üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ./stop_services.sh${NC}"
echo -e "${YELLOW}üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ./check_processes.sh${NC}"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
echo $FLASK_PID > .flask.pid
echo $BOT_PID > .bot.pid
log "INFO" "PID —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: Flask (.flask.pid), Bot (.bot.pid)"

log_success "‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ"
