"""
Example usage of Telegram sender utility.

This script demonstrates how to use the TelegramSender class and global functions.
"""

import asyncio
import logging
import os
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent
import sys

sys.path.insert(0, str(project_root))

from dotenv import load_dotenv

load_dotenv()

from utils.telegram_sender import TelegramSender, send_message, send_digest

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def example_with_class():
    """Example using TelegramSender class directly."""
    logger.info("üîß –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TelegramSender –∫–ª–∞—Å—Å–∞")

    try:
        # Initialize sender
        sender = TelegramSender()

        # Send a simple message
        chat_id = 123456789  # Replace with actual chat ID
        success = await sender.send_message(
            chat_id, "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <i>PulseAI</i> –±–æ—Ç–∞."
        )

        if success:
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

        # Send a digest
        digest_content = """
<b>üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</b>

<b>1. –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>
Bitcoin –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ $50,000
<a href="https://example.com/btc-news">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>

<b>2. –≠–∫–æ–Ω–æ–º–∏–∫–∞</b>
–§–†–° –ø–æ–≤—ã—Å–∏–ª–∞ —Å—Ç–∞–≤–∫—É –Ω–∞ 0.25%
<a href="https://example.com/fed-news">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
"""

        success = await sender.send_digest(chat_id, digest_content, "üì∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")

        if success:
            logger.info("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç")

        # Close the sender
        await sender.close()

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ —Å –∫–ª–∞—Å—Å–æ–º: %s", str(e))


async def example_with_global_functions():
    """Example using global convenience functions."""
    logger.info("üîß –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")

    try:
        chat_id = 123456789  # Replace with actual chat ID

        # Send message using global function
        success = await send_message(
            chat_id, "üöÄ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é!"
        )

        if success:
            logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_message —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.info("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_message –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")

        # Send digest using global function
        digest_content = """
<b>ü§ñ AI –ê–Ω–∞–ª–∏–∑</b>

–°–µ–≥–æ–¥–Ω—è –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:
‚Ä¢ OpenAI –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∞ GPT-5
‚Ä¢ Tesla –∑–∞–ø—É—Å—Ç–∏–ª–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞
‚Ä¢ Microsoft –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞ $10B –≤ –ò–ò
"""

        success = await send_digest(chat_id, digest_content, "ü§ñ AI –î–∞–π–¥–∂–µ—Å—Ç")

        if success:
            logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_digest —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.info("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_digest –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: %s", str(e))


async def example_context_manager():
    """Example using async context manager."""
    logger.info("üîß –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è async context manager")

    try:
        chat_id = 123456789  # Replace with actual chat ID

        # Use async context manager
        async with TelegramSender() as sender:
            success = await sender.send_message(
                chat_id, "üîÑ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ async context manager!"
            )

            if success:
                logger.info("‚úÖ Context manager —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.info("‚ùå Context manager –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")

        # Sender is automatically closed here

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ —Å context manager: %s", str(e))


async def example_error_handling():
    """Example demonstrating error handling."""
    logger.info("üîß –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")

    try:
        sender = TelegramSender()

        # Try to send to invalid chat ID
        invalid_chat_id = 999999999
        success = await sender.send_message(
            invalid_chat_id, "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        )

        if not success:
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        # Try to send empty message
        success = await sender.send_message(123456789, "")

        if not success:
            logger.info("‚úÖ –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

        await sender.close()

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: %s", str(e))


async def main():
    """Main function to run all examples."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram sender")

    # Check if token is available
    if not os.getenv("TELEGRAM_BOT_TOKEN"):
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    logger.info("‚úÖ TELEGRAM_BOT_TOKEN –Ω–∞–π–¥–µ–Ω")

    # Run examples
    await example_with_class()
    await asyncio.sleep(1)

    await example_with_global_functions()
    await asyncio.sleep(1)

    await example_context_manager()
    await asyncio.sleep(1)

    await example_error_handling()

    logger.info("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", str(e))
