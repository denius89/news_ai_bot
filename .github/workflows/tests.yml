name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - quick
          - specific
      verbose:
        description: 'Verbose output'
        required: false
        default: 'true'
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "üß™ Running unit tests..."
          pytest tests/unit -v --tb=short --maxfail=5
        continue-on-error: false

      - name: Debug: Show test summary
        if: failure()
        run: |
          echo "‚ö†Ô∏è Some tests failed. Checking details..."
          pytest tests/ -q --tb=no --collect-only 2>&1 || true
          pytest tests/ -v --co -q 2>&1 | tail -20 || true

      - name: Determine test command
        id: test_cmd
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TEST_LEVEL="${{ github.event.inputs.test_level }}"
            VERBOSE="${{ github.event.inputs.verbose }}"
            
            case "$TEST_LEVEL" in
              unit)
                echo "Tests: tests/unit"
                ;;
              integration)
                echo "Tests: tests/integration"
                ;;
              quick)
                echo "Tests: tests/quick"
                ;;
              *)
                echo "Tests: tests/"
                ;;
            esac
            
            if [[ "$VERBOSE" == "true" ]]; then
              echo "Verbose: -v"
            else
              echo "Verbose: -q"
            fi
          else
            echo "Tests: tests/"
            echo "Verbose: -v"
          fi
        continue-on-error: false

      - name: Run all tests with coverage
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          TEST_PATH="${{ steps.test_cmd.outputs.Tests }}"
          VERBOSE_FLAG="${{ steps.test_cmd.outputs.Verbose }}"
          
          pytest $TEST_PATH $VERBOSE_FLAG --cov=. --cov-report=term-missing --cov-report=xml
        continue-on-error: true

      - name: Check code quality (Flake8 - critical errors only)
        run: |
          echo "üîç Checking code quality..."
          python -m flake8 --select=E9,F63,F7,F82 --exclude=venv,node_modules,__pycache__,webapp .
        continue-on-error: true

      - name: Debug: Show environment info on failure
        if: failure()
        run: |
          echo "üêõ Debugging failed run..."
          python --version
          pip list | grep -E "(pytest|flake8)" || true
          echo "Last commit:"
          git log -1 --oneline || true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

