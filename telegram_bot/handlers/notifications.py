"""
Telegram bot handlers for notifications.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ Telegram-–±–æ—Ç–µ,
–≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É callback'–æ–≤ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏.
"""

import logging
from aiogram import Router, types, F
from aiogram.filters import Command

from services.notification_service import get_notification_service
from telegram_bot.keyboards import notifications_inline_keyboard, back_inline_keyboard

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("notifications"))
async def cmd_notifications(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notifications."""
    await message.answer(
        "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        parse_mode="HTML",
        reply_markup=notifications_inline_keyboard(),
    )


@router.callback_query(F.data == "notifications")
async def cb_notifications_menu(query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    await query.message.edit_text(
        "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        parse_mode="HTML",
        reply_markup=notifications_inline_keyboard(),
    )
    await query.answer()


@router.callback_query(F.data == "my_notifications")
async def cb_my_notifications(query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        from database.db_models import get_user_notifications

        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notifications = await get_user_notifications(user_id=query.from_user.id)

        if not notifications:
            await query.message.edit_text(
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                "–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–¥–µ—Å—å.",
                parse_mode="HTML",
                reply_markup=back_inline_keyboard(),
            )
            await query.answer()
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        text = "üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"

        for i, notification in enumerate(notifications[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status = "‚úÖ" if notification.get("read", False) else "üîî"
            title = notification.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            created_at = notification.get("created_at", "")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if created_at:
                try:
                    from datetime import datetime

                    if isinstance(created_at, str):
                        dt = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
                    else:
                        dt = created_at
                    formatted_date = dt.strftime("%d.%m.%Y %H:%M")
                except Exception:
                    formatted_date = str(created_at)
            else:
                formatted_date = "‚Äî"

            text += f"{status} <b>{title}</b>\n"
            text += f"üìÖ {formatted_date}\n\n"

        if len(notifications) > 10:
            text += f"... –∏ –µ—â–µ {len(notifications) - 10} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=back_inline_keyboard())
        await query.answer()

    except Exception as e:
        logger.error(f"‚ùå Error getting notifications for user {query.from_user.id}: {e}")
        await query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML",
            reply_markup=back_inline_keyboard(),
        )
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.callback_query(F.data.startswith("mark_read:"))
async def cb_mark_read(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º notification_id –∏–∑ callback_data
        notification_id = query.data.split(":", 1)[1]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        notification_service = get_notification_service()
        success = await notification_service.mark_notification_read(
            user_id=query.from_user.id, notification_id=int(notification_id)
        )

        if not success:
            logger.warning(f"‚ö†Ô∏è Failed to mark notification {notification_id} as read for user {query.from_user.id}")

    except Exception as e:
        logger.error(f"‚ùå Error handling mark_read callback: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "notify_on_digest")
async def cb_notify_on_digest(query: types.CallbackQuery):
    """–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö."""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            "‚úÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö.",
            parse_mode="HTML",
            reply_markup=back_inline_keyboard(),
        )
        await query.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå Error enabling digest notifications: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.callback_query(F.data == "notify_off_digest")
async def cb_notify_off_digest(query: types.CallbackQuery):
    """–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö."""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            "‚ùå <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö.",
            parse_mode="HTML",
            reply_markup=back_inline_keyboard(),
        )
        await query.answer("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå Error disabling digest notifications: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
