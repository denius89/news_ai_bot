import logging
import asyncio
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from services.digest_service import build_daily_digest
from telegram_bot.utils.formatters import format_news
from digests.configs import CATEGORIES
from utils.clean_text import clean_for_telegram

router = Router()
logger = logging.getLogger(__name__)


def select_news_by_importance(news_list, limit: int):
    """–í—ã–±–∏—Ä–∞–µ—Ç limit –Ω–æ–≤–æ—Å—Ç–µ–π: –≤–∞–∂–Ω—ã–µ ‚Üí –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Üí fallback."""
    important = [n for n in news_list if (n.get("importance") or 0) >= 0.4]
    other = [n for n in news_list if n not in important]

    selected = important[:limit]
    if len(selected) < limit:
        selected += other[: limit - len(selected)]
    if not selected and news_list:
        selected = news_list[:limit]  # fallback

    return selected


def categories_keyboard() -> types.InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = [
        [types.InlineKeyboardButton(text=label, callback_data=f"digest:{key}")]
        for key, label in CATEGORIES.items()
    ]
    keyboard.append(
        [types.InlineKeyboardButton(text="üåê –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="digest:all")]
    )
    keyboard.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)


async def send_digest(
    target: types.Message | types.CallbackQuery,
    limit: int = 5,
    category: str | None = None,
):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –æ–±—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞)."""
    cats = None if (category is None or category == "all") else [category]

    # ‚ö°Ô∏è –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ threadpool —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
    digest_text, news = await asyncio.to_thread(build_daily_digest, 50, "analytical", cats)

    if not news:
        text = (
            f"üì≠ –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{CATEGORIES.get(category, category)}¬ª"
            if category and category != "all"
            else "üì≠ –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"
        )
    else:
        selected = select_news_by_importance(news, limit)
        header = ""
        if category and category != "all":
            header = f"<b>{CATEGORIES.get(category, category)}:</b>\n\n"
        text = header + format_news(selected, limit=limit, min_importance=0.0)

    text = clean_for_telegram(text)
    markup = categories_keyboard()

    try:
        if isinstance(target, types.Message):
            await target.answer(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=markup,
            )
        else:
            await target.message.edit_text(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=markup,
            )
            await target.answer(cache_time=0)
    except TelegramBadRequest as e:
        msg = str(e).lower()
        logger.warning("‚ö†Ô∏è Digest send failed: %s", e)
        if not isinstance(target, types.Message) and "message is not modified" in msg:
            try:
                await target.message.edit_reply_markup(reply_markup=markup)
                await target.answer(cache_time=0)
                return
            except Exception:
                pass
        if not isinstance(target, types.Message):
            await target.message.answer(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=markup,
            )
            await target.answer(cache_time=0)

    logger.info("‚úÖ Digest sent: category=%s, count=%d", category, len(news))


@router.message(Command("digest"))
async def cmd_digest(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /digest ‚Üí –≤—ã–≤–æ–¥–∏–º –æ–±—â–∏–π –ø–æ—Ç–æ–∫."""
    await send_digest(message, limit=5, category="all")


@router.callback_query(F.data.startswith("digest:"))
async def cb_digest(query: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Üí –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    category = query.data.split(":", 1)[1] if ":" in query.data else "all"
    await send_digest(query, category=category)
