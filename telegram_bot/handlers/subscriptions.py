"""
Telegram bot handlers for subscription and notification management.

This module provides aiogram v3 handlers for managing user subscriptions
and notifications through Telegram commands.
"""

import logging
from aiogram import Router, types, F
from aiogram.filters import Command

from services.subscription_service import SubscriptionService
from services.notification_service import NotificationService
from services.categories import get_categories
from telegram_bot.keyboards import (
    subscriptions_inline_keyboard,
    categories_inline_keyboard,
    back_inline_keyboard,
)

logger = logging.getLogger(__name__)

# Initialize services
subscription_service = SubscriptionService()
notification_service = NotificationService()

# Create router
router = Router()

# Available notification types
NOTIFICATION_TYPES = ["digest", "events", "breaking"]


# --- COMMAND HANDLERS ---


@router.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    """Handle /subscribe <category> command to add subscription."""
    try:
        # Parse command arguments
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subscribe <category>\n" f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(get_categories())}"
            )
            return

        category = args[1].strip().lower()
        if category not in get_categories():
            await message.answer(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n" f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(get_categories())}"
            )
            return

        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=message.from_user.id, username=message.from_user.username, locale="ru"
        )

        if not user_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # Add subscription
        success = await subscription_service.add(user_id, category)

        if success:
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            await message.answer(f"‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {category}")

    except Exception as e:
        logger.error("Error in cmd_subscribe: %s", e)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")


@router.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: types.Message):
    """Handle /unsubscribe <category> command to remove subscription."""
    try:
        # Parse command arguments
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsubscribe <category>\n" f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(get_categories())}"
            )
            return

        category = args[1].strip().lower()
        if category not in get_categories():
            await message.answer(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n" f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(get_categories())}"
            )
            return

        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=message.from_user.id, username=message.from_user.username, locale="ru"
        )

        if not user_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # Remove subscription
        removed_count = await subscription_service.remove(user_id, category)

        if removed_count > 0:
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category} —É–¥–∞–ª–µ–Ω–∞")
        else:
            await message.answer(f"‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {category}")

    except Exception as e:
        logger.error("Error in cmd_unsubscribe: %s", e)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")


@router.message(Command("my_subs"))
async def cmd_my_subs(message: types.Message):
    """Handle /my_subs command to show user's subscriptions."""
    try:
        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=message.from_user.id, username=message.from_user.username, locale="ru"
        )

        if not user_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # Get subscriptions
        subscriptions = await subscription_service.list(user_id)

        if not subscriptions:
            await message.answer(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                f"–î–æ–±–∞–≤—å—Ç–µ: /subscribe <category>\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(get_categories())}"
            )
        else:
            # Format subscriptions list
            categories = sorted([sub["category"] for sub in subscriptions])
            text = "üìã <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
            for i, category in enumerate(categories, 1):
                text += f"{i}. {category}\n"

            await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error("Error in cmd_my_subs: %s", e)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")


@router.message(Command("categories"))
async def cmd_categories(message: types.Message):
    """Handle /categories command to show available categories."""
    categories_text = ", ".join(sorted(get_categories()))
    await message.answer(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n{categories_text}")


@router.message(Command("help_subs"))
async def cmd_help_subs(message: types.Message):
    """Handle /help_subs command to show subscription help."""
    help_text = """
üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>

/subscribe <category> - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
/unsubscribe <category> - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/my_subs - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/categories - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
{}

üîî <b>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
{}

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/subscribe crypto
/notify_on digest
/notify_off events
""".format(
        ", ".join(get_categories()), ", ".join(NOTIFICATION_TYPES)
    )

    await message.answer(help_text, parse_mode="HTML")


# --- CALLBACK HANDLERS ---


@router.callback_query(F.data == "subscriptions")
async def cb_subscriptions_menu(query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    text = "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await query.message.edit_text(text, parse_mode="HTML", reply_markup=subscriptions_inline_keyboard())


# –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ notifications.py


@router.callback_query(F.data == "my_subs")
async def cb_my_subs(query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback"""
    try:
        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=query.from_user.id, username=query.from_user.username, locale="ru"
        )

        if not user_id:
            await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=back_inline_keyboard())
            return

        # Get subscriptions
        subscriptions = await subscription_service.list(user_id)

        if not subscriptions:
            text = (
                "üìã <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                "–î–æ–±–∞–≤—å—Ç–µ: /subscribe <category>\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(get_categories())}"
            )
        else:
            # Format subscriptions list
            categories = sorted([sub["category"] for sub in subscriptions])
            text = "üìã <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
            for i, category in enumerate(categories, 1):
                text += f"{i}. {category}\n"

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=back_inline_keyboard())

    except Exception as e:
        logger.error("Error in cb_my_subs: %s", e)
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=back_inline_keyboard())


@router.callback_query(F.data == "subscribe_menu")
async def cb_subscribe_menu(query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = "‚ûï <b>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await query.message.edit_text(text, parse_mode="HTML", reply_markup=categories_inline_keyboard("subscribe"))


@router.callback_query(F.data == "unsubscribe_menu")
async def cb_unsubscribe_menu(query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"""
    text = "‚ûñ <b>–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await query.message.edit_text(text, parse_mode="HTML", reply_markup=categories_inline_keyboard("unsubscribe"))


@router.callback_query(F.data.startswith("subscribe:"))
async def cb_subscribe_category(query: types.CallbackQuery):
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        category = query.data.split(":", 1)[1]

        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=query.from_user.id, username=query.from_user.username, locale="ru"
        )

        if not user_id:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # Add subscription
        success = await subscription_service.add(user_id, category)

        if success:
            await query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            await query.answer(f"‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {category}")

        # Return to subscriptions menu (with error handling)
        try:
            await cb_subscriptions_menu(query)
        except Exception as menu_error:
            if "message is not modified" in str(menu_error):
                logger.debug("Menu update skipped (same content): %s", menu_error)
            else:
                raise

    except Exception as e:
        logger.error("Error in cb_subscribe_category: %s", e)
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")


@router.callback_query(F.data.startswith("unsubscribe:"))
async def cb_unsubscribe_category(query: types.CallbackQuery):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = query.data.split(":", 1)[1]

        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=query.from_user.id, username=query.from_user.username, locale="ru"
        )

        if not user_id:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # Remove subscription
        removed_count = await subscription_service.remove(user_id, category)

        if removed_count > 0:
            await query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category} —É–¥–∞–ª–µ–Ω–∞")
        else:
            await query.answer(f"‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {category}")

        # Return to subscriptions menu (with error handling)
        try:
            await cb_subscriptions_menu(query)
        except Exception as menu_error:
            if "message is not modified" in str(menu_error):
                logger.debug("Menu update skipped (same content): %s", menu_error)
            else:
                raise

    except Exception as e:
        logger.error("Error in cb_unsubscribe_category: %s", e)
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")


@router.callback_query(F.data == "my_notifications")
async def cb_my_notifications(query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback"""
    try:
        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=query.from_user.id, username=query.from_user.username, locale="ru"
        )

        if not user_id:
            await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=back_inline_keyboard())
            return

        # Get notifications
        notifications = await notification_service.list(user_id)

        if not notifications:
            text = (
                "üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                f"–í–∫–ª—é—á–∏—Ç–µ: /notify_on <type>\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(NOTIFICATION_TYPES)}"
            )
        else:
            # Format notifications list
            text = "üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
            for i, notif in enumerate(notifications, 1):
                status = "‚úÖ –≤–∫–ª—é—á–µ–Ω–æ" if notif.get("enabled", False) else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–æ"
                frequency = notif.get("frequency", "daily")
                hour = notif.get("preferred_hour", 9)
                text += f"{i}. {notif['type']} - {status}\n"
                if notif.get("enabled", False):
                    if frequency == "instant":
                        text += "   –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ\n"
                    else:
                        text += f"   –ß–∞—Å—Ç–æ—Ç–∞: {frequency}, –≤—Ä–µ–º—è: {hour}:00\n"

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=back_inline_keyboard())

    except Exception as e:
        logger.error("Error in cb_my_notifications: %s", e)
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=back_inline_keyboard())


@router.callback_query(F.data == "notify_on_digest")
async def cb_notify_on_digest(query: types.CallbackQuery):
    """–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    try:
        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=query.from_user.id, username=query.from_user.username, locale="ru"
        )

        if not user_id:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # Enable notification
        await notification_service.enable(user_id, "digest")
        await query.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è digest –≤–∫–ª—é—á–µ–Ω—ã")

        # Return to notifications menu (with error handling)
        try:
            await cb_my_notifications(query)
        except Exception as menu_error:
            if "message is not modified" in str(menu_error):
                logger.debug("Menu update skipped (same content): %s", menu_error)
            else:
                raise

    except Exception as e:
        logger.error("Error in cb_notify_on_digest: %s", e)
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")


@router.callback_query(F.data == "notify_off_digest")
async def cb_notify_off_digest(query: types.CallbackQuery):
    """–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    try:
        # Get or create user
        user_id = await subscription_service.get_or_create_user(
            telegram_id=query.from_user.id, username=query.from_user.username, locale="ru"
        )

        if not user_id:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # Disable notification
        await notification_service.disable(user_id, "digest")
        await query.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è digest –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        # Return to notifications menu (with error handling)
        try:
            await cb_my_notifications(query)
        except Exception as menu_error:
            if "message is not modified" in str(menu_error):
                logger.debug("Menu update skipped (same content): %s", menu_error)
            else:
                raise

    except Exception as e:
        logger.error("Error in cb_notify_off_digest: %s", e)
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
