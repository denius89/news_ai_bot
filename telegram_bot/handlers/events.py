from aiogram import types, Router, F
from aiogram.filters import Command

from telegram_bot.utils.formatters import format_events
from telegram_bot.keyboards import back_inline_keyboard

router = Router()


async def send_events(
    target: types.Message | types.CallbackQuery,
    limit: int = 5,
    min_importance: float = 0.5,
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã (–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ events_new —Å metadata)."""
    from database.db_models import supabase
    from datetime import datetime, timezone, timedelta

    if not supabase:
        text = (
            "‚ö†Ô∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    else:
        # –ß–∏—Ç–∞–µ–º –∏–∑ events_new (—Å metadata!)
        now = datetime.now(timezone.utc)
        future = now + timedelta(days=30)

        result = (
            supabase.table("events_new")
            .select("*")
            .gte("starts_at", now.isoformat())
            .lte("starts_at", future.isoformat())
            .order("starts_at")
            .limit(limit * 2)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            .execute()
        )

        events = result.data or []

        if not events:
            text = (
                "üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π</b>\n\n"
                "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü.\n\n"
                "‚ú® <b>–ß—Ç–æ –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º:</b>\n"
                "‚Ä¢ ü™ô Crypto ‚Äî –ª–∏—Å—Ç–∏–Ω–≥–∏, —Ö–∞—Ä–¥—Ñ–æ—Ä–∫–∏, —Ä–µ–ª–∏–∑—ã\n"
                "‚Ä¢ üèà Sports ‚Äî –º–∞—Ç—á–∏, —Ç—É—Ä–Ω–∏—Ä—ã, —Ñ–∏–Ω–∞–ª—ã\n"
                "‚Ä¢ üìà Markets ‚Äî –æ—Ç—á–µ—Ç—ã, IPO, –¥–∏–≤–∏–¥–µ–Ω–¥—ã\n"
                "‚Ä¢ üíª Tech ‚Äî –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, —Ä–µ–ª–∏–∑—ã, –∞–ø–¥–µ–π—Ç—ã\n"
                "‚Ä¢ üåç World ‚Äî —Å–∞–º–º–∏—Ç—ã, –≤—ã–±–æ—Ä—ã, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏\n\n"
                "–°–æ–±—ã—Ç–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π."
            )
        else:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ importance
            filtered = [e for e in events if (e.get("importance") or 0) >= min_importance]
            filtered = filtered[:limit]

            if not filtered:
                text = (
                    "üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π</b>\n\n"
                    f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é ‚â• {min_importance}\n\n"
                    f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(events)}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
                )
            else:
                header = (
                    "üìÖ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered)} –∏–∑ {len(events)} —Å–æ–±—ã—Ç–∏–π\n"
                    f"–§–∏–ª—å—Ç—Ä: –≤–∞–∂–Ω–æ—Å—Ç—å ‚â• {min_importance}\n\n"
                )
                text = header + format_events(filtered, limit=limit)

    if isinstance(target, types.Message):
        await target.answer(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=back_inline_keyboard(),
        )
    else:
        await target.message.edit_text(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=back_inline_keyboard(),
        )
        await target.answer()


@router.message(Command("events"))
async def cmd_events(message: types.Message):
    await send_events(message)


@router.callback_query(F.data == "events")
async def cb_events(query: types.CallbackQuery):
    await send_events(query)
