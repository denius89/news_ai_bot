# telegram_bot/handlers/digest_ai.py
from datetime import datetime, time, timezone
import pytz
import logging

from aiogram import types, Router, F
from aiogram.filters import Command

from database.db_models import supabase
from digests.generator import generate_digest
from telegram_bot.keyboards import back_inline_keyboard

router = Router()
logger = logging.getLogger("digest_ai")

# ‚öôÔ∏è –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞
LOCAL_TZ = pytz.timezone("Europe/Kyiv")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏
CATEGORIES = {
    "crypto": "üìä Crypto",
    "economy": "üí∞ Economy",
    "world": "üåç World",
    "technology": "‚öôÔ∏è Technology",
    "politics": "üèõÔ∏è Politics",
}


# ---------- –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ ----------
def build_digest_ai_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=label, callback_data=f"digest_ai:{cat}")]
            for cat, label in CATEGORIES.items()
        ]
        + [
            [types.InlineKeyboardButton(text="üìö –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="digest_ai:all")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    )


async def show_digest_ai_menu(target: types.Message | types.CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    kb = build_digest_ai_keyboard()
    text = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞:"

    if isinstance(target, types.Message):
        await target.answer(text, reply_markup=kb)
    elif isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=kb)
        await target.answer()  # –≤–∞–∂–Ω–æ: –±–µ–∑ reply_markup!


# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
@router.message(Command(commands=["digest_ai"], ignore_case=True))
async def cmd_digest_ai(message: types.Message):
    """–í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ /digest_ai"""
    logger.info("üöÄ /digest_ai ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    await show_digest_ai_menu(message)


@router.callback_query(F.data == "digest_ai")
async def cb_digest_ai_menu_root(query: types.CallbackQuery):
    """–í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    await show_digest_ai_menu(query)


@router.callback_query(F.data == "back")
async def cb_digest_ai_menu_back(query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await show_digest_ai_menu(query)


@router.callback_query(F.data.startswith("digest_ai:"))
async def cb_digest_ai(query: types.CallbackQuery):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # ‚ö° –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç ‚Üí —á—Ç–æ–±—ã Telegram –Ω–µ –¥–∞–ª timeout
    await query.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...")

    raw_category = query.data.split(":", 1)[1]
    logger.info(f"‚û°Ô∏è –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {raw_category}")
    category = None if raw_category == "all" else raw_category

    try:
        # –ë–µ—Ä–µ–º –ø–æ–±–æ–ª—å—à–µ –∏–∑ –ë–î (10), —á—Ç–æ–±—ã –ò–ò –±—ã–ª–æ —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        text = generate_digest(limit=10, ai=True, category=category)

        if not text or text.strip() == "":
            await query.message.edit_text("üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return

        # üö® Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí —Ä–µ–∂–µ–º –Ω–∞ –∫—É—Å–∫–∏
        chunks = [text[i : i + 4000] for i in range(0, len(text), 4000)]
        for idx, chunk in enumerate(chunks):
            if idx == 0:
                await query.message.edit_text(
                    chunk,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=back_inline_keyboard(),
                )
            else:
                await query.message.answer(
                    chunk,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}", exc_info=True)
        await query.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")


# (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –±—É–¥—É—â–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ)
def fetch_today_news(category: str | None = None, limit: int = 30) -> list[dict]:
    """–î–æ—Å—Ç–∞—ë–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π)."""
    now_local = datetime.now(LOCAL_TZ)
    today_start = LOCAL_TZ.localize(datetime.combine(now_local.date(), time.min)).astimezone(
        timezone.utc
    )
    today_end = LOCAL_TZ.localize(datetime.combine(now_local.date(), time.max)).astimezone(
        timezone.utc
    )

    query = (
        supabase.table("news")
        .select("title, content, link, published_at, source, category")
        .gte("published_at", today_start.isoformat())
        .lte("published_at", today_end.isoformat())
        .order("published_at", desc=True)
        .limit(limit)
    )

    if category:
        query = query.eq("category", category)

    res = query.execute()
    return res.data or []
