# telegram_bot/handlers/digest_ai.py
import logging
from datetime import datetime, time, timedelta, timezone
from typing import Optional

import pytz
from aiogram import types, Router, F
from aiogram.filters import Command

from digests.generator import generate_digest
from telegram_bot.keyboards import back_inline_keyboard

router = Router()
logger = logging.getLogger("digest_ai")

# ‚öôÔ∏è –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞
LOCAL_TZ = pytz.timezone("Europe/Kyiv")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏
CATEGORIES = {
    "crypto": "üìä Crypto",
    "economy": "üí∞ Economy",
    "world": "üåç World",
    "technology": "‚öôÔ∏è Technology",
    "politics": "üèõÔ∏è Politics",
}


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def build_category_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=label, callback_data=f"digest_ai_category:{cat}")]
            for cat, label in CATEGORIES.items()
        ]
        + [[types.InlineKeyboardButton(text="üìö –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="digest_ai_category:all")]]
        + [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    )


def build_period_keyboard(category: str) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"digest_ai_period:today:{category}")],
            [types.InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data=f"digest_ai_period:7d:{category}")],
            [types.InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data=f"digest_ai_period:30d:{category}")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="digest_ai")],
        ]
    )


async def show_digest_ai_menu(target: types.Message | types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    kb = build_category_keyboard()
    text = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞:"

    if isinstance(target, types.Message):
        await target.answer(text, reply_markup=kb)
    elif isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=kb)
        await target.answer()


# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
@router.message(Command(commands=["digest_ai"], ignore_case=True))
async def cmd_digest_ai(message: types.Message):
    """–í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ /digest_ai"""
    logger.info("üöÄ /digest_ai ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    await show_digest_ai_menu(message)


@router.callback_query(F.data == "digest_ai")
async def cb_digest_ai_menu_root(query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await show_digest_ai_menu(query)


@router.callback_query(F.data == "back")
async def cb_digest_ai_menu_back(query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await show_digest_ai_menu(query)


@router.callback_query(F.data.startswith("digest_ai_category:"))
async def cb_digest_ai_category(query: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞"""
    raw_category = query.data.split(":", 1)[1]
    category = None if raw_category == "all" else raw_category
    logger.info(f"‚û°Ô∏è –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")

    kb = build_period_keyboard(raw_category)
    await query.message.edit_text("üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("digest_ai_period:"))
async def cb_digest_ai_period(query: types.CallbackQuery):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–∏–æ–¥—É"""
    await query.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...")

    _, period, raw_category = query.data.split(":")
    category = None if raw_category == "all" else raw_category
    logger.info(f"‚û°Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, –ø–µ—Ä–∏–æ–¥: {period}")

    now = datetime.now(timezone.utc)
    start, end = None, None

    if period == "today":
        start = datetime.combine(now.date(), time.min, tzinfo=timezone.utc)
        end = datetime.combine(now.date(), time.max, tzinfo=timezone.utc)
    elif period == "7d":
        start = now - timedelta(days=7)
        end = now
    elif period == "30d":
        start = now - timedelta(days=30)
        end = now

    try:
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
        text = generate_digest(ai=True, category=category, limit=30, start=start, end=end)

        if not text or text.strip() == "":
            await query.message.edit_text("üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–µ—Ä–∏–æ–¥—É.")
            return

        # üö® Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí —Ä–µ–∂–µ–º –Ω–∞ –∫—É—Å–∫–∏
        chunks = [text[i:i + 4000] for i in range(0, len(text), 4000)]
        for idx, chunk in enumerate(chunks):
            if idx == 0:
                await query.message.edit_text(
                    chunk,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=back_inline_keyboard(),
                )
            else:
                await query.message.answer(
                    chunk,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}", exc_info=True)
        await query.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
