import logging
import pytz
from aiogram import types, Router, F
from aiogram.filters import Command
from services.unified_digest_service import get_async_digest_service
from telegram_bot.keyboards import back_inline_keyboard
from services.categories import get_categories
from services.subscription_service import get_async_subscription_service
from services.notification_service import get_notification_service
from digests.configs import PERIODS, STYLES
from utils.text.clean_text import clean_for_telegram
from utils.system.progress_animation import (
    show_generation_progress,
    show_quick_progress,
    build_digest_actions_keyboard,
)

router = Router()
logger = logging.getLogger("digest_ai")

LOCAL_TZ = pytz.timezone("Europe/Kyiv")


def build_category_keyboard() -> types.InlineKeyboardMarkup:
    from services.categories import get_emoji_icon

    categories = get_categories()
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"{get_emoji_icon(cat, '')} {cat.title()}",
                    callback_data=f"digest_ai_category:{cat}",
                )
            ]
            for cat in categories
        ]
        + [[types.InlineKeyboardButton(text="üìö –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="digest_ai_category:all")]]
        + [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    )


def build_period_keyboard(category: str) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=label, callback_data=f"digest_ai_period:{period}:{category}")]
            for period, label in PERIODS.items()
        ]
        + [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="digest_ai")]]
    )


def build_style_keyboard(category: str, period: str) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=label, callback_data=f"digest_ai_style:{style}:{category}:{period}")]
            for style, label in STYLES.items()
        ]
        + [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"digest_ai_period:{period}:{category}")]]
    )


async def show_digest_ai_menu(target: types.Message | types.CallbackQuery):
    kb = build_category_keyboard()
    text = (
        "ü§ñ <b>AI-–¥–∞–π–¥–∂–µ—Å—Ç</b>\n\n"
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!\n\n"
        "‚ú® <b>–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:</b>\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ 255 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "‚Ä¢ ML-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ 4 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª—è –Ω–∞ –≤—ã–±–æ—Ä\n"
        "‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n\n"
        "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>"
    )
    if isinstance(target, types.Message):
        await target.answer(text, parse_mode="HTML", reply_markup=kb)
    else:
        await target.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
        await target.answer()


@router.message(Command(commands=["digest_ai"], ignore_case=True))
async def cmd_digest_ai(message: types.Message):
    logger.info("üöÄ /digest_ai ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    await show_digest_ai_menu(message)


@router.callback_query(F.data == "digest_ai")
async def cb_digest_ai_menu_root(query: types.CallbackQuery):
    await show_digest_ai_menu(query)


@router.callback_query(F.data == "back")
async def cb_digest_ai_menu_back(query: types.CallbackQuery):
    await show_digest_ai_menu(query)


@router.callback_query(F.data.startswith("digest_ai_category:"))
async def cb_digest_ai_category(query: types.CallbackQuery):
    raw_category = query.data.split(":", 1)[1]
    kb = build_period_keyboard(raw_category)

    category_display = "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" if raw_category == "all" else raw_category.title()
    text = (
        f"üìö <b>AI-–¥–∞–π–¥–∂–µ—Å—Ç: {category_display}</b>\n\n"
        "‚è±Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>\n"
        "‚Ä¢ <i>–°–µ–≥–æ–¥–Ω—è</i> ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞\n"
        "‚Ä¢ <i>–ó–∞ –Ω–µ–¥–µ–ª—é</i> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –∑–∞ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ <i>–ó–∞ –º–µ—Å—è—Ü</i> ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –º–µ—Å—è—Ü–∞"
    )
    await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await query.answer()


# First definition removed - using the more complete one below


@router.callback_query(F.data.startswith("digest_ai_style:"))
async def cb_digest_ai_style(query: types.CallbackQuery):
    """Handle AI digest style selection with animated progress."""
    try:
        await query.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...", cache_time=0)
    except Exception:
        # Query might already be answered or expired, ignore
        pass

    _, style, raw_category, period = query.data.split(":")
    category = None if raw_category == "all" else raw_category

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

    logger.info(f"‚û°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: category={category}, period={period}, style={style}")

    # Show immediate feedback
    await show_quick_progress(query, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —Ç–µ–±—è...")

    try:
        # Start animated progress
        animation = await show_generation_progress(query)

        # Generate AI digest using async service
        categories_list = None if category == "all" else [category]
        digest_service = get_async_digest_service()
        text = await digest_service.async_build_ai_digest(limit=20, categories=categories_list, style=style)

        # Stop animation
        animation.stop()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if hasattr(text, "__await__"):
            logger.error(f"Got coroutine instead of string: {type(text)}")
            text = "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏"
        else:
            text = clean_for_telegram(text)

        if not text.strip():
            await query.message.edit_text(
                "üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–µ—Ä–∏–æ–¥—É.",
                reply_markup=back_inline_keyboard(),
            )
            return

        # Build personalized header
        username = query.from_user.username or query.from_user.first_name or "–¥—Ä—É–≥"
        header = f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –¥–Ω—è –¥–ª—è @{username}"
        if category and category != "all":
            # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –µ—Å—Ç—å
            header += f" ‚Ä¢ {category.title()}"

        # Prepare final message
        full_text = f"{header}\n\n{text}"

        # Build action keyboard
        actions_kb = build_digest_actions_keyboard(username, category)

        # Send message in chunks
        chunks = [full_text[i : i + 4000] for i in range(0, len(full_text), 4000)]
        for idx, chunk in enumerate(chunks):
            if idx == 0:
                # Edit the progress message with final content
                try:
                    await query.message.edit_text(
                        chunk,
                        parse_mode="HTML",
                        disable_web_page_preview=True,
                        reply_markup=actions_kb,
                    )
                except Exception as e:
                    logger.warning(f"Failed to edit message: {e}")
                    # Fallback: send new message
                    await query.message.answer(
                        chunk,
                        parse_mode="HTML",
                        disable_web_page_preview=True,
                        reply_markup=actions_kb,
                    )
            else:
                await query.message.answer(
                    chunk,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}", exc_info=True)
        try:
            await query.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}", reply_markup=back_inline_keyboard()
            )
        except Exception:
            # Message might be too old to edit, try sending a new one
            try:
                await query.message.answer(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}", reply_markup=back_inline_keyboard()
                )
            except Exception:
                # If all else fails, just log the error
                logger.error("Failed to send error message to user")


@router.callback_query(F.data.startswith("subscribe_category:"))
async def cb_subscribe_category(query: types.CallbackQuery):
    """Handle subscription to category from digest actions."""
    try:
        category = query.data.split(":", 1)[1]
        category_name = get_categories().get(category, {}).get("name", category)

        # Subscribe user to category
        user_id = query.from_user.id
        subscription_service = get_async_subscription_service()
        success = await subscription_service.subscribe_to_category(user_id, category)

        if success:
            await query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

        # Update message to show subscription success
        await query.message.edit_reply_markup(
            reply_markup=build_digest_actions_keyboard(query.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", category)
        )

    except Exception as e:
        logger.error(f"Error in subscribe category: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ", show_alert=True)


@router.callback_query(F.data == "enable_auto_digest")
async def cb_enable_auto_digest(query: types.CallbackQuery):
    """Handle enabling auto-digest notifications."""
    try:
        # Enable auto-digest notifications
        user_id = query.from_user.id
        notification_service = get_notification_service()
        success = await notification_service.enable_auto_digest(user_id, enabled=True)

        if success:
            await query.answer(
                "‚úÖ –ê–≤—Ç–æ-–¥–∞–π–¥–∂–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00",
                show_alert=True,
            )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ-–¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)

    except Exception as e:
        logger.error(f"Error in enable auto digest: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ-–¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)


@router.callback_query(F.data.startswith("digest_ai_period:"))
async def cb_digest_ai_period(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è AI –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    try:
        # –§–æ—Ä–º–∞—Ç: digest_ai_period:period:category
        parts = query.data.split(":", 2)
        if len(parts) >= 3:
            period = parts[1]
            category = parts[2]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
            kb = build_style_keyboard(category, period)

            category_display = "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" if category == "all" else category.title()
            period_display = PERIODS.get(period, period)

            text = (
                f"üìö <b>AI-–¥–∞–π–¥–∂–µ—Å—Ç: {category_display}</b>\n"
                f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: <i>{period_display}</i>\n\n"
                "‚úçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–¥–∞—á–∏:</b>\n\n"
                "üì∞ <b>Newsroom</b> ‚Äî –∫–∞–∫ Reuters/Bloomberg\n"
                "   –§–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã, –±–µ–∑ —ç–º–æ—Ü–∏–π. –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —á—Ç–µ–Ω–∏—è.\n\n"
                "üîç <b>Analytical</b> ‚Äî –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
                "   –ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏–Ω—Å–∞–π—Ç—ã.\n\n"
                "üìñ <b>Magazine</b> ‚Äî storytelling\n"
                "   –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –ø–æ–¥–∞—á–∞, –º–µ—Ç–∞—Ñ–æ—Ä—ã, –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.\n\n"
                "üí¨ <b>Casual</b> ‚Äî —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å\n"
                "   –ü—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –¥—Ä—É–≥–æ–º."
            )
            await query.message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=kb,
            )
            await query.answer()
        else:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"Error in digest_ai_period: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞")
