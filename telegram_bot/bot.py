import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config.core.settings import TELEGRAM_BOT_TOKEN
from telegram_bot.handlers import routers
from utils.logging.logging_setup import setup_logging
from database.service import get_async_service

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
setup_logging()
logger = logging.getLogger("telegram_bot")

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_BOT_TOKEN is not set in environment")


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async_service = get_async_service()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if not async_service.async_mode:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return

    bot = Bot(
        token=TELEGRAM_BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
    for router in routers:
        dp.include_router(router)

    logger.info("üöÄ Telegram bot started")
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ polling —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        await dp.start_polling(
            bot,
            allowed_updates=["message", "callback_query", "inline_query"],
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            timeout=30,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            request_timeout=30,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
            close_bot_session=True,  # –ó–∞–∫—Ä—ã–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        )
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ Telegram-–±–æ—Ç–µ: {e}")
        # –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
        if "Conflict" in str(e):
            logger.error("‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            logger.error("üí° –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã: ./stop_services.sh")
        raise
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
