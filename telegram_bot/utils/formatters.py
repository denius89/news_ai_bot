# telegram_bot/utils/formatters.py
from __future__ import annotations
from datetime import datetime
from html import escape

MAX_TG_LEN = 4000  # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è Telegram (—Ä–µ–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç 4096)


def _clamp_tg(text: str, max_len: int = MAX_TG_LEN) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è Telegram, –¥–æ–±–∞–≤–ª—è—è –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ."""
    if len(text) <= max_len:
        return text
    return text[: max_len - 1] + "‚Ä¶"


def _fmt_dt(iso: str | None) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç ISO-datetime ‚Üí 'DD Mon YYYY, HH:MM' –∏–ª–∏ '‚Äî'."""
    if not iso:
        return "‚Äî"
    try:
        dt = datetime.fromisoformat(iso.replace("Z", "+00:00"))
        return dt.strftime("%d %b %Y, %H:%M")
    except Exception:
        return iso


def _metric_icons(cred: float, imp: float) -> tuple[str, str]:
    """–≠–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ (credibility, importance)."""
    cred_icon = "‚úÖ" if cred > 0.7 else "‚ö†Ô∏è" if cred > 0.4 else "‚ùå"
    imp_icon = "üî•" if imp > 0.7 else "‚ö°" if imp > 0.4 else "üí§"
    return cred_icon, imp_icon


def _short(text: str, n: int = 220) -> str:
    """–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è —Å–Ω–∏–ø–ø–µ—Ç–∞)."""
    text = (text or "").strip()
    if len(text) <= n:
        return text
    return text[: n - 1] + "‚Ä¶"


def country_flag(code: str | None) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ISO-–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ —ç–º–æ–¥–∑–∏-—Ñ–ª–∞–≥."""
    if not code:
        return ""
    code = code.upper()
    if code == "EU":
        return "üá™üá∫"
    try:
        return "".join(chr(127397 + ord(c)) for c in code)
    except Exception:
        return code


# -------- –Ω–æ–≤–æ—Å—Ç–∏ --------


def format_news(news: list[dict], limit: int = 5, min_importance: float = 0.4) -> str:
    if not news:
        return "‚ö†Ô∏è No fresh news"

    filtered = [n for n in news if float(n.get("importance") or 0) >= float(min_importance)]
    if not filtered:
        return "‚ö†Ô∏è No important news today"

    lines = ["üì∞ <b>Top news</b>"]
    for i, item in enumerate(filtered[:limit], start=1):
        title_raw = (item.get("title") or item.get("source") or "Untitled").strip()
        title = escape(title_raw)
        link = item.get("link") or ""
        source = escape(item.get("source") or "‚Äî")
        published = _fmt_dt(item.get("published_at"))

        cred = float(item.get("credibility") or 0.0)
        imp = float(item.get("importance") or 0.0)
        cred_icon, imp_icon = _metric_icons(cred, imp)

        summary = _short(item.get("content") or item.get("summary") or "", 260)
        summary = escape(summary)

        title_line = f'<b>{i}. <a href="{escape(link)}">{title}</a></b>'

        if summary:
            lines.append(
                f"\n{title_line}\n"
                f"{source} ¬∑ {published}\n"
                f"{cred_icon} <b>Credibility:</b> {cred:.2f} ¬∑ "
                f"{imp_icon} <b>Importance:</b> {imp:.2f}\n"
                f"‚Äî {summary}"
            )
        else:
            lines.append(
                f"\n{title_line}\n"
                f"{source} ¬∑ {published}\n"
                f"{cred_icon} <b>Credibility:</b> {cred:.2f} ¬∑ "
                f"{imp_icon} <b>Importance:</b> {imp:.2f}"
            )

    return _clamp_tg("\n".join(lines))


# -------- —Å–æ–±—ã—Ç–∏—è --------


def format_events(events: list[dict], limit: int = 5) -> str:
    """
    –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π (HTML) –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    - –≤—Ä–µ–º—è, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤–∞–∂–Ω–æ—Å—Ç—å
    - –º–µ—Ç—Ä–∏–∫–∏: —Ñ–∞–∫—Ç/–ø—Ä–æ–≥–Ω–æ–∑/–ø—Ä–µ–¥—ã–¥—É—â–µ–µ
    """
    if not events:
        return "‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Å–æ–±—ã—Ç–∏–π"

    lines = ["üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è</b>"]
    for i, ev in enumerate(events[:limit], start=1):
        # –¥–∞—Ç–∞/–≤—Ä–µ–º—è
        when = _fmt_dt(ev.get("event_time"))
        # –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = escape(ev.get("title") or "‚Äî")

        # –≤–∞–∂–Ω–æ—Å—Ç—å (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-3 –≤ 0-1)
        importance_raw = float(ev.get("importance") or 0)
        importance = importance_raw / 3.0 if importance_raw > 0 else 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
        if importance >= 0.8:
            importance_text = "–í—ã—Å–æ–∫–∞—è"
            importance_icon = "üî•"
        elif importance >= 0.5:
            importance_text = "–°—Ä–µ–¥–Ω—è—è"
            importance_icon = "‚ö°"
        else:
            importance_text = "–ù–∏–∑–∫–∞—è"
            importance_icon = "üí§"

        # –º–µ—Ç—Ä–∏–∫–∏
        fact = escape(ev.get("fact") or "‚Äî")
        forecast = escape(ev.get("forecast") or "‚Äî")
        previous = escape(ev.get("previous") or "‚Äî")

        lines.append(
            f"\n<b>{i}. {title}</b>\n"
            f"üìÖ {when}\n"
            f"{importance_icon} <b>–í–∞–∂–Ω–æ—Å—Ç—å:</b> {importance_text}\n"
            f"üìä <b>–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ:</b> {fact} ¬∑ <b>–ü—Ä–æ–≥–Ω–æ–∑:</b> {forecast} ¬∑ <b>–ü—Ä–µ–¥—ã–¥—É—â–µ–µ:</b> {previous}"
        )

    return _clamp_tg("\n".join(lines))


# -------- AI-–¥–∞–π–¥–∂–µ—Å—Ç --------


def format_digest_ai(summary: str, news: list[dict] | None = None, limit: int = 5) -> str:
    """
    –¢–µ–∫—Å—Ç AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞ + –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.
    """
    if not summary:
        return "üì≠ No AI summary"

    lines = ["ü§ñ <b>AI digest</b>", "", escape(summary.strip())]

    if news:
        lines.append("")
        lines.append("üîó <b>Links:</b>")
        for i, item in enumerate(news[:limit], start=1):
            title_raw = (item.get("title") or item.get("source") or "Untitled").strip()
            title = escape(title_raw)
            link = escape(item.get("link") or "")
            lines.append(f'{i}. <a href="{link}">{title}</a>')

    return _clamp_tg("\n".join(lines))
