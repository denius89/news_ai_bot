#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PulseAI
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./check_processes.sh            - –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
#   ./check_processes.sh --brief    - –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
#   ./check_processes.sh --detailed - –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—è–≤–Ω–æ)
#
# –ê–≤—Ç–æ—Ä: PulseAI Team
# –í–µ—Ä—Å–∏—è: 2.0

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
MODE="detailed"

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
for arg in "$@"; do
    case $arg in
        --brief|-b)
            MODE="brief"
            shift
            ;;
        --detailed|-d)
            MODE="detailed"
            shift
            ;;
        --help|-h)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]"
            echo ""
            echo "OPTIONS:"
            echo "  --brief, -b       –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞"
            echo "  --detailed, -d    –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  --help, -h        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0                # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
            echo "  $0 --brief        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $arg${NC}"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
done

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–≤
SCRIPT_LOG_DIR="logs/scripts"
mkdir -p "$SCRIPT_LOG_DIR"

# –§–∞–π–ª –ª–æ–≥–∞ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
LOG_FILE="$SCRIPT_LOG_DIR/check_processes_$(date +%Y%m%d_%H%M%S).log"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level="$1"
    shift
    local message="$@"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∂–∏–º)
check_process_brief() {
    local process_name="$1"
    local lock_file="$2"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    local pid=$(pgrep -f "$process_name" | head -1)
    
    if [ -n "$pid" ]; then
        echo -e "‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å ${CYAN}$process_name${NC} —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: ${YELLOW}$pid${NC})"
        log "INFO" "–ü—Ä–æ—Ü–µ—Å—Å $process_name –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º lock —Ñ–∞–π–ª
        if [ -f "$lock_file" ]; then
            local lock_pid=$(cat "$lock_file")
            if [ "$lock_pid" = "$pid" ]; then
                echo -e "  ${GREEN}‚úÖ Lock —Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—É${NC}"
                log "INFO" "Lock —Ñ–∞–π–ª $lock_file —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—É"
                return 0
            else
                echo -e "  ${RED}‚ùå Lock —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª${NC}"
                log "WARNING" "Lock —Ñ–∞–π–ª $lock_file —É—Å—Ç–∞—Ä–µ–ª (—Å–æ–¥–µ—Ä–∂–∏—Ç PID: $lock_pid)"
            fi
        fi
        
        return 1
    else
        echo -e "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${CYAN}$process_name${NC} –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        log "INFO" "–ü—Ä–æ—Ü–µ—Å—Å $process_name –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
check_process_detailed() {
    local process_pattern="$1"
    local process_name="$2"
    local expected_port="$3"
    local check_url="$4"
    
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ $process_name...${NC}"
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: $process_name"
    
    if pgrep -f "$process_pattern" > /dev/null; then
        echo -e "${GREEN}‚úÖ $process_name –∑–∞–ø—É—â–µ–Ω${NC}"
        log "SUCCESS" "$process_name –∑–∞–ø—É—â–µ–Ω"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        pgrep -f "$process_pattern" | while read pid; do
            local cmd=$(ps -p $pid -o command= 2>/dev/null || echo '–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            local cpu=$(ps -p $pid -o %cpu= 2>/dev/null || echo 'N/A')
            local mem=$(ps -p $pid -o %mem= 2>/dev/null || echo 'N/A')
            local time=$(ps -p $pid -o etime= 2>/dev/null || echo 'N/A')
            
            echo -e "   ${CYAN}PID:${NC} $pid"
            echo -e "   ${CYAN}CPU:${NC} $cpu%"
            echo -e "   ${CYAN}Memory:${NC} $mem%"
            echo -e "   ${CYAN}Uptime:${NC} $time"
            echo -e "   ${CYAN}Command:${NC} $cmd"
            
            log "INFO" "PID: $pid, CPU: $cpu%, Memory: $mem%, Uptime: $time"
        done
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if [ -n "$expected_port" ]; then
            if lsof -i ":$expected_port" > /dev/null 2>&1; then
                echo -e "   ${GREEN}‚úÖ –ü–æ—Ä—Ç $expected_port –∑–∞–Ω—è—Ç${NC}"
                log "SUCCESS" "–ü–æ—Ä—Ç $expected_port –∑–∞–Ω—è—Ç"
            else
                echo -e "   ${YELLOW}‚ö†Ô∏è –ü–æ—Ä—Ç $expected_port —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
                log "WARNING" "–ü–æ—Ä—Ç $expected_port —Å–≤–æ–±–æ–¥–µ–Ω"
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
        if [ -n "$check_url" ]; then
            if curl -s "$check_url" > /dev/null 2>&1; then
                echo -e "   ${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ $check_url${NC}"
                log "SUCCESS" "–î–æ—Å—Ç—É–ø–µ–Ω –ø–æ $check_url"
            else
                echo -e "   ${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ $check_url${NC}"
                log "ERROR" "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ $check_url"
            fi
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå $process_name –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        log "ERROR" "$process_name –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    echo -e "${BLUE}üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...${NC}"
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤"
    
    local ports=("8001:Flask WebApp" "3000:React Dev Server")
    
    for port_info in "${ports[@]}"; do
        local port=$(echo $port_info | cut -d: -f1)
        local service=$(echo $port_info | cut -d: -f2)
        
        if lsof -i ":$port" > /dev/null 2>&1; then
            local pid=$(lsof -i ":$port" | tail -n +2 | awk '{print $2}' | head -1)
            echo -e "   ${GREEN}‚úÖ –ü–æ—Ä—Ç $port ($service) –∑–∞–Ω—è—Ç PID: $pid${NC}"
            log "SUCCESS" "–ü–æ—Ä—Ç $port ($service) –∑–∞–Ω—è—Ç PID: $pid"
        else
            echo -e "   ${YELLOW}‚ö†Ô∏è –ü–æ—Ä—Ç $port ($service) —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
            log "WARNING" "–ü–æ—Ä—Ç $port ($service) —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare Tunnel
check_cloudflare() {
    echo -e "${BLUE}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Cloudflare Tunnel...${NC}"
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ Cloudflare Tunnel"
    
    if pgrep -f "cloudflared" > /dev/null; then
        echo -e "${GREEN}‚úÖ Cloudflare Tunnel –∑–∞–ø—É—â–µ–Ω${NC}"
        log "SUCCESS" "Cloudflare Tunnel –∑–∞–ø—É—â–µ–Ω"
        
        pgrep -f "cloudflared" | while read pid; do
            local cmd=$(ps -p $pid -o command= 2>/dev/null || echo '–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            local cpu=$(ps -p $pid -o %cpu= 2>/dev/null || echo 'N/A')
            local mem=$(ps -p $pid -o %mem= 2>/dev/null || echo 'N/A')
            local time=$(ps -p $pid -o etime= 2>/dev/null || echo 'N/A')
            
            echo -e "   ${CYAN}PID:${NC} $pid"
            echo -e "   ${CYAN}CPU:${NC} $cpu%"
            echo -e "   ${CYAN}Memory:${NC} $mem%"
            echo -e "   ${CYAN}Uptime:${NC} $time"
            echo -e "   ${CYAN}Command:${NC} $cmd"
            
            log "INFO" "Cloudflare PID: $pid, CPU: $cpu%, Memory: $mem%"
        done
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        WEBAPP_URL=$(python3 -c "
import sys
sys.path.append('/Users/denisfedko/news_ai_bot')
try:
    from config.core.cloudflare import CLOUDFLARE_TUNNEL_URL
    print(CLOUDFLARE_TUNNEL_URL)
except Exception as e:
    print(f'Error: {e}', file=sys.stderr)
    sys.exit(1)
" 2>/dev/null || echo "ERROR: Cannot load Cloudflare configuration")
        
        echo -e "   ${CYAN}URL:${NC} $WEBAPP_URL"
        log "INFO" "Cloudflare URL: $WEBAPP_URL"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if curl -s "$WEBAPP_URL/webapp" > /dev/null 2>&1; then
            echo -e "   ${GREEN}‚úÖ Cloudflare Tunnel –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            log "SUCCESS" "Cloudflare Tunnel –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            echo -e "   ${RED}‚ùå Cloudflare Tunnel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            log "ERROR" "Cloudflare Tunnel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå Cloudflare Tunnel –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        log "ERROR" "Cloudflare Tunnel –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
show_summary() {
    echo ""
    echo -e "${BLUE}üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê${NC}"
    echo "=================================================="
    
    local flask_count=$(pgrep -f "python3 src/webapp.py" | wc -l)
    local bot_count=$(pgrep -f "telegram_bot" | wc -l)
    local cloudflare_count=$(pgrep -f "cloudflared" | wc -l)
    
    echo -e "${CYAN}Flask WebApp –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:${NC} $flask_count"
    echo -e "${CYAN}Telegram Bot –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:${NC} $bot_count"
    echo -e "${CYAN}Cloudflare Tunnel –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:${NC} $cloudflare_count"
    
    log "INFO" "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - Flask: $flask_count, Bot: $bot_count, Cloudflare: $cloudflare_count"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PID —Ñ–∞–π–ª—ã
    echo ""
    echo -e "${BLUE}üìÅ PID –§–ê–ô–õ–´${NC}"
    echo "=================================================="
    
    if [ -f ".flask.pid" ]; then
        local flask_pid=$(cat .flask.pid)
        if ps -p $flask_pid > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ .flask.pid: $flask_pid (–∞–∫—Ç–∏–≤–µ–Ω)${NC}"
            log "SUCCESS" ".flask.pid: $flask_pid (–∞–∫—Ç–∏–≤–µ–Ω)"
        else
            echo -e "${RED}‚ùå .flask.pid: $flask_pid (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)${NC}"
            log "ERROR" ".flask.pid: $flask_pid (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è .flask.pid –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        log "WARNING" ".flask.pid –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ -f ".bot.pid" ]; then
        local bot_pid=$(cat .bot.pid)
        if ps -p $bot_pid > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ .bot.pid: $bot_pid (–∞–∫—Ç–∏–≤–µ–Ω)${NC}"
            log "SUCCESS" ".bot.pid: $bot_pid (–∞–∫—Ç–∏–≤–µ–Ω)"
        else
            echo -e "${RED}‚ùå .bot.pid: $bot_pid (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)${NC}"
            log "ERROR" ".bot.pid: $bot_pid (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è .bot.pid –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        log "WARNING" ".bot.pid –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º lock —Ñ–∞–π–ª—ã
    echo ""
    echo -e "${BLUE}üîí LOCK –§–ê–ô–õ–´${NC}"
    echo "=================================================="
    
    if [ -f ".flask.lock" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è .flask.lock –Ω–∞–π–¥–µ–Ω${NC}"
        log "WARNING" ".flask.lock –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ -f ".bot.lock" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è .bot.lock –Ω–∞–π–¥–µ–Ω${NC}"
        log "WARNING" ".bot.lock –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ ! -f ".flask.lock" ] && [ ! -f ".bot.lock" ]; then
        echo -e "${GREEN}‚úÖ Lock —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
        log "SUCCESS" "Lock —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ö—Ä–∞—Ç–∫–∏–π —Ä–µ–∂–∏–º
run_brief_check() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PulseAI (–∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∂–∏–º)${NC}"
    log "INFO" "–ó–∞–ø—É—Å–∫ –∫—Ä–∞—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Flask WebApp
    check_process_brief "python3 src/webapp.py" ".flask.pid"
    flask_running=$?
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Bot
    check_process_brief "python3 -m telegram_bot.bot" ".bot.pid"
    bot_running=$?
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞
    other_bots=$(pgrep -f "telegram_bot" | wc -l)
    if [ "$other_bots" -gt 1 ]; then
        echo -e "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $other_bots —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Telegram Bot!${NC}"
        echo -e "${CYAN}üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ./stop_services.sh${NC}"
        log "ERROR" "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $other_bots —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Telegram Bot"
    fi
    
    echo ""
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å:${NC}"
    echo -e "  Flask WebApp: $([ $flask_running -eq 1 ] && echo "${GREEN}–∑–∞–ø—É—â–µ–Ω${NC}" || echo "${YELLOW}–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}")"
    echo -e "  Telegram Bot: $([ $bot_running -eq 1 ] && echo "${GREEN}–∑–∞–ø—É—â–µ–Ω${NC}" || echo "${YELLOW}–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}")"
    
    if [ $flask_running -eq 1 ] && [ $bot_running -eq 1 ]; then
        echo -e "${GREEN}‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç${NC}"
        log "SUCCESS" "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã${NC}"
        log "WARNING" "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
        return 1
    fi
}

# –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
run_detailed_check() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PulseAI —Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)${NC}"
    echo "=================================================="
    log "INFO" "–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    check_process_detailed "python3 src/webapp.py" "Flask WebApp" "8001" "http://localhost:8001/webapp"
    echo ""
    
    check_process_detailed "telegram_bot" "Telegram Bot" "" ""
    echo ""
    
    check_cloudflare
    echo ""
    
    check_ports
    echo ""
    
    show_summary
    
    echo ""
    echo -e "${BLUE}üí° –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø${NC}"
    echo "=================================================="
    echo -e "${CYAN}–ó–∞–ø—É—Å–∫:${NC} ./start_services.sh"
    echo -e "${CYAN}–û—Å—Ç–∞–Ω–æ–≤–∫–∞:${NC} ./stop_services.sh"
    echo -e "${CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞:${NC} ./check_processes.sh"
    echo -e "${CYAN}–õ–æ–≥–∏:${NC} tail -f logs/*.log"
    echo -e "${CYAN}–õ–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏:${NC} $LOG_FILE"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    if [ "$MODE" = "brief" ]; then
        run_brief_check
    else
        run_detailed_check
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
