#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.
"""

import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from digests.rag_system import DigestRAGSystem, get_rag_context


def test_rag_reload():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ samples.json."""

    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É RAG —Å–∏—Å—Ç–µ–º—ã...")

    # –°–æ–∑–¥–∞–µ–º RAG —Å–∏—Å—Ç–µ–º—É
    rag_system = DigestRAGSystem()

    print(f"üìä –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(rag_system.samples)} –ø—Ä–∏–º–µ—Ä–æ–≤")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = set()
    styles = set()
    sources = set()

    for sample in rag_system.samples[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–º–µ—Ä–æ–≤
        categories.add(sample.get("category", "unknown"))
        styles.add(sample.get("style", "unknown"))
        sources.add(sample.get("source", "unknown"))

    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(categories)}")
    print(f"–°—Ç–∏–ª–∏: {list(styles)}")
    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {list(sources)}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã...")
    rag_system.reload_samples()
    print(f"üìä –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {len(rag_system.samples)} –ø—Ä–∏–º–µ—Ä–æ–≤")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:")

    relevant = rag_system.find_relevant_samples(
        category="crypto", subcategory="bitcoin", style="analytical", max_samples=3
    )

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(relevant)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è crypto/bitcoin")

    for i, item in enumerate(relevant, 1):
        sample = item["sample"]
        score = item["score"]
        print(f"  {i}. {sample.get('source', 'Unknown')} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.1f})")
        print(f"     –°–ª–æ–≤: {sample.get('word_count', 0)}")
        print(f"     –ù–∞—á–∞–ª–æ: {sample.get('digest', '')[:100]}...")
        print()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_rag_context (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç reload_samples –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º get_rag_context:")
    context = get_rag_context(category="crypto", subcategory="bitcoin", style="analytical", max_samples=2)

    print(f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context[:200]}...")

    return len(rag_system.samples), len(relevant)


if __name__ == "__main__":
    total_samples, relevant_count = test_rag_reload()
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {total_samples}")
    print(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {relevant_count}")
    print(f"\nüí° –¢–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤ data/digest_training/samples.json,")
    print(f"   —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ!")
