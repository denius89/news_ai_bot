#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ –∏ WebApp –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã: start, stop, restart, status, logs
"""

import os
import sys
import time
import argparse
import subprocess
from pathlib import Path
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

    ensure_dirs,
    write_pid,
    read_pid,
    is_running,
    kill_gracefully,
    find_entrypoints,
    check_port_available,
    find_webapp_port,
    cleanup_pid_file,
    find_processes_by_command,
    load_env_file,
)


class ProcessManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –±–æ—Ç–∞ –∏ WebApp."""

    def __init__(self):
        self.entrypoints = find_entrypoints()
        self.processes = {}

    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ WebApp...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        load_env_file()

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        ensure_dirs()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        self._stop_existing_processes()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç WebApp
        self._check_webapp_port()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        success = True

        for name, command in self.entrypoints.items():
            if not self._start_process(name, command):
                success = False

        if success:
            print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìã –õ–æ–≥–∏ –±–æ—Ç–∞: logs/bot.log")
            print(f"üìã –õ–æ–≥–∏ WebApp: logs/webapp.log")
            print("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: make logs")
            print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: make stop-all")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
            sys.exit(1)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

        stopped_count = 0

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ PID —Ñ–∞–π–ª–∞–º
        for name in ["bot", "webapp"]:
            pid = read_pid(name)
            if pid and is_running(pid):
                print(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {name} (PID: {pid})...")
                if kill_gracefully(pid):
                    cleanup_pid_file(name)
                    stopped_count += 1
                    print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {name}")

        # –ï—Å–ª–∏ PID —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –∏—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        if stopped_count == 0:
            command_patterns = []
            for name, command in self.entrypoints.items():
                if len(command) > 1:
                    command_patterns.append(command[1])  # –ò–º—è —Å–∫—Ä–∏–ø—Ç–∞

            if command_patterns:
                pids = find_processes_by_command(command_patterns)
                for pid in pids:
                    if is_running(pid):
                        print(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å (PID: {pid})...")
                        if kill_gracefully(pid):
                            stopped_count += 1
                            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        if stopped_count > 0:
            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            print("‚ÑπÔ∏è  –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    def restart(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        self.stop()
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self.start()

    def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
        print("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
        print("-" * 50)

        for name in ["bot", "webapp"]:
            pid = read_pid(name)
            if pid and is_running(pid):
                print(f"‚úÖ {name.upper()}: –∑–∞–ø—É—â–µ–Ω (PID: {pid})")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–æ–≥–∞
                log_file = Path(f"logs/{name}.log")
                if log_file.exists():
                    mtime = log_file.stat().st_mtime
                    mtime_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(mtime))
                    print(f"   üìù –õ–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: {mtime_str}")
            else:
                print(f"‚ùå {name.upper()}: –Ω–µ –∑–∞–ø—É—â–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç WebApp
        port = find_webapp_port()
        if port:
            if check_port_available(port):
                print(f"üîå –ü–æ—Ä—Ç {port}: —Å–≤–æ–±–æ–¥–µ–Ω")
            else:
                print(f"‚ö†Ô∏è  –ü–æ—Ä—Ç {port}: –∑–∞–Ω—è—Ç")

    def logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
        print("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –∫–∞–∂–¥–æ–≥–æ):")
        print("-" * 60)

        for name in ["bot", "webapp"]:
            log_file = Path(f"logs/{name}.log")
            if log_file.exists():
                print(f"\nüîπ {name.upper()} LOGS:")
                print("-" * 30)
                try:
                    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                    with open(log_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        last_lines = lines[-100:] if len(lines) > 100 else lines
                        for line in last_lines:
                            print(line.rstrip())
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            else:
                print(f"\n‚ö†Ô∏è  –õ–æ–≥ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        print("\nüí° –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   tail -f logs/bot.log logs/webapp.log")

    def _stop_existing_processes(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."""
        for name in ["bot", "webapp"]:
            pid = read_pid(name)
            if pid and is_running(pid):
                print(f"üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å {name}...")
                kill_gracefully(pid)
                cleanup_pid_file(name)

    def _check_webapp_port(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ WebApp –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        port = find_webapp_port()
        if port and not check_port_available(port):
            print(f"‚ö†Ô∏è  –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç!")
            print("üõë –ü—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç...")

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç
            if cleanup_pid_file('webapp'):
                print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å WebApp –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Ä—Ç—É –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                if check_port_available(port):
                    print(f"‚úÖ –ü–æ—Ä—Ç {port} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
                else:
                    print(f"‚ùå –ü–æ—Ä—Ç {port} –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç")
                    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: make free-ports")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: make free-ports")

    def _start_process(self, name: str, command: List[str]) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å."""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
            log_file = open(f"logs/{name}.log", "w", encoding="utf-8")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = subprocess.Popen(
                command,
                stdout=log_file,
                stderr=subprocess.STDOUT,
                cwd=project_root,
                env=os.environ.copy(),
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
            write_pid(name, process.pid)
            self.processes[name] = process

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
            if is_running(process.pid):
                print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                return True
            else:
                print(f"‚ùå {name} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                cleanup_pid_file(name)
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram-–±–æ—Ç–æ–º –∏ WebApp",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python tools/run_all.py start     # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ
  python tools/run_all.py stop      # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ  
  python tools/run_all.py restart   # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ
  python tools/run_all.py status    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  python tools/run_all.py logs      # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏

–ò–ª–∏ —á–µ—Ä–µ–∑ Makefile:
  make run-all      # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ
  make stop-all     # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ
  make restart-all  # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ
  make status       # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  make logs         # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
        """,
    )

    parser.add_argument(
        "command",
        choices=["start", "stop", "restart", "status", "logs"],
        help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    if not Path("Makefile").exists() and not Path("webapp.py").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)

    manager = ProcessManager()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã entrypoints
    if not manager.entrypoints:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã entrypoints –¥–ª—è –±–æ—Ç–∞ –∏–ª–∏ WebApp")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã webapp.py –∏ telegram_bot/bot.py —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        sys.exit(1)

    print(f"üîç –ù–∞–π–¥–µ–Ω—ã entrypoints:")
    for name, command in manager.entrypoints.items():
        print(f"   {name}: {' '.join(command)}")
    print()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    if args.command == "start":
        manager.start()
    elif args.command == "stop":
        manager.stop()
    elif args.command == "restart":
        manager.restart()
    elif args.command == "status":
        manager.status()
    elif args.command == "logs":
        manager.logs()


if __name__ == "__main__":
    main()
