#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ PulseAI (–±–æ—Ç + WebApp).
"""

import argparse
import os
import signal
import subprocess
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

def kill_processes():
    """–£–±–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏
        subprocess.run(["pkill", "-f", "telegram_bot.bot"], check=False)
        subprocess.run(["pkill", "-f", "webapp.py"], check=False)
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def start_processes():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ."""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        bot_process = subprocess.Popen([
            sys.executable, "-m", "telegram_bot.bot"
        ], stdout=open("logs/bot.log", "w"), stderr=subprocess.STDOUT)
        
        time.sleep(2)  # –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        print("üåê –ó–∞–ø—É—Å–∫ WebApp...")
        webapp_process = subprocess.Popen([
            sys.executable, "webapp.py"
        ], stdout=open("logs/webapp.log", "w"), stderr=subprocess.STDOUT)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        with open("logs/bot.pid", "w") as f:
            f.write(str(bot_process.pid))
        with open("logs/webapp.pid", "w") as f:
            f.write(str(webapp_process.pid))
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print(f"ü§ñ –ë–æ—Ç PID: {bot_process.pid}")
        print(f"üåê WebApp PID: {webapp_process.pid}")
        print("üìù –õ–æ–≥–∏: logs/bot.log, logs/webapp.log")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        return False
    
    return True

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
    print("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PulseAI:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
    try:
        result = subprocess.run(["pgrep", "-f", "telegram_bot.bot"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Telegram –±–æ—Ç: –ó–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå Telegram –±–æ—Ç: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        print("‚ùå Telegram –±–æ—Ç: –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        result = subprocess.run(["pgrep", "-f", "webapp.py"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ WebApp: –ó–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå WebApp: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        print("‚ùå WebApp: –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    try:
        result = subprocess.run(["lsof", "-i", ":8001"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ WebApp –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
        else:
            print("‚ùå WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
    except:
        print("‚ùì –°—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞ 8001 –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

def show_logs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
    print("üìù –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
    
    bot_log = Path("logs/bot.log")
    webapp_log = Path("logs/webapp.log")
    
    if bot_log.exists():
        print(f"\nü§ñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ –±–æ—Ç–∞ ({bot_log}):")
        try:
            with open(bot_log, "r") as f:
                lines = f.readlines()
                for line in lines[-10:]:
                    print(f"  {line.strip()}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞ –±–æ—Ç–∞: {e}")
    else:
        print("‚ùå –õ–æ–≥ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if webapp_log.exists():
        print(f"\nüåê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ WebApp ({webapp_log}):")
        try:
            with open(webapp_log, "r") as f:
                lines = f.readlines()
                for line in lines[-10:]:
                    print(f"  {line.strip()}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞ WebApp: {e}")
    else:
        print("‚ùå –õ–æ–≥ WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ PulseAI")
    parser.add_argument("action", choices=["start", "stop", "restart", "status", "logs"],
                       help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    if args.action == "start":
        kill_processes()
        time.sleep(1)
        start_processes()
    elif args.action == "stop":
        kill_processes()
    elif args.action == "restart":
        kill_processes()
        time.sleep(2)
        start_processes()
    elif args.action == "status":
        show_status()
    elif args.action == "logs":
        show_logs()

if __name__ == "__main__":
    main()