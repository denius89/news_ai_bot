#!/usr/bin/env python3
"""
PulseAI Template Consistency Checker
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç includes –∏ base.html
"""

import os
import re
from pathlib import Path


def check_templates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–æ–≤."""
    templates_dir = Path("templates")
    issues = []

    # –ù–∞–π—Ç–∏ –≤—Å–µ HTML —à–∞–±–ª–æ–Ω—ã
    html_files = list(templates_dir.rglob("*.html"))

    for html_file in html_files:
        print(f"–ü—Ä–æ–≤–µ—Ä—è—é {html_file}...")

        try:
            with open(html_file, "r", encoding="utf-8") as f:
                content = f.read()
        except Exception as e:
            issues.append(f"‚ùå {html_file}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        checks = [check_doctype, check_includes, check_base_extend, check_inline_styles, check_meta_tags]

        for check_func in checks:
            result = check_func(html_file, content)
            if result:
                issues.append(result)

    # –û—Ç—á—ë—Ç
    print("\n" + "=" * 60)
    print("üìä –û–¢–ß–Å–¢ –ü–†–û–í–ï–†–ö–ò –®–ê–ë–õ–û–ù–û–í")
    print("=" * 60)

    if issues:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º:")
        for issue in issues:
            print(f"  {issue}")
    else:
        print("‚úÖ –í—Å–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º!")

    return len(issues) == 0


def check_doctype(file_path, content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ DOCTYPE."""
    # Includes –∏ component —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å DOCTYPE
    parts = file_path.parts
    if len(parts) >= 2 and parts[-2] == "includes":
        return None
    if len(parts) >= 3 and parts[-3] == "components":
        return None

    if not content.strip().startswith("<!DOCTYPE html>"):
        return f"‚ùå {file_path}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç <!DOCTYPE html>"
    return None


def check_includes(file_path, content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ includes."""
    # Includes —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    parts = file_path.parts
    if len(parts) >= 2 and parts[-2] == "includes":
        return None
    if len(parts) >= 3 and parts[-3] == "components":
        return None

    if file_path.name == "base.html":
        return None  # base.html –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Å–∞–º —Å–µ–±—è

    if file_path.name == "webapp.html":
        # WebApp –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π includes
        if "{% include 'includes/webapp_head.html' %}" not in content:
            return f"‚ùå {file_path}: –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å includes/webapp_head.html"
        return None

    # –û–±—ã—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å base.html
    if '{% extends "base.html" %}' in content:
        # –ï—Å–ª–∏ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç base.html, includes –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        return None
    elif "{% extends" in content:
        if "{% include 'includes/head.html' %}" not in content:
            return f"‚ùå {file_path}: –î–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å includes/head.html —á–µ—Ä–µ–∑ base.html"

    return None


def check_base_extend(file_path, content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç base.html."""
    # Includes –∏ component —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è
    parts = file_path.parts
    if len(parts) >= 2 and parts[-2] == "includes":
        return None
    if len(parts) >= 3 and parts[-3] == "components":
        return None

    if file_path.name in ["base.html", "webapp.html"]:
        return None  # –≠—Ç–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è

    if "{% extends" not in content:
        return f"‚ùå {file_path}: –î–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç base.html"

    if '{% extends "base.html" %}' not in content:
        return f"‚ùå {file_path}: –î–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç base.html"

    return None


def check_inline_styles(file_path, content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ inline —Å—Ç–∏–ª–µ–π."""
    inline_style_patterns = [
        r'style\s*=\s*["\'][^"\']*["\']',
        r"<style[^>]*>.*?</style>",
    ]

    for pattern in inline_style_patterns:
        matches = re.findall(pattern, content, re.DOTALL | re.IGNORECASE)
        if matches:
            return f"‚ö†Ô∏è  {file_path}: –ù–∞–π–¥–µ–Ω—ã inline —Å—Ç–∏–ª–∏ ({len(matches)} —à—Ç.)"

    return None


def check_meta_tags(file_path, content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö meta —Ç–µ–≥–æ–≤."""
    # Includes –∏ component —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    parts = file_path.parts
    if len(parts) >= 2 and parts[-2] == "includes":
        return None
    if len(parts) >= 3 and parts[-3] == "components":
        return None

    if file_path.name == "webapp.html":
        return None  # WebApp –∏–º–µ–µ—Ç —Å–≤–æ–∏ meta —Ç–µ–≥–∏

    required_meta = ['charset="utf-8"', 'name="viewport"', 'name="description"']

    missing_meta = []
    for meta in required_meta:
        if meta not in content:
            missing_meta.append(meta)

    if missing_meta and '{% extends "base.html" %}' in content:
        # –ï—Å–ª–∏ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç base.html, meta —Ç–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ base
        return None

    if missing_meta:
        return f"‚ùå {file_path}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç meta —Ç–µ–≥–∏: {', '.join(missing_meta)}"

    return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–æ–≤ PulseAI...")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    os.chdir(project_root)

    success = check_templates()

    if success:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —à–∞–±–ª–æ–Ω–∞—Ö!")
        return 1


if __name__ == "__main__":
    exit(main())
