#!/usr/bin/env python3
"""
–¢–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
"""

import sys
import asyncio
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from digests.rag_system import DigestRAGSystem, get_rag_context
from models.news import NewsItem
from datetime import datetime


def test_rag_system():
    """–¢–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã."""

    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É...")

    # Create RAG system
    rag_system = DigestRAGSystem()

    # Test finding relevant samples
    relevant_samples = rag_system.find_relevant_samples(
        category="crypto", subcategory="bitcoin", style="analytical", max_samples=3
    )

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(relevant_samples)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")

    for i, item in enumerate(relevant_samples, 1):
        sample = item["sample"]
        score = item["score"]
        print(f"–ü—Ä–∏–º–µ—Ä {i}: {sample.get('source')} - –æ—Ü–µ–Ω–∫–∞ {score:.1f}")
        print(f"  –°–ª–æ–≤: {sample.get('word_count')}")
        print(f"  –ù–∞—á–∞–ª–æ: {sample.get('digest', '')[:100]}...")

    # Test context creation
    if relevant_samples:
        context = rag_system.create_rag_context(relevant_samples)
        print(f"\nüìö –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context[:200]}...")

    # Test style recommendations
    style_rec = rag_system.get_style_guidance("crypto", "bitcoin", "analytical")
    print(f"\nüé® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é:")
    print(f"  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {style_rec['avg_word_count']} —Å–ª–æ–≤")
    print(f"  –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {style_rec['structure_pattern']}")
    print(f"  –ü—Ä–∏–º–µ—Ä–æ–≤: {style_rec['sample_count']}")


def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏."""

    print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏...")

    # Create dummy news items
    dummy_news = [
        NewsItem(
            id="test-1",
            title="Bitcoin –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞",
            content="BTC –ø–æ–∫–∞–∑–∞–ª —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ —Ñ–æ–Ω–µ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞",
            published_at=datetime.utcnow(),
            source="TestSource",
            category="crypto",
            subcategory="bitcoin",
        )
    ]

    # Test RAG context generation
    context = get_rag_context(
        category="crypto", subcategory="bitcoin", style="analytical", news_items=dummy_news, max_samples=2
    )

    print(f"‚úÖ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
    if context:
        print(f"–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã: {'–ü–†–ò–ú–ï–†–´ –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –î–ê–ô–î–ñ–ï–°–¢–û–í' in context}")


if __name__ == "__main__":
    test_rag_system()
    test_integration()
