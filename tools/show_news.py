#!/usr/bin/env python3
import argparse
import os
from datetime import datetime, timedelta, timezone
from typing import Optional

from dotenv import load_dotenv
from supabase import create_client


def show_latest_news(
    limit: int = 5,
    source: Optional[str] = None,
    category: Optional[str] = None,
    days: Optional[int] = None,
):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã Supabase.
    –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ source (CoinDesk, Bloomberg...) –∏ –ø–æ category (crypto, economy, tech...),
    –∞ —Ç–∞–∫–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–æ –¥–∞–≤–Ω–æ—Å—Ç–∏ (days).
    """
    load_dotenv()
    url = os.getenv("SUPABASE_URL")
    key = os.getenv("SUPABASE_KEY")

    if not url or not key:
        print("‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")
        return

    client = create_client(url, key)

    query = client.table("news").select("*").order("published_at", desc=True)

    if source and source.lower() != "all":
        query = query.eq("source", source)

    if category and category.lower() != "all":
        query = query.eq("category", category)

    if days:
        since = (datetime.now(timezone.utc) - timedelta(days=days)).isoformat()
        query = query.gte("published_at", since)

    if limit:
        query = query.limit(limit)

    response = query.execute()

    if not response.data:
        print("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(
        f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(response.data)} –Ω–æ–≤–æ—Å—Ç–µ–π"
        f"{' –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ' + source if source and source.lower() != 'all' else ''}"
        f"{' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ' + category if category and category.lower() != 'all' else ''}"
        f"{' –∑–∞ ' + str(days) + ' –¥–Ω–µ–π' if days else ''}:\n"
    )

    for item in response.data:
        print(f"- {item.get('title')}")
        print(f"  üìÖ {item.get('published_at')}")
        print(f"  üè∑ {item.get('source')} ({item.get('category')})")
        print(f"  ‚úÖ Credibility: {item.get('credibility')}, Importance: {item.get('importance')}")
        print(f"  üîó {item.get('link')}\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã Supabase")
    parser.add_argument("--limit", type=int, default=5, help="–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞–∑–∞—Ç—å")
    parser.add_argument("--source", type=str, default="all", help="–ò—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, CoinDesk)")
    parser.add_argument(
        "--category",
        type=str,
        default="all",
        help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è (crypto, economy, world, tech, politics)",
    )
    parser.add_argument("--days", type=int, help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π")
    args = parser.parse_args()

    show_latest_news(limit=args.limit, source=args.source, category=args.category, days=args.days)
