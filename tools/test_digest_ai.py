#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç AI —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from services.digest_service import DigestService  # noqa: E402
from services.categories import get_categories, get_subcategories  # noqa: E402


def test_digest_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç AI —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""

    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç AI —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        from repositories.news_repository import NewsRepository
        from database.db_models import supabase

        news_repo = NewsRepository(supabase)
        digest_service = DigestService(news_repo)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = get_categories()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = get_subcategories(category)
            print(f"   –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(subcategories[:3])}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                digest_text, digest_items = digest_service.build_daily_digest(
                    categories=[category], limit=3
                )
                digest = digest_items

                if digest:
                    print(f"   ‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –¥–ª—è {category}: {len(digest)} –Ω–æ–≤–æ—Å—Ç–µ–π")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤–æ—Å—Ç–µ–π
                    for i, news_item in enumerate(digest[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                        if isinstance(news_item, dict):
                            title = news_item.get('title', 'No title')[:50]
                            cat = news_item.get('category', 'No category')
                            subcat = news_item.get('subcategory', 'No subcategory')
                            print(f"      {i+1}. {title}... ({cat} ‚Üí {subcat})")
                        else:
                            print(f"      {i+1}. {str(news_item)[:50]}...")
                else:
                    print(f"   ‚ö†Ô∏è –î–∞–π–¥–∂–µ—Å—Ç –¥–ª—è {category}: –ø—É—Å—Ç–æ–π")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {category}: {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
        print("\nüåç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç...")
        try:
            digest_text, general_digest = digest_service.build_daily_digest(
                categories=None, limit=5  # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            )

            if general_digest:
                print(f"   ‚úÖ –û–±—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {len(general_digest)} –Ω–æ–≤–æ—Å—Ç–µ–π")

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                category_counts = {}
                for news_item in general_digest:
                    if isinstance(news_item, dict):
                        cat = news_item.get('category', 'unknown')
                        category_counts[cat] = category_counts.get(cat, 0) + 1

                print("   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for cat, count in category_counts.items():
                    print(f"      {cat}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                print("   ‚ö†Ô∏è –û–±—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: –ø—É—Å—Ç–æ–π")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç AI: {e}")
        return False


def test_news_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""

    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π...")

    try:
        from parsers.rss_parser import parse_source
        from services.categories import get_sources

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sources = get_sources('crypto', 'bitcoin')

        if sources:
            source = sources[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            print(f"   üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {source['name']}")

            # –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫
            news_items = parse_source(
                url=source['url'],
                category='crypto',
                subcategory='bitcoin',
                source_name=source['name'],
            )

            if news_items:
                print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥: {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                for i, item in enumerate(news_items[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    title = item.get('title', 'No title')[:50]
                    cat = item.get('category', 'No category')
                    subcat = item.get('subcategory', 'No subcategory')
                    print(f"      {i+1}. {title}... ({cat} ‚Üí {subcat})")
            else:
                print("   ‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥: –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("   ‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç AI –∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é subcategory...")
    from tools.check_subcategory_migration import check_migration

    migration_ok = check_migration()

    if not migration_ok:
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é subcategory!")
        sys.exit(1)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç AI
    digest_ok = test_digest_ai()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    parsing_ok = test_news_parsing()

    if digest_ok and parsing_ok:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç AI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        if not digest_ok:
            print("   - –î–∞–π–¥–∂–µ—Å—Ç AI —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        if not parsing_ok:
            print("   - –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        sys.exit(1)
