#!/usr/bin/env python3
from pathlib import Path
from datetime import datetime

# –ß—Ç–æ –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
EXCLUDE_DIRS = {'.git', '.venv', '__pycache__', '.pytest_cache'}
EXCLUDE_FILES = {'.DS_Store', '.env'}

# –í —ç—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∏ –≤—Ö–æ–¥–∏–º, –Ω–æ –ù–ï —Ä–µ–∫—É—Ä—Å–∏—Ä—É–µ–º (–ª–∏—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É –ø–∞–ø–∫—É)
STOP_RECURSE_DIRS = {'logs'}

def build_tree(root: Path, prefix: str = "") -> list[str]:
    # –°–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    dirs = []
    files = []
    for p in sorted(root.iterdir(), key=lambda x: x.name.lower()):
        name = p.name
        if p.is_dir():
            if name in EXCLUDE_DIRS:
                continue
            dirs.append(p)
        else:
            if name in EXCLUDE_FILES:
                continue
            files.append(p)

    entries = dirs + files
    lines: list[str] = []

    for idx, p in enumerate(entries):
        last = (idx == len(entries) - 1)
        connector = "‚îî‚îÄ‚îÄ " if last else "‚îú‚îÄ‚îÄ "
        if p.is_dir():
            lines.append(f"{prefix}{connector}{p.name}/")
            # –í–Ω—É—Ç—Ä—å –Ω–µ –∑–∞—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–æ–ø-–∫–∞—Ç–∞–ª–æ–≥
            if p.name in STOP_RECURSE_DIRS:
                continue
            extension = "    " if last else "‚îÇ   "
            lines.extend(build_tree(p, prefix + extension))
        else:
            lines.append(f"{prefix}{connector}{p.name}")
    return lines

def main() -> None:
    project_root = Path(__file__).resolve().parents[1]  # –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    lines = build_tree(project_root)
    ts = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    out = project_root / "CODEMAP.md"
    with out.open("w", encoding="utf-8") as f:
        f.write("# üìÇ Project Structure\n\n")
        f.write(f"_Generated by `tools/repo_map.py` on {ts}_\n\n")
        f.write("```\n")
        f.write("\n".join(lines))
        f.write("\n```\n")
    print("‚úÖ CODEMAP.md updated")

if __name__ == "__main__":
    main()