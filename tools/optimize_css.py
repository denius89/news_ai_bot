#!/usr/bin/env python3
"""
PulseAI CSS Optimizer
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç CSS —Ñ–∞–π–ª—ã, –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∏–ª–∏
"""

import os
import re
from pathlib import Path
from collections import defaultdict


def analyze_css_usage():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CSS –∫–ª–∞—Å—Å–æ–≤...")

    # –ù–∞–π—Ç–∏ –≤—Å–µ CSS —Ñ–∞–π–ª—ã
    css_files = list(Path("static/css").rglob("*.css"))
    template_files = list(Path("templates").rglob("*.html"))
    js_files = list(Path("static/js").rglob("*.js"))

    # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ CSS –∫–ª–∞—Å—Å—ã
    css_classes = set()
    css_selectors = defaultdict(int)

    for css_file in css_files:
        print(f"  –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {css_file}...")
        try:
            with open(css_file, "r", encoding="utf-8") as f:
                content = f.read()

                # –ù–∞–π—Ç–∏ CSS –∫–ª–∞—Å—Å—ã
                class_pattern = r"\.([a-zA-Z][a-zA-Z0-9_-]*)(?:\s*[,{])"
                classes = re.findall(class_pattern, content)
                css_classes.update(classes)

                # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                selector_pattern = r"([^{}]+)\s*\{"
                selectors = re.findall(selector_pattern, content)
                for selector in selectors:
                    selector = selector.strip()
                    if selector:
                        css_selectors[selector] += 1

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {css_file}: {e}")

    # –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ HTML/JS
    used_classes = set()

    for template_file in template_files:
        print(f"  –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ {template_file}...")
        try:
            with open(template_file, "r", encoding="utf-8") as f:
                content = f.read()

                # –ù–∞–π—Ç–∏ class –∞—Ç—Ä–∏–±—É—Ç—ã
                class_pattern = r'class\s*=\s*["\']([^"\']+)["\']'
                matches = re.findall(class_pattern, content)

                for match in matches:
                    classes = match.split()
                    used_classes.update(classes)

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {template_file}: {e}")

    for js_file in js_files:
        print(f"  –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ {js_file}...")
        try:
            with open(js_file, "r", encoding="utf-8") as f:
                content = f.read()

                # –ù–∞–π—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Å–∞–º –≤ JS
                class_pattern = r'["\']([a-zA-Z][a-zA-Z0-9_-]*(?:\s+[a-zA-Z][a-zA-Z0-9_-]*)*)["\']'
                matches = re.findall(class_pattern, content)

                for match in matches:
                    classes = match.split()
                    used_classes.update(classes)

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {js_file}: {e}")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    unused_classes = css_classes - used_classes

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"  –í—Å–µ–≥–æ CSS –∫–ª–∞—Å—Å–æ–≤: {len(css_classes)}")
    print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {len(used_classes)}")
    print(f"  –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {len(unused_classes)}")

    if unused_classes:
        print(f"\nüóëÔ∏è  –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ö–õ–ê–°–°–´:")
        for cls in sorted(unused_classes):
            print(f"    .{cls}")

    # –ù–∞–π—Ç–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    duplicates = {k: v for k, v in css_selectors.items() if v > 1}
    if duplicates:
        print(f"\nüîÑ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –°–ï–õ–ï–ö–¢–û–†–´:")
        for selector, count in sorted(duplicates.items()):
            print(f"    {selector} ({count} —Ä–∞–∑)")

    return {
        "total_classes": len(css_classes),
        "used_classes": len(used_classes),
        "unused_classes": len(unused_classes),
        "unused_list": unused_classes,
        "duplicates": duplicates,
    }


def check_css_size():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä CSS —Ñ–∞–π–ª–æ–≤."""
    print("\nüìè –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í CSS:")

    css_files = list(Path("static/css").rglob("*.css"))
    total_size = 0

    for css_file in css_files:
        try:
            size = css_file.stat().st_size
            total_size += size
            print(f"  {css_file}: {size:,} –±–∞–π—Ç ({size/1024:.1f} KB)")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {css_file}: {e}")

    print(f"\n  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä CSS: {total_size:,} –±–∞–π—Ç ({total_size/1024:.1f} KB)")


def generate_optimization_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
    print("\nüìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–Å–¢–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò...")

    results = analyze_css_usage()
    check_css_size()

    report = f"""# CSS Optimization Report

**–î–∞—Ç–∞:** {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ CSS –∫–ª–∞—Å—Å–æ–≤:** {results['total_classes']}
- **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤:** {results['used_classes']}
- **–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤:** {results['unused_classes']}
- **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:** {(results['used_classes']/results['total_classes']*100):.1f}%

## üóëÔ∏è –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã

"""

    if results["unused_list"]:
        for cls in sorted(results["unused_list"]):
            report += f"- `.{cls}`\n"
    else:
        report += "‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n"

    report += f"""

## üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ã

"""

    if results["duplicates"]:
        for selector, count in sorted(results["duplicates"].items()):
            report += f"- `{selector}` ({count} —Ä–∞–∑)\n"
    else:
        report += "‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n"

    report += """

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

1. **–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã** - —É–º–µ–Ω—å—à–∏—Ç —Ä–∞–∑–º–µ—Ä CSS
2. **–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–∏–ª–∏** - —É–ª—É—á—à–∏—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
3. **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CSS –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é** –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
4. **–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ** –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ

## üéØ –¶–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

- –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä CSS –Ω–∞ 10-20%
- –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π
- –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
- –£–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–¥–∞

---
*–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ CSS Optimizer*
"""

    with open("CSS_OPTIMIZATION_REPORT.md", "w", encoding="utf-8") as f:
        f.write(report)

    print("‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ CSS_OPTIMIZATION_REPORT.md")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üé® PulseAI CSS Optimizer")
    print("=" * 50)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    os.chdir(project_root)

    generate_optimization_report()

    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    return 0


if __name__ == "__main__":
    exit(main())
