"""
Daily Digests Sender - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.

–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (cron) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram –±–æ—Ç–∞.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç asyncio –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ logging
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env (TELEGRAM_BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY)
"""

import asyncio
import logging
import os
import sys
import zoneinfo
from datetime import datetime
from pathlib import Path
from typing import Dict, List

from dotenv import load_dotenv

from config.core.constants import CATEGORIES
from database.db_models import get_latest_news
from digests.ai_service import DigestAIService, DigestConfig
from models.news import NewsItem
from services.notification_service import NotificationService
from services.subscription_service import SubscriptionService
from utils.network.telegram_sender import TelegramSender

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(Path(__file__).resolve().parent.parent / "config_files" / ".env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

logger = logging.getLogger(__name__)


async def get_current_hour_warsaw() -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Å –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ Europe/Warsaw.

    Returns:
        –¢–µ–∫—É—â–∏–π —á–∞—Å (0-23)
    """
    try:
        warsaw_tz = zoneinfo.ZoneInfo("Europe/Warsaw")
        now_warsaw = datetime.now(warsaw_tz)
        return now_warsaw.hour
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ Warsaw, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC: {e}")
        return datetime.now().hour


async def get_users_for_digest(notif_svc: NotificationService, target_hour: int) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç.

    Args:
        notif_svc: –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        target_hour: –¶–µ–ª–µ–≤–æ–π —á–∞—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å
    """
    logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Å–∞ {target_hour}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å
        users = await notif_svc.get_users_by_notification_type("digest", target_hour)

        logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return users

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


async def get_user_subscriptions(subs_svc: SubscriptionService, user_id: str) -> List[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        subs_svc: –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥–ø–∏—Å–æ–∫
    """
    try:
        subscriptions = await subs_svc.list(user_id)
        categories = [sub["category"] for sub in subscriptions]

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        valid_categories = [cat for cat in categories if cat in CATEGORIES]

        if len(valid_categories) != len(categories):
            invalid = set(categories) - set(valid_categories)
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {invalid}")

        return valid_categories

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []


async def fetch_news_by_categories(categories: List[str], limit: int = 10) -> List[NewsItem]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

    Args:
        categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π

    Returns:
        –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ NewsItem
    """
    try:
        logger.info(f"üì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {categories}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        news_data = get_latest_news(limit=limit * 2)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å

        if not news_data:
            logger.info("‚ÑπÔ∏è –ù–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        filtered_news = []
        for row in news_data:
            news_item = NewsItem.model_validate(row)
            if news_item.category in categories:
                filtered_news.append(news_item)
                if len(filtered_news) >= limit:
                    break

        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–æ %d –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º %s", len(filtered_news), categories)
        return filtered_news

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []


async def generate_personalized_digest(
    news_items: List[NewsItem], user_categories: List[str], style: str = "analytical"
) -> str:
    """
    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        news_items: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        user_categories: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        style: –°—Ç–∏–ª—å –¥–∞–π–¥–∂–µ—Å—Ç–∞

    Returns:
        –¢–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
    """
    try:
        if not news_items:
            return (
                f"üì∞ **–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n"
                f"–ü–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º ({', '.join(user_categories)}) "
                f"–Ω–æ–≤–æ—Å—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.\n\n"
                f"–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: /subscribe <category>\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(CATEGORIES)}"
            )

        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        config = DigestConfig(max_items=min(8, len(news_items)), include_fallback=True, style=style)

        service = DigestAIService(config)
        digest_text = await service.build_digest(news_items, style)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        header = f"üì∞ **–î–∞–π–¥–∂–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {', '.join(user_categories)}**\n\n"
        return header + digest_text

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        fallback_text = "üì∞ **–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n"
        fallback_text += f"–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {', '.join(user_categories)}\n\n"

        for i, item in enumerate(news_items[:8], 1):
            fallback_text += f"{i}. **{item.title}**\n"
            if item.link:
                fallback_text += f"   üîó {item.link}\n"
            fallback_text += "\n"

        return fallback_text


async def send_personalized_digest(user: Dict, subs_svc: SubscriptionService, telegram_sender: TelegramSender) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subs_svc: –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫
        telegram_sender: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å Telegram

    Returns:
        True –µ—Å–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    user_id = user["user_id"]
    telegram_id = user["telegram_id"]

    logger.info(f"üì∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    try:
        # 1. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        categories = await get_user_subscriptions(subs_svc, user_id)

        if not categories:
            logger.info(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            message = (
                f"üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
                f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.\n\n"
                f"–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /subscribe <category>\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(CATEGORIES)}\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: /subscribe crypto"
            )

            return await telegram_sender.send_message(telegram_id, message)

        # 2. –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        news_items = await fetch_news_by_categories(categories, limit=10)

        # 3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
        digest_text = await generate_personalized_digest(news_items, categories)

        # 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
        success = await telegram_sender.send_message(telegram_id, digest_text)

        if success:
            logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

        return success

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_KEY")

    if not supabase_url or not supabase_key:
        logger.error("‚ùå SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    subs_svc = SubscriptionService()
    notif_svc = NotificationService()
    telegram_sender = TelegramSender(bot_token)

    try:
        # 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Å –≤ Warsaw
        current_hour = await get_current_hour_warsaw()
        logger.info(f"‚è∞ –¢–µ–∫—É—â–∏–π —á–∞—Å (Europe/Warsaw): {current_hour}")

        # 2. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        users_to_notify = await get_users_for_digest(notif_svc, current_hour)
        logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(users_to_notify)}")

        if not users_to_notify:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
            return

        # 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞)
        semaphore = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

        async def send_to_user(user):
            async with semaphore:
                return await send_personalized_digest(user, subs_svc, telegram_sender)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        results = await asyncio.gather(*[send_to_user(user) for user in users_to_notify], return_exceptions=True)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        sent_count = sum(1 for result in results if result is True)
        failed_count = len(results) - sent_count

        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        logger.info(f"   üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                user_id = users_to_notify[i]["telegram_id"]
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
        await telegram_sender.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
