#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ –±–∞–∑—É Supabase.
"""

import logging

from parsers.rss_parser import load_sources, fetch_rss
from database.db_models import upsert_news

logger = logging.getLogger("tools.fetch_and_store_news")


def main(limit: int | None = None):
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
    sources = load_sources()

    all_items = []
    for src in sources.values():  # ‚úÖ –±–µ—Ä—ë–º —Å–ª–æ–≤–∞—Ä–∏, –∞ –Ω–µ –∫–ª—é—á–∏
        try:
            # fetch_rss –∂–¥—ë—Ç dict[str, dict], –ø–æ—ç—Ç–æ–º—É –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫
            items = fetch_rss({src["name"]: src}, per_source_limit=limit)
            all_items.extend(items)
            logger.info(f"‚úÖ {src['id']}: {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {src.get('id', src.get('name'))}: {e}")

    if not all_items:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return

    # üßπ –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –ø–æ uid
    unique_items = {item["uid"]: item for item in all_items}
    deduped_items = list(unique_items.values())

    logger.info(f"üì¶ –ü–æ—Å–ª–µ –¥–µ–¥—É–ø–∞: {len(deduped_items)} –Ω–æ–≤–æ—Å—Ç–µ–π (–∏–∑ {len(all_items)})")

    upsert_news(deduped_items)


if __name__ == "__main__":
    main()
