#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PulseAI.
"""

import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.service import get_async_service

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def clean_old_news():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        db_service = get_async_service()
        logger.info("üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.now()

        # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        cutoff_date = now - timedelta(days=30)

        logger.info(f"–£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞—Ä—à–µ {cutoff_date.strftime('%Y-%m-%d')}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Supabase
        client = await db_service.async_client
        result = await db_service.async_safe_execute(
            client.table('news').delete().lt('published_at', cutoff_date.isoformat())
        )

        if result:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –æ–Ω–∏ —É–∂–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")

        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ title –∏ link
        logger.info("üßπ –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        all_news = await db_service.async_safe_execute(
            client.table('news').select('id, title, link').order('published_at', desc=True)
        )

        if all_news and hasattr(all_news, 'data') and all_news.data:
            seen_titles = set()
            seen_links = set()
            duplicates_to_delete = []

            for news in all_news.data:
                title = news.get('title', '').lower().strip()
                link = news.get('link', '').strip()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ title –∏ link
                if (title in seen_titles or link in seen_links) and title and link:
                    duplicates_to_delete.append(news['id'])
                else:
                    if title:
                        seen_titles.add(title)
                    if link:
                        seen_links.add(link)

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if duplicates_to_delete:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(duplicates_to_delete)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

                for news_id in duplicates_to_delete:
                    await db_service.async_safe_execute(
                        client.table('news').delete().eq('id', news_id)
                    )

                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(duplicates_to_delete)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            else:
                logger.info("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        count_result = await db_service.async_safe_execute(
            client.table('news').select('id', count='exact')
        )

        if count_result and hasattr(count_result, 'data'):
            total_count = len(count_result.data) if count_result.data else 0
            logger.info(f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {total_count}")

        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    await clean_old_news()


if __name__ == "__main__":
    asyncio.run(main())
