#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–∂–¥–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ PulseAI.
"""

import sys
import os
import asyncio
import logging
from pathlib import Path

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
sys.path.insert(0, str(Path(__file__).parent.parent))

from services.categories import get_categories, get_subcategories
from database.service import get_async_service
from parsers.advanced_parser import AdvancedParser

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

logger = logging.getLogger(__name__)


async def load_fresh_news():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–∂–¥–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    try:
        logger.info("üì∞ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AdvancedParser
        parser = AdvancedParser(max_concurrent=5, min_importance=0.3)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = get_categories()
        total_subcategories = 0

        for category in categories:
            subcategories = get_subcategories(category)
            total_subcategories += len(subcategories)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ " f"{total_subcategories} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º AdvancedParser –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdvancedParser –∫–∞–∫ async context manager
        async with parser:
            await parser.run()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        db_service = get_async_service()
        if not db_service:
            logger.error("‚ùå Async database service not available")
            return

        client = await db_service._get_async_client()
        if not client:
            logger.error("‚ùå Async client not available")
            return

        # –°—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        for category in categories:
            result = await db_service.async_safe_execute(
                client.table("news").select("id", count="exact").eq("category", category)
            )

            if result and hasattr(result, "data"):
                count = len(result.data) if result.data else 0
                category_stats[category] = count

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_result = await db_service.async_safe_execute(client.table("news").select("id", count="exact"))

        total_count = (
            len(total_result.data) if total_result and hasattr(total_result, "data") and total_result.data else 0
        )

        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:")
        logger.info(f"üìà –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ: {total_count}")

        for category, count in category_stats.items():
            logger.info(f"  ‚Ä¢ {category}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π")

        sample_result = await db_service.async_safe_execute(client.table("news").select("*").limit(5))

        if sample_result and hasattr(sample_result, "data") and sample_result.data:
            sample_news = sample_result.data[0]
            required_fields = [
                "id",
                "title",
                "content",
                "source",
                "published_at",
                "link",
                "credibility",
                "importance",
                "category",
                "subcategory",
                "uid",
            ]

            missing_fields = []
            for field in required_fields:
                if field not in sample_news or sample_news[field] is None:
                    missing_fields.append(field)

            if missing_fields:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö: {missing_fields}")
            else:
                logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if isinstance(sample_news.get("credibility"), (int, float)) and isinstance(
                sample_news.get("importance"), (int, float)
            ):
                logger.info("‚úÖ –ü–æ–ª—è credibility –∏ importance –∏–º–µ—é—Ç " "–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            else:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—è credibility –∏–ª–∏ importance –∏–º–µ—é—Ç " "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")

        logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        return {
            "total_news": total_count,
            "category_stats": category_stats,
            "subcategories_processed": total_subcategories,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    result = await load_fresh_news()
    return result


if __name__ == "__main__":
    asyncio.run(main())
