#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models.news import NewsItem
from digests.ai_service import DigestAIService, DigestConfig

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_test_news(category: str, subcategory: str, count: int = 3) -> list[NewsItem]:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""

    test_news_data = {
        ("crypto", "bitcoin"): [
            {
                "title": "Bitcoin –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ $75,000",
                "content": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ Bitcoin —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º –Ω–∞ —É—Ä–æ–≤–Ω–µ $75,000, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞—Å—Ç—É—â–∏–º –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º ETF –≤ –°–®–ê. –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç –Ω–∞ —Ñ–æ–Ω–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.",
            },
            {
                "title": "MicroStrategy —É–≤–µ–ª–∏—á–∏–ª–∞ —Ö–æ–ª–¥–∏–Ω–≥–∏ BTC –¥–æ 150,000",
                "content": "–ö–æ–º–ø–∞–Ω–∏—è MicroStrategy –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ú–∞–π–∫–ª–∞ –°–µ–π–ª–æ—Ä–∞ –æ–±—ä—è–≤–∏–ª–∞ –æ –ø–æ–∫—É–ø–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 3,000 Bitcoin, –¥–æ–≤–µ–¥—è –æ–±—â–∏–µ —Ä–µ–∑–µ—Ä–≤—ã –¥–æ 150,000 BTC. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.",
            },
        ],
        ("markets", "stocks"): [
            {
                "title": "S&P 500 –æ–±–Ω–æ–≤–∏–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º",
                "content": "–ò–Ω–¥–µ–∫—Å S&P 500 –∑–∞–∫—Ä—ã–ª—Å—è –Ω–∞ –Ω–æ–≤–æ–º —Ä–µ–∫–æ—Ä–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ 5,200 –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ —Å–Ω–∏–∂–µ–Ω–∏—è –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –ª–∏–¥–µ—Ä—Å–∫–∏–π —Ä–æ—Å—Ç.",
            },
            {
                "title": "Tesla –∞–∫—Ü–∏–∏ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 8% –ø–æ—Å–ª–µ –∞–Ω–æ–Ω—Å–∞",
                "content": "–ê–∫—Ü–∏–∏ Tesla –ø–æ–¥—Å–∫–æ—á–∏–ª–∏ –Ω–∞ 8% –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª—è—Ö —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ—è—Ö. –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–ª–∏ –ø–ª–∞–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.",
            },
        ],
        ("tech", "ai"): [
            {
                "title": "OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ GPT-5 —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
                "content": "OpenAI –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∞ GPT-5 ‚Äî –Ω–æ–≤—É—é —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ú–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è—Ö.",
            }
        ],
    }

    news_items = []
    key = (category, subcategory)

    if key in test_news_data:
        for i, data in enumerate(test_news_data[key][:count]):
            item = NewsItem(
                id=f"test-{category}-{subcategory}-{i}",
                title=data["title"],
                content=data["content"],
                published_at=datetime.utcnow(),
                source="Test Source",
                category=category,
                subcategory=subcategory,
                importance=0.8 + (i * 0.1),
                credibility=0.9,
            )
            news_items.append(item)
    else:
        # Fallback
        item = NewsItem(
            id=f"test-{category}-{subcategory}",
            title=f"Test news for {category}/{subcategory}",
            content="Test content for integration testing",
            published_at=datetime.utcnow(),
            source="Test Source",
            category=category,
            subcategory=subcategory,
            importance=0.8,
            credibility=0.9,
        )
        news_items.append(item)

    return news_items


async def test_digest_generation(category: str, subcategory: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""

    logger.info(f"üß™ Testing {category}/{subcategory}")

    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    news_items = create_test_news(category, subcategory)

    # –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å
    config = DigestConfig(max_items=5)
    service = DigestAIService(config)

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
        digest = await service.build_digest(news_items, style="analytical", category=category, length="medium")

        logger.info(f"‚úÖ {category}/{subcategory}: Generated {len(digest)} characters")
        logger.info(f"Preview: {digest[:200]}...")

        return {
            "category": category,
            "subcategory": subcategory,
            "success": True,
            "length": len(digest),
            "preview": digest[:300],
        }

    except Exception as e:
        logger.error(f"‚ùå {category}/{subcategory}: Error - {e}")
        return {"category": category, "subcategory": subcategory, "success": False, "error": str(e)}


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    logger.info("üöÄ Starting integration test for events + subcategories")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    test_cases = [
        ("crypto", "bitcoin"),
        ("crypto", "ethereum"),
        ("markets", "stocks"),
        ("markets", "forex"),
        ("tech", "ai"),
        ("tech", "startups"),
        ("sports", "football"),
        ("world", "geopolitics"),
    ]

    results = []

    for category, subcategory in test_cases:
        result = await test_digest_generation(category, subcategory)
        results.append(result)

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(1)

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\nüìä Test Results:")
    logger.info("=" * 50)

    successful = 0
    failed = 0

    for result in results:
        if result["success"]:
            successful += 1
            logger.info(f"‚úÖ {result['category']}/{result['subcategory']}: {result['length']} chars")
        else:
            failed += 1
            logger.error(f"‚ùå {result['category']}/{result['subcategory']}: {result['error']}")

    logger.info(f"\nüìà Summary: {successful} successful, {failed} failed out of {len(results)} tests")

    if failed == 0:
        logger.info("üéâ All tests passed! Integration is working correctly.")
    else:
        logger.warning(f"‚ö†Ô∏è {failed} tests failed. Check the errors above.")


if __name__ == "__main__":
    asyncio.run(main())
