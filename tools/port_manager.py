#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è PulseAI.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤.
"""

import os
import sys
import time
import socket
import subprocess
import psutil
from typing import List, Dict, Optional, Tuple
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class PortManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏."""

    def __init__(self):
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ—Ä—Ç—ã (5000 - ControlCenter –Ω–∞ macOS)
        self.default_ports = [8001, 8080, 3000, 8002, 8003, 9000, 9001]
        self.system_ports = [5000, 22, 80, 443, 53, 25, 110, 143, 993, 995]  # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ—Ä—Ç—ã
        self.process_names = ['webapp.py', 'telegram_bot/bot.py', 'main.py']

    def find_free_port(self, start_port: int = 8001, max_attempts: int = 20) -> Optional[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å start_port, –∏–∑–±–µ–≥–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤."""
        for port in range(start_port, start_port + max_attempts):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ—Ä—Ç—ã
            if port in self.system_ports:
                continue
            if self.is_port_free(port):
                return port
        return None

    def is_port_free(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç."""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            try:
                s.bind(('localhost', port))
                return True
            except OSError:
                return False

    def get_processes_on_port(self, port: int) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –ø–æ—Ä—Ç."""
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                for conn in proc.connections():
                    if conn.laddr.port == port:
                        processes.append(
                            {
                                'pid': proc.info['pid'],
                                'name': proc.info['name'],
                                'cmdline': ' '.join(proc.info['cmdline'] or []),
                            }
                        )
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
        return processes

    def kill_process_on_port(self, port: int, force: bool = False) -> bool:
        """–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç."""
        # –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ—Ä—Ç—ã
        if port in self.system_ports:
            print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} - —Å–∏—Å—Ç–µ–º–Ω—ã–π, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º")
            return False

        processes = self.get_processes_on_port(port)
        killed = False

        for proc_info in processes:
            pid = proc_info['pid']
            try:
                process = psutil.Process(pid)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
                if self.is_our_process(proc_info['cmdline']):
                    print(f"üõë –£–±–∏–≤–∞–µ–º –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å {pid} ({proc_info['name']}) –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                    if force:
                        process.kill()
                    else:
                        process.terminate()

                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    try:
                        process.wait(timeout=5)
                    except psutil.TimeoutExpired:
                        if force:
                            process.kill()
                        else:
                            print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º")
                            process.kill()
                    killed = True
                else:
                    print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç –≤–Ω–µ—à–Ω–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º {pid} ({proc_info['name']})")
                    print(f"   –ö–æ–º–∞–Ω–¥–∞: {proc_info['cmdline']}")

            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue

        return killed

    def is_our_process(self, cmdline: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—à–∏–º (PulseAI)."""
        our_indicators = ['webapp.py', 'telegram_bot', 'news_ai_bot', 'pulseai']
        return any(indicator.lower() in cmdline.lower() for indicator in our_indicators)

    def find_duplicate_processes(self) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã PulseAI."""
        duplicates = []

        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
            try:
                cmdline = ' '.join(proc.info['cmdline'] or [])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—à–∏–º
                if self.is_our_process(cmdline):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                    if proc.info['pid'] != os.getpid():
                        duplicates.append(
                            {
                                'pid': proc.info['pid'],
                                'name': proc.info['name'],
                                'cmdline': cmdline,
                                'create_time': proc.info['create_time'],
                                'age': time.time() - proc.info['create_time'],
                            }
                        )
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue

        return duplicates

    def cleanup_duplicate_processes(self, force: bool = False) -> int:
        """–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        duplicates = self.find_duplicate_processes()
        killed_count = 0

        if duplicates:
            print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PulseAI:")

            for proc_info in duplicates:
                age_minutes = proc_info['age'] / 60
                print(
                    f"   PID {proc_info['pid']}: {proc_info['cmdline'][:80]}... (–≤–æ–∑—Ä–∞—Å—Ç: {age_minutes:.1f} –º–∏–Ω)"
                )

                try:
                    process = psutil.Process(proc_info['pid'])

                    if force or age_minutes > 1:  # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
                        print(f"   üõë –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {proc_info['pid']}")
                        if force:
                            process.kill()
                        else:
                            process.terminate()

                        try:
                            process.wait(timeout=3)
                        except psutil.TimeoutExpired:
                            process.kill()
                        killed_count += 1
                    else:
                        print(f"   ‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –º–æ–ª–æ–¥–æ–π –ø—Ä–æ—Ü–µ—Å—Å {proc_info['pid']}")

                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        else:
            print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return killed_count

    def prepare_environment(self, force: bool = False) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –æ—á–∏—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã."""
        print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")

        result = {'ports_freed': 0, 'processes_killed': 0, 'free_ports': {}, 'warnings': []}

        # 1. –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        result['processes_killed'] = self.cleanup_duplicate_processes(force)

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...")
        for port in self.default_ports:
            if port in self.system_ports:
                print(f"‚è≠Ô∏è –ü–æ—Ä—Ç {port} - —Å–∏—Å—Ç–µ–º–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            if not self.is_port_free(port):
                print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç")

                if self.kill_process_on_port(port, force):
                    result['ports_freed'] += 1
                    time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Ä—Ç—É –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è

                    if self.is_port_free(port):
                        print(f"‚úÖ –ü–æ—Ä—Ç {port} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
                    else:
                        result['warnings'].append(
                            f"–ü–æ—Ä—Ç {port} –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è"
                        )
                else:
                    result['warnings'].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port}")
            else:
                print(f"‚úÖ –ü–æ—Ä—Ç {port} —Å–≤–æ–±–æ–¥–µ–Ω")

        # 3. –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        print("\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
        for service, start_port in [('webapp', 8001), ('api', 5001), ('test', 8080)]:
            free_port = self.find_free_port(start_port)
            if free_port:
                result['free_ports'][service] = free_port
                print(f"‚úÖ {service}: –ø–æ—Ä—Ç {free_port}")
            else:
                result['warnings'].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è {service}")

        # 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
        print(f"   –£–±–∏—Ç–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {result['processes_killed']}")
        print(f"   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {result['ports_freed']}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(result['free_ports'])}")

        if result['warnings']:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in result['warnings']:
                print(f"   - {warning}")

        return result


def main():
    """CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏."""
    import argparse

    parser = argparse.ArgumentParser(description='–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PulseAI')
    parser.add_argument(
        '--check', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
    )
    parser.add_argument(
        '--cleanup', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø–æ—Ä—Ç—ã'
    )
    parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞')
    parser.add_argument('--prepare', action='store_true', help='–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤')

    args = parser.parse_args()

    manager = PortManager()

    if args.check:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
        print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:")
        for port in manager.default_ports:
            if manager.is_port_free(port):
                print(f"   ‚úÖ –ü–æ—Ä—Ç {port}: —Å–≤–æ–±–æ–¥–µ–Ω")
            else:
                processes = manager.get_processes_on_port(port)
                print(f"   ‚ùå –ü–æ—Ä—Ç {port}: –∑–∞–Ω—è—Ç")
                for proc in processes:
                    print(f"      PID {proc['pid']}: {proc['name']} - {proc['cmdline'][:60]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
        duplicates = manager.find_duplicate_processes()
        if duplicates:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
            for proc in duplicates:
                age_min = proc['age'] / 60
                print(
                    f"   PID {proc['pid']}: {proc['cmdline'][:60]}... (–≤–æ–∑—Ä–∞—Å—Ç: {age_min:.1f} –º–∏–Ω)"
                )
        else:
            print("   ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    elif args.cleanup:
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–æ—Ä—Ç–æ–≤...")

        # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        killed = manager.cleanup_duplicate_processes(args.force)
        print(f"–£–±–∏—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {killed}")

        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã
        freed = 0
        for port in manager.default_ports:
            if not manager.is_port_free(port):
                if manager.kill_process_on_port(port, args.force):
                    freed += 1
                    time.sleep(1)
        print(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {freed}")

    elif args.prepare:
        result = manager.prepare_environment(args.force)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã
        critical_warnings = [
            w for w in result['warnings'] if '–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç' in w
        ]

        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, —Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
        if len(result['free_ports']) >= 3:  # webapp, api, test
            print(f"\n‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ ({len(result['free_ports'])}/3)")
            if critical_warnings:
                print(f"‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã:")
                for warning in critical_warnings:
                    print(f"   - {warning}")
            sys.exit(0)  # –í—Å–µ —Ö–æ—Ä–æ—à–æ
        elif critical_warnings:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in critical_warnings:
                print(f"   - {warning}")
            sys.exit(1)  # –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        else:
            sys.exit(0)  # –í—Å–µ —Ö–æ—Ä–æ—à–æ

    else:
        parser.print_help()


if __name__ == '__main__':
    main()
