#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ (credibility/importance) –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from database.db_models import supabase, safe_execute
from ai_modules.credibility import evaluate_credibility
from ai_modules.importance import evaluate_importance

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_news_without_ai_analysis():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    logger.info("üîç –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≥–¥–µ credibility –∏–ª–∏ importance —Ä–∞–≤–Ω—ã null –ò–õ–ò —Ä–∞–≤–Ω—ã 0.5 (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        result = safe_execute(
            supabase.table("news")
            .select("*")
            .or_("credibility.is.null,importance.is.null,credibility.eq.0.5,importance.eq.0.5")
        )
        
        if result.data:
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –Ω–æ–≤–æ—Å—Ç–µ–π —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ AI –æ—Ü–µ–Ω–∫–∞–º–∏")
            return result.data
        else:
            logger.info("‚úÖ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –∏–º–µ—é—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑")
            return []
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

def update_news_ai_analysis(news_uid, credibility, importance):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        result = safe_execute(
            supabase.table("news")
            .update({
                "credibility": credibility,
                "importance": importance
            })
            .eq("uid", news_uid)
        )
        
        if result.data:
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å {news_uid}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_uid}: {e}")
        return False

def process_news_batch(news_list):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
    processed = 0
    errors = 0
    
    for news_item in news_list:
        try:
            news_uid = news_item['uid']
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {news_item['title'][:50]}...")
            
            # AI –∞–Ω–∞–ª–∏–∑
            credibility = evaluate_credibility(news_item)
            importance = evaluate_importance(news_item)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
            if update_news_ai_analysis(news_uid, credibility, importance):
                processed += 1
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: credibility={credibility:.2f}, importance={importance:.2f}")
            else:
                errors += 1
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
            if (processed + errors) % 10 == 0:
                logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed + errors}/{len(news_list)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ {news_item.get('uid', 'unknown')}: {e}")
            errors += 1
            continue
    
    return processed, errors

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞...")
    
    if not supabase:
        logger.error("‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞
    news_list = get_news_without_ai_analysis()
    
    if not news_list:
        logger.info("üéâ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –∏–º–µ—é—Ç AI –∞–Ω–∞–ª–∏–∑!")
        return True
    
    logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    processed, errors = process_news_batch(news_list)
    
    # –ò—Ç–æ–≥–∏
    logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
    logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")
    logger.info(f"   üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_list)}")
    
    if processed > 0:
        logger.info(f"üéâ AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ {processed} –Ω–æ–≤–æ—Å—Ç—è–º!")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
