#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: Multi-stage + RAG + –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è.
"""

import sys
import asyncio
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from models.news import NewsItem
from digests.generator import generate_digest
from datetime import datetime


async def test_full_integration():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""

    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: Multi-stage + RAG + –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è...")

    try:
        # Test 1: –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª—é—á–µ–Ω—ã
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç: Multi-stage + RAG + –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
        result1 = await generate_digest(
            limit=5,
            category="crypto",
            ai=True,
            style="analytical",
            use_multistage=True,  # Multi-stage –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            use_rag=True,  # RAG —Å–∏—Å—Ç–µ–º–∞
            use_personalization=True,  # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            audience="expert",  # –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
            user_id="test-user",
        )

        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç 1: {len(result1)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ù–∞—á–∞–ª–æ: {result1[:200]}...")

        # Test 2: –¢–æ–ª—å–∫–æ RAG + –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–±–µ–∑ multi-stage)
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç: RAG + –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–æ–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)")
        result2 = await generate_digest(
            limit=5,
            category="crypto",
            ai=True,
            style="analytical",
            use_multistage=False,
            use_rag=True,
            use_personalization=True,
            audience="beginner",  # –ù–∞—á–∏–Ω–∞—é—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
            user_id="test-user-2",
        )

        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç 2: {len(result2)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ù–∞—á–∞–ª–æ: {result2[:200]}...")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print(f"Multi-stage: {len(result1)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û–±—ã—á–Ω–∞—è: {len(result2)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–†–∞–∑–Ω–∏—Ü–∞: {abs(len(result1) - len(result2))} —Å–∏–º–≤–æ–ª–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback

        traceback.print_exc()


async def test_components_separately():
    """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""

    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏...")

    try:
        # Test —Ç–æ–ª—å–∫–æ RAG
        print("\nüìö –¢–µ—Å—Ç: –¢–æ–ª—å–∫–æ RAG")
        result_rag = await generate_digest(
            limit=3, category="crypto", ai=True, use_multistage=False, use_rag=True, use_personalization=False
        )
        print(f"‚úÖ RAG: {len(result_rag)} —Å–∏–º–≤–æ–ª–æ–≤")

        # Test —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        print("\nüë§ –¢–µ—Å—Ç: –¢–æ–ª—å–∫–æ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
        result_pers = await generate_digest(
            limit=3,
            category="crypto",
            ai=True,
            use_multistage=False,
            use_rag=False,
            use_personalization=True,
            audience="business",
        )
        print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {len(result_pers)} —Å–∏–º–≤–æ–ª–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")


if __name__ == "__main__":
    asyncio.run(test_full_integration())
    asyncio.run(test_components_separately())
