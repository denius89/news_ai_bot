#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
"""

import sys
import asyncio
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from digests.generator import generate_digest


async def test_new_styles():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."""

    print("üé® –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")

    styles_to_test = [
        ("business", "–ë–∏–∑–Ω–µ—Å —Å—Ç–∏–ª—å"),
        ("explanatory", "–û–±—ä—è—Å–Ω—è—é—â–∏–π —Å—Ç–∏–ª—å"),
        ("technical", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"),
        ("analytical", "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)"),
    ]

    results = {}

    for style, description in styles_to_test:
        try:
            print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description}")

            result = await generate_digest(
                limit=3,
                category="crypto",
                ai=True,
                style=style,
                use_multistage=False,
                use_rag=True,
                use_personalization=False,
                audience="general",
            )

            results[style] = {"length": len(result), "preview": result[:200] + "..." if len(result) > 200 else result}

            print(f"‚úÖ {description}: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"–ù–∞—á–∞–ª–æ: {result[:150]}...")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∏–ª–µ {style}: {e}")
            results[style] = {"error": str(e)}

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π:")
    for style, data in results.items():
        if "error" in data:
            print(f"{style}: ‚ùå {data['error']}")
        else:
            print(f"{style}: {data['length']} —Å–∏–º–≤–æ–ª–æ–≤")

    return results


if __name__ == "__main__":
    asyncio.run(test_new_styles())
