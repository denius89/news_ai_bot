#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
"""

import sys
import asyncio
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from models.news import NewsItem
from digests.generator import generate_digest
from datetime import datetime


async def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —Å–æ–±—ã—Ç–∏–π."""

    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º...")

    try:
        # Test —Ç–æ–ª—å–∫–æ RAG —Å–∏—Å—Ç–µ–º–∞
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç: –¢–æ–ª—å–∫–æ RAG —Å–∏—Å—Ç–µ–º–∞")
        result_rag = await generate_digest(
            limit=3,
            category="crypto",
            ai=True,
            style="analytical",
            use_multistage=False,
            use_rag=True,
            use_personalization=False,
        )

        print(f"‚úÖ RAG —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result_rag)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ù–∞—á–∞–ª–æ: {result_rag[:150]}...")

        # Test —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç: –¢–æ–ª—å–∫–æ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
        result_pers = await generate_digest(
            limit=3,
            category="crypto",
            ai=True,
            style="analytical",
            use_multistage=False,
            use_rag=False,
            use_personalization=True,
            audience="expert",
        )

        print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result_pers)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ù–∞—á–∞–ª–æ: {result_pers[:150]}...")

        # Test RAG + –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç: RAG + –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
        result_both = await generate_digest(
            limit=3,
            category="crypto",
            ai=True,
            style="analytical",
            use_multistage=False,
            use_rag=True,
            use_personalization=True,
            audience="beginner",
        )

        print(f"‚úÖ RAG + –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {len(result_both)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ù–∞—á–∞–ª–æ: {result_both[:150]}...")

        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print(f"RAG: {len(result_rag)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {len(result_pers)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û–±–µ —Å–∏—Å—Ç–µ–º—ã: {len(result_both)} —Å–∏–º–≤–æ–ª–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_basic_functionality())
