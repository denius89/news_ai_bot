#!/usr/bin/env python3
"""
PulseAI CSS Cleanup Tool
–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ CSS –∫–ª–∞—Å—Å—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã
"""

import os
import re
from pathlib import Path
from collections import defaultdict

def get_used_classes():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö CSS –∫–ª–∞—Å—Å–æ–≤."""
    print("üîç –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö CSS –∫–ª–∞—Å—Å–æ–≤...")
    
    template_files = list(Path("templates").rglob("*.html"))
    js_files = list(Path("static/js").rglob("*.js"))
    
    used_classes = set()
    
    for template_file in template_files:
        try:
            with open(template_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # –ù–∞–π—Ç–∏ class –∞—Ç—Ä–∏–±—É—Ç—ã
                class_pattern = r'class\s*=\s*["\']([^"\']+)["\']'
                matches = re.findall(class_pattern, content)
                
                for match in matches:
                    classes = match.split()
                    used_classes.update(classes)
                    
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {template_file}: {e}")
    
    for js_file in js_files:
        try:
            with open(js_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # –ù–∞–π—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Å–∞–º –≤ JS
                class_pattern = r'["\']([a-zA-Z][a-zA-Z0-9_-]*(?:\s+[a-zA-Z][a-zA-Z0-9_-]*)*)["\']'
                matches = re.findall(class_pattern, content)
                
                for match in matches:
                    classes = match.split()
                    used_classes.update(classes)
                    
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {js_file}: {e}")
    
    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(used_classes)} –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤")
    return used_classes

def cleanup_css_file(file_path, used_classes, dry_run=True):
    """–û—á–∏—â–∞–µ—Ç CSS —Ñ–∞–π–ª –æ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤."""
    print(f"  –û—á–∏—Å—Ç–∫–∞ {file_path}...")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        removed_classes = []
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ CSS –ø—Ä–∞–≤–∏–ª–∞
        css_rules = re.findall(r'([^{}]+)\s*\{([^{}]*)\}', content, re.MULTILINE | re.DOTALL)
        
        for selector, properties in css_rules:
            selector = selector.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            if any(skip in selector for skip in ['@', ':', 'html', 'body', 'root', 'svg', 'path', 'line']):
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            class_pattern = r'\.([a-zA-Z][a-zA-Z0-9_-]*)'
            classes_in_selector = re.findall(class_pattern, selector)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –≤—Å–µ –∫–ª–∞—Å—Å—ã
            unused_in_selector = [cls for cls in classes_in_selector if cls not in used_classes]
            
            if unused_in_selector and len(classes_in_selector) == len(unused_in_selector):
                # –í–µ—Å—å —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                removed_classes.extend(unused_in_selector)
                
                if not dry_run:
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
                    rule_pattern = re.escape(selector) + r'\s*\{' + re.escape(properties) + r'\}'
                    content = re.sub(rule_pattern, '', content, flags=re.MULTILINE | re.DOTALL)
        
        if removed_classes and not dry_run:
            # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            content = re.sub(r'\n\s*\n\s*\n', '\n\n', content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"    ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(removed_classes)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤")
            print(f"    üìâ –†–∞–∑–º–µ—Ä —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {len(original_content) - len(content)} –±–∞–π—Ç")
        
        return removed_classes, len(original_content) - len(content) if not dry_run else 0
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
        return [], 0

def merge_duplicate_selectors():
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ã."""
    print("\nüîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤...")
    
    css_files = list(Path("static/css").rglob("*.css"))
    
    for css_file in css_files:
        print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ {css_file}...")
        
        try:
            with open(css_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ù–∞–π—Ç–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            selector_pattern = r'([^{}]+)\s*\{([^{}]*)\}'
            rules = re.findall(selector_pattern, content, re.MULTILINE | re.DOTALL)
            
            selector_properties = defaultdict(list)
            
            for selector, properties in rules:
                selector = selector.strip()
                properties = properties.strip()
                
                if properties:
                    selector_properties[selector].append(properties)
            
            # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            merged_content = content
            
            for selector, properties_list in selector_properties.items():
                if len(properties_list) > 1:
                    # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞
                    all_properties = []
                    for props in properties_list:
                        all_properties.extend([p.strip() for p in props.split(';') if p.strip()])
                    
                    # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–≤–æ–π—Å—Ç–≤
                    unique_properties = []
                    seen = set()
                    for prop in all_properties:
                        if prop not in seen:
                            unique_properties.append(prop)
                            seen.add(prop)
                    
                    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
                    new_rule = f"{selector} {{\n  {'; '.join(unique_properties)};\n}}"
                    
                    # –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                    old_pattern = re.escape(selector) + r'\s*\{[^{}]*\}'
                    matches = re.findall(old_pattern, content, re.MULTILINE | re.DOTALL)
                    
                    for match in matches:
                        merged_content = merged_content.replace(match, '', 1)
                    
                    # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
                    merged_content += f"\n{new_rule}\n"
                    
                    print(f"    ‚úÖ –û–±—ä–µ–¥–∏–Ω—ë–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä {selector} ({len(properties_list)} —Ä–∞–∑)")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if merged_content != content:
                with open(css_file, 'w', encoding='utf-8') as f:
                    f.write(merged_content)
                print(f"    üìâ –†–∞–∑–º–µ—Ä —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {len(content) - len(merged_content)} –±–∞–π—Ç")
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {css_file}: {e}")

def minify_css_file(file_path):
    """–ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç CSS —Ñ–∞–π–ª."""
    print(f"  –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è {file_path}...")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_size = len(content)
        
        # –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        content = re.sub(r'/\*.*?\*/', '', content, flags=re.DOTALL)
        
        # –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        content = re.sub(r'\s+', ' ', content)
        content = re.sub(r'\s*{\s*', '{', content)
        content = re.sub(r'\s*}\s*', '}', content)
        content = re.sub(r'\s*;\s*', ';', content)
        content = re.sub(r'\s*:\s*', ':', content)
        content = re.sub(r'\s*,\s*', ',', content)
        
        # –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        content = re.sub(r'\s*>\s*', '>', content)
        content = re.sub(r'\s*\+\s*', '+', content)
        content = re.sub(r'\s*~\s*', '~', content)
        
        # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
        content = re.sub(r';}', '}', content)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        minified_path = file_path.with_suffix('.min.css')
        with open(minified_path, 'w', encoding='utf-8') as f:
            f.write(content.strip())
        
        reduction = original_size - len(content)
        print(f"    ‚úÖ –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {reduction} –±–∞–π—Ç ({reduction/original_size*100:.1f}%)")
        print(f"    üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {minified_path}")
        
        return reduction
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ {file_path}: {e}")
        return 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üßπ PulseAI CSS Cleanup Tool")
    print("=" * 50)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    os.chdir(project_root)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã
    used_classes = get_used_classes()
    
    # –û—á–∏—â–∞–µ–º CSS —Ñ–∞–π–ª—ã
    print("\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤...")
    css_files = list(Path("static/css").rglob("*.css"))
    
    total_removed = 0
    total_saved = 0
    
    for css_file in css_files:
        if css_file.name.endswith('.min.css'):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            
        removed, saved = cleanup_css_file(css_file, used_classes, dry_run=False)
        total_removed += len(removed)
        total_saved += saved
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò:")
    print(f"  –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {total_removed}")
    print(f"  –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –±–∞–π—Ç: {total_saved:,}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    merge_duplicate_selectors()
    
    # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    print("\n‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π...")
    total_minified = 0
    
    for css_file in css_files:
        if css_file.name.endswith('.min.css'):
            continue
            
        saved = minify_css_file(css_file)
        total_minified += saved
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
    print(f"  –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {total_saved:,} –±–∞–π—Ç")
    print(f"  –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –ø—Ä–∏ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏: {total_minified:,} –±–∞–π—Ç")
    print(f"  –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_saved + total_minified:,} –±–∞–π—Ç")
    
    print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return 0

if __name__ == "__main__":
    exit(main())
