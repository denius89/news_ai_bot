#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from supabase import create_client

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def database_maintenance():
    """–ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    load_dotenv()

    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_KEY')

    if not url or not key:
        print("‚ùå SUPABASE_URL or SUPABASE_KEY not found in environment")
        return False

    supabase = create_client(url, key)

    print("üèóÔ∏è  –ü–û–õ–ù–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)

    # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 40)

    tables = ['news', 'events', 'users', 'digests', 'user_notifications']
    initial_counts = {}

    for table in tables:
        try:
            result = supabase.table(table).select('*', count='exact').limit(1).execute()
            count = result.count
            initial_counts[table] = count
            print(f"   üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"   ‚ùå {table}: {e}")
            initial_counts[table] = 0

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:")
    print("-" * 40)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ news
    try:
        result = supabase.table('news').select('uid').execute()
        if result.data:
            uid_counts = {}
            for item in result.data:
                uid = item.get('uid')
                if uid:
                    uid_counts[uid] = uid_counts.get(uid, 0) + 1

            duplicates = [uid for uid, count in uid_counts.items() if count > 1]
            print(f"   üì∞ –î—É–±–ª–∏–∫–∞—Ç—ã –≤ news –ø–æ uid: {len(duplicates)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ news: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ events
    try:
        result = supabase.table('events').select('event_id').execute()
        if result.data:
            event_id_counts = {}
            for item in result.data:
                event_id = item.get('event_id')
                if event_id:
                    event_id_counts[event_id] = event_id_counts.get(event_id, 0) + 1

            duplicates = [event_id for event_id, count in event_id_counts.items() if count > 1]
            print(f"   üìÖ –î—É–±–ª–∏–∫–∞—Ç—ã –≤ events –ø–æ event_id: {len(duplicates)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ events: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ user_notifications -> users
    try:
        result = supabase.table('user_notifications').select('user_id').execute()
        if result.data:
            user_ids = [row['user_id'] for row in result.data]
            unique_user_ids = set(user_ids)

            users_result = (
                supabase.table('users').select('id').in_('id', list(unique_user_ids)).execute()
            )
            existing_user_ids = set(row['id'] for row in users_result.data)

            orphaned = unique_user_ids - existing_user_ids
            print(f"   üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ user_id: {len(orphaned)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π: {e}")

    # 3. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•:")
    print("-" * 40)

    from datetime import datetime, timedelta

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    try:
        thirty_days_ago = datetime.utcnow() - timedelta(days=30)
        result = (
            supabase.table('news')
            .delete()
            .lt('published_at', thirty_days_ago.isoformat())
            .execute()
        )
        cleaned_news = len(result.data) if result.data else 0
        print(f"   üì∞ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {cleaned_news}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Å—Ç–∞—Ä—à–µ 60 –¥–Ω–µ–π)
    try:
        sixty_days_ago = datetime.utcnow() - timedelta(days=60)
        result = (
            supabase.table('events').delete().lt('event_time', sixty_days_ago.isoformat()).execute()
        )
        cleaned_events = len(result.data) if result.data else 0
        print(f"   üìÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π: {cleaned_events}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    try:
        week_ago = datetime.utcnow() - timedelta(days=7)
        result = (
            supabase.table('user_notifications')
            .delete()
            .eq('read', True)
            .lt('timestamp', week_ago.isoformat())
            .execute()
        )
        cleaned_notifications = len(result.data) if result.data else 0
        print(f"   üîî –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {cleaned_notifications}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 40)

    total_cleaned = 0
    for table in tables:
        try:
            result = supabase.table(table).select('*', count='exact').limit(1).execute()
            final_count = result.count
            initial_count = initial_counts.get(table, 0)
            cleaned = initial_count - final_count
            total_cleaned += cleaned

            print(f"   üìä {table}: {final_count} –∑–∞–ø–∏—Å–µ–π (—É–¥–∞–ª–µ–Ω–æ: {cleaned})")
        except Exception as e:
            print(f"   ‚ùå {table}: {e}")

    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 40)

    print("   üîÑ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ:")
    print("      python tools/database_maintenance.py")
    print("   üìä –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–æ—Å—Ç —Ç–∞–±–ª–∏—Ü:")
    print("      python tools/check_all_columns.py")
    print("   üßπ –î–ª—è –≥–ª—É–±–æ–∫–æ–π –æ—á–∏—Å—Ç–∫–∏:")
    print("      python tools/cleanup_database.py")

    print(f"\n‚úÖ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_cleaned}")
    return True


if __name__ == "__main__":
    database_maintenance()
