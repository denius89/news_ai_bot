#!/usr/bin/env python3
"""
Optimized news fetching tool with AI call reduction.

This script uses the optimized parser to fetch news with reduced AI API calls
while maintaining quality through pre-filtering, caching, and local prediction.

Example usage:
    python tools/fetch_optimized.py
    python tools/fetch_optimized.py --max-concurrent 5 --min-importance 0.6
    python tools/fetch_optimized.py --enable-local-predictor --disable-cache
"""

import asyncio
import argparse
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from parsers.optimized_parser import run_optimized_parser
from ai_modules.metrics import get_metrics

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("logs/fetch_optimized.log", encoding="utf-8"),
    ],
)

logger = logging.getLogger(__name__)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞."""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    parser.add_argument(
        "--max-concurrent",
        type=int,
        default=10,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)",
    )
    parser.add_argument(
        "--min-importance",
        type=float,
        default=0.6,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.6)",
    )
    parser.add_argument(
        "--min-credibility",
        type=float,
        default=0.7,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.7)",
    )
    parser.add_argument(
        "--enable-local-predictor",
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä",
    )
    parser.add_argument(
        "--disable-cache",
        action="store_true",
        help="–û—Ç–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
    )
    parser.add_argument(
        "--disable-prefilter",
        action="store_true",
        help="–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é",
    )
    parser.add_argument(
        "--show-metrics",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
    )
    parser.add_argument(
        "--reset-metrics",
        action="store_true",
        help="–°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º",
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    
    if args.enable_local_predictor:
        os.environ['LOCAL_PREDICTOR_ENABLED'] = 'true'
    
    if args.disable_cache:
        os.environ['CACHE_ENABLED'] = 'false'
    
    if args.disable_prefilter:
        os.environ['PREFILTER_ENABLED'] = 'false'
    
    # –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
    if args.reset_metrics:
        metrics = get_metrics()
        metrics.reset_metrics()
        logger.info("–ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: concurrent={args.max_concurrent}, "
                f"importance‚â•{args.min_importance}, credibility‚â•{args.min_credibility}")
    
    try:
        # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        result = await run_optimized_parser(max_concurrent=args.max_concurrent)
        
        if result['success']:
            logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üì∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['processed_items']}")
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {result['saved_items']}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['processing_time_seconds']}s")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            metrics_summary = result.get('metrics', {})
            logger.info("üìà –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
            logger.info(f"   ü§ñ AI –≤—ã–∑–æ–≤–æ–≤: {metrics_summary.get('ai_calls_total', 0)}")
            logger.info(f"   üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–æ–º: {metrics_summary.get('ai_skipped_prefilter_total', 0)}")
            logger.info(f"   üíæ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫—ç—à–µ–º: {metrics_summary.get('ai_skipped_cache_total', 0)}")
            logger.info(f"   üß† –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–æ–º: {metrics_summary.get('ai_skipped_local_pred_total', 0)}")
            logger.info(f"   üí∞ –í—Å–µ–≥–æ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –≤—ã–∑–æ–≤–æ–≤: {metrics_summary.get('ai_calls_saved_total', 0)}")
            logger.info(f"   üìä –≠–∫–æ–Ω–æ–º–∏—è: {metrics_summary.get('ai_calls_saved_percentage', 0)}%")
            
            if args.show_metrics:
                print("\n" + "="*60)
                print("üìä –ü–û–î–†–û–ë–ù–´–ï –ú–ï–¢–†–ò–ö–ò")
                print("="*60)
                for key, value in metrics_summary.items():
                    print(f"{key}: {value}")
                print("="*60)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            ai_calls_saved = metrics_summary.get('ai_calls_saved_total', 0)
            news_processed = metrics_summary.get('news_processed_total', 0)
            
            if news_processed > 0:
                efficiency = (ai_calls_saved / news_processed) * 100
                logger.info(f"üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {efficiency:.1f}%")
                
                if efficiency >= 60:
                    logger.info("üéâ –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (‚â•60%)")
                elif efficiency >= 30:
                    logger.info("‚úÖ –•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                else:
                    logger.warning("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
