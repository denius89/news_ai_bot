#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from supabase import create_client

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def optimize_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    load_dotenv()

    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_KEY')

    if not url or not key:
        print("‚ùå SUPABASE_URL or SUPABASE_KEY not found in environment")
        return False

    supabase = create_client(url, key)

    print("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 60)

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    print("\nüìà 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")

    indexes = [
        # News indexes
        (
            "news",
            "idx_news_published_at",
            "CREATE INDEX IF NOT EXISTS idx_news_published_at ON news (published_at DESC)",
        ),
        ("news", "idx_news_source", "CREATE INDEX IF NOT EXISTS idx_news_source ON news (source)"),
        (
            "news",
            "idx_news_category",
            "CREATE INDEX IF NOT EXISTS idx_news_category ON news (category)",
        ),
        (
            "news",
            "idx_news_credibility",
            "CREATE INDEX IF NOT EXISTS idx_news_credibility ON news (credibility DESC)",
        ),
        # Events indexes
        (
            "events",
            "idx_events_time_desc",
            "CREATE INDEX IF NOT EXISTS idx_events_time_desc ON events (event_time DESC)",
        ),
        (
            "events",
            "idx_events_country",
            "CREATE INDEX IF NOT EXISTS idx_events_country ON events (country)",
        ),
        (
            "events",
            "idx_events_importance",
            "CREATE INDEX IF NOT EXISTS idx_events_importance ON events (importance)",
        ),
        # Users indexes
        (
            "users",
            "idx_users_telegram",
            "CREATE INDEX IF NOT EXISTS idx_users_telegram ON users (telegram_id)",
        ),
        # User notifications indexes
        (
            "user_notifications",
            "idx_notifications_user",
            "CREATE INDEX IF NOT EXISTS idx_notifications_user ON user_notifications (user_id)",
        ),
        (
            "user_notifications",
            "idx_notifications_read",
            "CREATE INDEX IF NOT EXISTS idx_notifications_read ON user_notifications (read)",
        ),
        (
            "user_notifications",
            "idx_notifications_timestamp",
            "CREATE INDEX IF NOT EXISTS idx_notifications_timestamp ON user_notifications (timestamp DESC)",
        ),
    ]

    for table, index_name, sql in indexes:
        try:
            # –í Supabase –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π SQL, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            print(f"   üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å {index_name} –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")

    # 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü
    print("\nüìä 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü...")

    tables = ['news', 'events', 'users', 'digests', 'user_notifications']

    for table in tables:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            result = supabase.table(table).select('*', count='exact').limit(1).execute()
            total_count = result.count

            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            sample = supabase.table(table).select('*').limit(5).execute()

            print(f"\n   üìã –¢–∞–±–ª–∏—Ü–∞: {table}")
            print(f"      üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}")

            if sample.data:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                columns = list(sample.data[0].keys())
                print(f"      üìù –ö–æ–ª–æ–Ω–∫–∏: {', '.join(columns)}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
                for column in columns:
                    non_null_count = sum(1 for row in sample.data if row.get(column) is not None)
                    fill_rate = (non_null_count / len(sample.data)) * 100 if sample.data else 0
                    print(f"         ‚Ä¢ {column}: {fill_rate:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\nüîç 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_notifications -> users
        result = supabase.table('user_notifications').select('user_id').execute()
        if result.data:
            user_ids = [row['user_id'] for row in result.data]
            unique_user_ids = set(user_ids)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ user_id —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users
            users_result = (
                supabase.table('users').select('id').in_('id', list(unique_user_ids)).execute()
            )
            existing_user_ids = set(row['id'] for row in users_result.data)

            orphaned_notifications = unique_user_ids - existing_user_ids
            if orphaned_notifications:
                print(
                    f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ user_id: {len(orphaned_notifications)}"
                )
            else:
                print(f"   üìã –¢–∞–±–ª–∏—Ü–∞: {table}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")

    # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\nüí° 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("-" * 40)

    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        result = supabase.table('news').select('*', count='exact').limit(1).execute()
        news_count = result.count

        if news_count > 1000:
            print("   üì∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (>30 –¥–Ω–µ–π)")

        result = supabase.table('events').select('*', count='exact').limit(1).execute()
        events_count = result.count

        if events_count > 500:
            print("   üìÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π (>60 –¥–Ω–µ–π)")

        result = supabase.table('user_notifications').select('*', count='exact').limit(1).execute()
        notifications_count = result.count

        if notifications_count > 100:
            print("   üîî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û—á–∏—Å—Ç–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π")

        print("   üîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –æ—á–∏—Å—Ç–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
        print("   üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–æ—Å—Ç —Ç–∞–±–ª–∏—Ü")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

    print("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return True


if __name__ == "__main__":
    optimize_database()
