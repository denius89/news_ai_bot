#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
"""

import asyncio
import logging
import yaml
import sys
from pathlib import Path
from typing import Dict, List, Set

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

logger = logging.getLogger(__name__)


def load_yaml_file(file_path: Path) -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ YAML —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return yaml.safe_load(f) or {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return {}


def save_yaml_file(file_path: Path, data: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ YAML —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            yaml.dump(data, f, default_flow_style=False, sort_keys=True)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_path}: {e}")


def extract_urls_from_sources(sources_list: List) -> Set[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    urls = set()

    for source in sources_list:
        if isinstance(source, dict):
            url = source.get("url", "")
            if url:
                urls.add(url)
        elif isinstance(source, str):
            if ":" in source:
                # –§–æ—Ä–º–∞—Ç "name: url"
                url = source.split(":", 1)[1].strip()
                if url:
                    urls.add(url)
            else:
                # –ü—Ä–æ—Å—Ç–æ URL
                if source.strip():
                    urls.add(source.strip())

    return urls


def merge_sources(old_sources: List, new_sources: List) -> List:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    old_urls = extract_urls_from_sources(old_sources)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    new_urls = extract_urls_from_sources(new_sources)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º URL
    all_urls = old_urls.union(new_urls)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    merged_sources = []

    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    for source in old_sources:
        if isinstance(source, dict):
            url = source.get("url", "")
            if url in all_urls:
                merged_sources.append(source)
                all_urls.discard(url)  # –£–±–∏—Ä–∞–µ–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        elif isinstance(source, str):
            if ":" in source:
                url = source.split(":", 1)[1].strip()
            else:
                url = source.strip()

            if url in all_urls:
                merged_sources.append(source)
                all_urls.discard(url)

    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ —Å—Ç–∞—Ä—ã—Ö
    for source in new_sources:
        if isinstance(source, dict):
            url = source.get("url", "")
            if url in all_urls:
                merged_sources.append(source)
        elif isinstance(source, str):
            if ":" in source:
                url = source.split(":", 1)[1].strip()
            else:
                url = source.strip()

            if url in all_urls:
                merged_sources.append(source)

    return merged_sources


def merge_configs(old_config: Dict, new_config: Dict) -> Dict:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
    merged_config = {}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –æ–±–µ–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    all_categories = set(old_config.keys()).union(set(new_config.keys()))

    for category in all_categories:
        merged_config[category] = {}

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        old_subcategories = old_config.get(category, {})
        new_subcategories = new_config.get(category, {})

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_subcategories = set(old_subcategories.keys()).union(set(new_subcategories.keys()))

        for subcategory in all_subcategories:
            merged_config[category][subcategory] = {}

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            old_subcategory_data = old_subcategories.get(subcategory, {})
            new_subcategory_data = new_subcategories.get(subcategory, {})

            old_sources = old_subcategory_data.get("sources", [])
            new_sources = new_subcategory_data.get("sources", [])

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            merged_sources = merge_sources(old_sources, new_sources)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∫–æ–Ω–∫—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
            icon = old_subcategory_data.get("icon") or new_subcategory_data.get("icon")

            merged_config[category][subcategory]["sources"] = merged_sources
            if icon:
                merged_config[category][subcategory]["icon"] = icon

    return merged_config


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è."""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    backup_path = Path("config/sources.backup.20251005.yaml")
    current_path = Path("config/data/sources.yaml")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    old_config = load_yaml_file(backup_path)

    logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    new_config = load_yaml_file(current_path)

    if not old_config:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        return

    if not new_config:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    merged_config = merge_configs(old_config, new_config)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_new_path = Path("config/sources.backup.merged.yaml")
    save_yaml_file(backup_new_path, merged_config)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    save_yaml_file(current_path, merged_config)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_sources = 0
    for category, subcategories in merged_config.items():
        for subcategory, data in subcategories.items():
            sources = data.get("sources", [])
            total_sources += len(sources)

    logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info(f"üìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {total_sources}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, subcategories in merged_config.items():
        category_sources = 0
        for subcategory, data in subcategories.items():
            sources = data.get("sources", [])
            category_sources += len(sources)

        if category_sources > 0:
            logger.info(f"  ‚Ä¢ {category}: {category_sources} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")


if __name__ == "__main__":
    asyncio.run(main())
