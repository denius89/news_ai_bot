#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π (Investing) –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ Supabase.
"""

import logging
import argparse

from parsers.events_parser import fetch_investing_events
from database.db_models import upsert_events

logger = logging.getLogger("tools.fetch_and_store_events")


def main():
    parser = argparse.ArgumentParser(description="Fetch and store Investing events")
    parser.add_argument(
        "--limit-days", type=int, default=2, help="–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)"
    )
    args = parser.parse_args()

    logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å Investing (days={args.limit_days})...")
    try:
        events = fetch_investing_events(limit_days=args.limit_days)
        if not events:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
            return
        upsert_events(events)
        logger.info(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)


if __name__ == "__main__":
    main()
