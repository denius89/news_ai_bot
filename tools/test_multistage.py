#!/usr/bin/env python3
"""
–¢–µ—Å—Ç multi-stage –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —Å Chain-of-Thought.
"""

import sys
import asyncio
import os
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from models.news import NewsItem
from digests.generator import generate_digest
from datetime import datetime


async def test_multistage_generation():
    """–¢–µ—Å—Ç multi-stage –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""

    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º multi-stage –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")

    try:
        # Test with multi-stage enabled
        result = await generate_digest(
            limit=5, category="crypto", ai=True, style="analytical", use_multistage=True  # Enable multi-stage
        )

        print(f"‚úÖ Multi-stage —É—Å–ø–µ—à–Ω–æ:\n{result[:200]}...")

        # Test normal generation for comparison
        normal_result = await generate_digest(
            limit=5, category="crypto", ai=True, style="analytical", use_multistage=False
        )

        print(f"\nüìä –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:\n{normal_result[:200]}...")

        print(f"\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã:")
        print(f"Multi-stage: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û–±—ã—á–Ω–∞—è: {len(normal_result)} —Å–∏–º–≤–æ–ª–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_multistage_generation())
