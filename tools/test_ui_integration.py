#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI —Å –Ω–æ–≤—ã–º–∏ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
"""

import sys
import json
import requests
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def test_ui_api_integration():
    """–¢–µ—Å—Ç API endpoint –¥–ª—è UI —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏."""

    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é UI —Å –Ω–æ–≤—ã–º–∏ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏...")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    test_requests = [
        {
            "name": "–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            "data": {"category": "crypto", "style": "analytical", "length": "medium", "limit": 5},
        },
        {
            "name": "–° RAG –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π",
            "data": {
                "category": "crypto",
                "style": "analytical",
                "length": "medium",
                "limit": 5,
                "use_rag": True,
                "use_personalization": True,
                "audience": "general",
            },
        },
        {
            "name": "–° multi-stage –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π",
            "data": {
                "category": "crypto",
                "style": "analytical",
                "length": "long",
                "limit": 5,
                "use_multistage": True,
                "use_rag": True,
                "use_personalization": True,
                "audience": "pro",
            },
        },
    ]

    base_url = "http://localhost:8001"
    endpoint = f"{base_url}/api/digests/generate"

    for test_case in test_requests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_case['name']}")
        print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(test_case['data'], indent=2, ensure_ascii=False)}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                endpoint, json=test_case["data"], headers={"Content-Type": "application/json"}, timeout=30
            )

            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")

            if response.status_code == 200:
                result = response.json()
                if result.get("status") == "success":
                    digest = result.get("data", {}).get("content", "")
                    metadata = result.get("data", {}).get("metadata", {})

                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∞–π–¥–∂–µ—Å—Ç: {len(digest)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    new_features = ["use_multistage", "use_rag", "use_personalization", "audience"]
                    for feature in new_features:
                        value = metadata.get(feature, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                        print(f"  - {feature}: {value}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                    if digest:
                        preview = digest[:200] + "..." if len(digest) > 200 else digest
                        print(f"–ù–∞—á–∞–ª–æ: {preview}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")

        except requests.exceptions.ConnectionError:
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8001")
        except requests.exceptions.Timeout:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    print(f"\nüí° –ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ UI:")
    print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print(f"2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
    print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ Network tab –±—Ä–∞—É–∑–µ—Ä–∞")
    print(f"4. –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: use_multistage, use_rag, use_personalization, audience")


if __name__ == "__main__":
    test_ui_api_integration()
